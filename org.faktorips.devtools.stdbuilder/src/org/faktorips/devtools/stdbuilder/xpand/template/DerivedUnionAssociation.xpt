«IMPORT java::util»
«IMPORT org::faktorips::devtools::core::builder::naming»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::productcmpt::model»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::template::CommonGeneratorExtensions»

«DEFINE methodsForDerivedUnion(XClass currentContextClass) FOR XDerivedUnionAssociation-»
	«EXPAND getter(currentContextClass)»
	«EXPAND getterNumOf(currentContextClass)»
	«EXPAND getterNumOfInternal(currentContextClass)»
«ENDDEFINE»

«DEFINE getter(XClass currentContextClass) FOR XDerivedUnionAssociation-»
    /**
     * {@inheritDoc}
     * 
     * @generated
     */
     «overrideAnnotation(true)»
     public «List_(targetClassName)» «methodNameGetter»() {
     	«List_(targetClassName)» result = new «ArrayList(targetClassName)»(«methodNameGetNumOfInternal»());
     	«IF isImplementedInSuperclass(currentContextClass)-»
     		result.addAll(super.«methodNameGetter»());
     	«ENDIF-»
     	«FOREACH (Set[XAssociation])getSubsetAssociations(currentContextClass) AS subsetAssociation-»
 			«IF subsetAssociation.oneToMany-»
     			result.addAll(«subsetAssociation.methodNameGetter»());
     		«ELSE-»
     			result.add(«subsetAssociation.methodNameGetter»());
     		«ENDIF-»
     	«ENDFOREACH-»
     	return result;
     }
«ENDDEFINE»

«DEFINE getterNumOf(XClass currentContextClass) FOR XDerivedUnionAssociation-»
    /**
     * {@inheritDoc}
     * 
     * @generated
     */
     «overrideAnnotation(true)»
     public int «methodNameGetNumOf»() {
     	return «methodNameGetNumOfInternal»();
     }
«ENDDEFINE»

«DEFINE getterNumOfInternal(XClass currentContextClass) FOR XDerivedUnionAssociation-»
    /**
     * @generated
     */
     private int «methodNameGetNumOfInternal»() {
        int num = 0;
     	«FOREACH (Set[XAssociation])getSubsetAssociations(currentContextClass) AS subsetAssociation-»
     		num += «subsetAssociation.methodNameGetNumOf»();
     	«ENDFOREACH-»
        return num;
     }
«ENDDEFINE»

