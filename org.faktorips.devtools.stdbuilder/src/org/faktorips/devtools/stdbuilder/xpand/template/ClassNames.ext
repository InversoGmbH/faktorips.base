import java::util;
import java::beans;
import org::w3c::dom;
import org::faktorips::valueset;
import org::faktorips::runtime;
import org::faktorips::runtime::internal;
import org::faktorips::devtools::stdbuilder::xpand::model;

IModelObject(AbstractGeneratorModelNode this) :
	addImport(IModelObject.name);

IModelObjectDelta(AbstractGeneratorModelNode this):
	addImport(IModelObjectDelta.name);
	
IModelObjectVisitor(AbstractGeneratorModelNode this):
	addImport(IModelObjectVisitor.name);
	
IDeltaComputationOptions(AbstractGeneratorModelNode this):
	addImport(IDeltaComputationOptions.name);
	
ModelObjectDelta(AbstractGeneratorModelNode this):
	addImport(ModelObjectDelta.name);
	
MessageList(AbstractGeneratorModelNode this):
	addImport(MessageList.name);
	
IConfigurableModelObject(AbstractGeneratorModelNode this) :
	addImport(IConfigurableModelObject.name);
	
AbstractModelObject(AbstractGeneratorModelNode this) :
	addImport(AbstractModelObject.name);
	
IValidationContext(AbstractGeneratorModelNode this) :
	addImport(IValidationContext.name);

PropertyChangeEvent(AbstractGeneratorModelNode this):
	addImport(PropertyChangeEvent.name);
	
AssociationChangedEvent(AbstractGeneratorModelNode this):
	addImport(AssociationChangedEvent.name);

// Collection is a reserved type. Thats why we have to use the underscore in the name and the string reference in addImport
Collection_(AbstractGeneratorModelNode this, String genericType) :
	addImport("java.util.Collection") + "<" + genericType + ">";

// List is a reserved type. Thats why we have to use the underscore in the name and the string reference in addImport
List_(AbstractGeneratorModelNode this, String genericType) :
	addImport("java.util.List") + "<" + genericType + ">";

// ArrayList.name does return List. Thats why we have to use the string reference in addImport
ArrayList(AbstractGeneratorModelNode this, String genericType) :
	addImport("java.util.ArrayList") + "<" + genericType + ">";

Map(AbstractGeneratorModelNode this, String genericKey, String genericValue) :
	addImport(Map.name) + "<"+ genericKey + ", " + genericValue + ">";
	
HashMap(AbstractGeneratorModelNode this, String genericKey, String genericValue) :
	addImport(HashMap.name) + "<"+ genericKey + ", " + genericValue + ">";

LinkedHashMap(AbstractGeneratorModelNode this, String genericKey, String genericValue) :
	addImport(LinkedHashMap.name) + "<"+ genericKey + ", " + genericValue + ">";
	
Iterator(AbstractGeneratorModelNode this, String genericType) :
	addImport(Iterator.name) + "<" + genericType + ">";
	
Collections(AbstractGeneratorModelNode this) :
	addImport(Collections.name);

Calendar(AbstractGeneratorModelNode this) :
	addImport(Calendar.name);

Element(AbstractGeneratorModelNode this) :
	addImport(Element.name);

IProductComponent(AbstractGeneratorModelNode this) :
	addImport(IProductComponent.name);

ProductComponentLink(AbstractGeneratorModelNode this, String genericType) :
	addImport(ProductComponentLink.name) + "<" + genericType + ">";

IProductComponentLink(AbstractGeneratorModelNode this, String genericType) :
	addImport(IProductComponentLink.name) + "<" + genericType + ">";
	
CardinalityRange(AbstractGeneratorModelNode this) :
	addImport(CardinalityRange.name);
	
IRuntimeRepository(AbstractGeneratorModelNode this) :
	addImport(IRuntimeRepository.name);
	
IXmlPersistenceSupport(AbstractGeneratorModelNode this) :
	addImport(IXmlPersistenceSupport.name);

// EXECPTIONS
NoSuchElementException(AbstractGeneratorModelNode this) :
	addImport(NoSuchElementException.name);

IllegalRepositoryModificationException(AbstractGeneratorModelNode this) :
	addImport(IllegalRepositoryModificationException.name);
	
ValueSet(AbstractGeneratorModelNode this):
	addImport(ValueSet.name);
