/***************************************************************************************************
 * Copyright (c) 2005-2008 Faktor Zehn AG und andere.
 * 
 * Alle Rechte vorbehalten.
 * 
 * Dieses Programm und alle mitgelieferten Sachen (Dokumentationen, Beispiele, Konfigurationen,
 * etc.) duerfen nur unter den Bedingungen der Faktor-Zehn-Community Lizenzvereinbarung - Version
 * 0.1 (vor Gruendung Community) genutzt werden, die Bestandteil der Auslieferung ist und auch unter
 * http://www.faktorzehn.org/f10-org:lizenzen:community eingesehen werden kann.
 * 
 * Mitwirkende: Faktor Zehn AG - initial API and implementation - http://www.faktorzehn.de
 * 
 **************************************************************************************************/

package org.faktorips.devtools.stdbuilder.changelistener;

import org.faktorips.codegen.JavaCodeFragmentBuilder;
import org.faktorips.devtools.core.model.ipsproject.IIpsArtefactBuilder;

/**
 * Interface for change listener support builders allowing the implementation of different event
 * listener mechanisms.
 * 
 * @author Daniel Hohenberger
 */
public interface IChangeListenerSupportBuilder extends IIpsArtefactBuilder {

    /**
     * Generates code for the notification of change listeners.
     * 
     * @param methodsBuilder the builder used for writing the code.
     * @param eventType the type of event.
     * @param fieldName the name of the changed property.
     * @param paramName the name of the parameter used to change the property.
     */
    public void generateChangeListenerSupport(JavaCodeFragmentBuilder methodsBuilder,
            ChangeEventType eventType,
            String fieldName,
            String paramName);

    /**
     * Generates the method that is called by the code generated by
     * <code>generateChangeListenerSupport</code>. Here filtering and propagation of events can
     * happen.
     * 
     * @param methodBuilder the builder used for writing the code.
     * @param parentModelObjectName the name of the parent model object (used for propagation).
     */
    public void generateMethodNotifyChangeListeners(JavaCodeFragmentBuilder methodBuilder, String parentModelObjectName);

    /**
     * Returns the name of the superclass containing the generic change event handling code.
     * 
     * @param isConfigurableByProductCmptType denotes if the policy component type for which the
     *            event handling is generated is configurable by product data.
     */
    public String getSuperclass(boolean isConfigurableByProductCmptType);
}
