import java::util;
import org::faktorips::runtime;
import org::faktorips::runtime::internal;
import org::faktorips::devtools::stdbuilder::xpand::model;

IModelObject(AbstractGeneratorModelNode this) :
	addImport("org.faktorips.runtime.IModelObject");
	
IConfigurableModelObject(AbstractGeneratorModelNode this) :
	addImport(IConfigurableModelObject.name);
	
IValidationContext(AbstractGeneratorModelNode this) :
	addImport(IValidationContext.name);

// Collection is a reserved type. Thats why we have to use the underscore in the name and the string reference in addImport
Collection_(AbstractGeneratorModelNode this) :
	addImport("java.util.Collection");

// List is a reserved type. Thats why we have to use the underscore in the name and the string reference in addImport
List_(AbstractGeneratorModelNode this) :
	addImport("java.util.List");

// ArrayList.name does return List. Thats why we have to use the string reference in addImport
ArrayList(AbstractGeneratorModelNode this) :
	addImport("java.util.ArrayList");

Map(AbstractGeneratorModelNode this) :
	addImport(Map.name);

LinkedHashMap(AbstractGeneratorModelNode this) :
	addImport(LinkedHashMap.name);
	
Iterator(AbstractGeneratorModelNode this) :
	addImport(Iterator.name);
	
Collections(AbstractGeneratorModelNode this) :
	addImport(Collections.name);

Calendar(AbstractGeneratorModelNode this) :
	addImport(Calendar.name);

IProductComponent(AbstractGeneratorModelNode this) :
	addImport(IProductComponent.name);

ProductComponentLink(AbstractGeneratorModelNode this) :
	addImport(ProductComponentLink.name);

IProductComponentLink(AbstractGeneratorModelNode this) :
	addImport(IProductComponentLink.name);
	
CardinalityRange(AbstractGeneratorModelNode this) :
	addImport(CardinalityRange.name);
	
// EXECPTIONS
NoSuchElementException(AbstractGeneratorModelNode this) :
	addImport(NoSuchElementException.name);

IllegalRepositoryModificationException(AbstractGeneratorModelNode this) :
	addImport(IllegalRepositoryModificationException.name);