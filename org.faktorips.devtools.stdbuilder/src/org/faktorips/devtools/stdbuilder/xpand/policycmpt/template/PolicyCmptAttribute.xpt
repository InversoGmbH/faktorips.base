«IMPORT org::faktorips::devtools::stdbuilder»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::runtime»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::policycmpt::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::productcmpt::template»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::policycmpt::template::PolicyCmptAttributeExtension»

«DEFINE constantForPropertyName FOR XPolicyAttribute-»
	/**
	 * «localizedJDoc("FIELD_PROPERTY_NAME", name)»
	 * @generated
	 */
	public final static String «field(constantNamePropertyName)» = "«name»";
«ENDDEFINE»

«DEFINE memberField FOR XPolicyAttribute-»
	«IF generateField-»
		/**
		 * «localizedJDoc("FIELD_ATTRIBUTE_VALUE", name)»
		 *
		 * @generated
		 */
		«IF constant-»
			public static final «javaClassName» «field(fieldName)» = «defaultValueCode»;
		«ELSE-»
			«getAnnotations(AnnotatedJavaElementType::POLICY_CMPT_IMPL_CLASS_ATTRIBUTE_FIELD)-»
			«getAnnotations(AnnotatedJavaElementType::POLICY_CMPT_IMPL_CLASS_TRANSIENT_FIELD)-»
			private «javaClassName» «field(fieldName)» = «defaultValueCode»;
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE getter FOR XPolicyAttribute-» 
	«IF generateGetter-»
		/**
		 * «inheritDocOrJavaDoc("METHOD_GETVALUE", name, description)-»
		 *
		 * @generated
		 */
		«overrideAnnotationForPublishedMethodOrIf(published, overwrite)»
		public «javaClassName» «method(methodNameGetter)»{
			«IF generateField-»
				return «IF constant»«fieldName»«ELSE»«getReferenceOrSafeCopyIfNecessary(fieldName)»«ENDIF»;
			«ELSE-»
				«IF generateDefaultForDerivedAttribute-»
					return «defaultValueCode»;
				«ELSE-»
			        «localizedComment("COMMENT_DERIVED_ATTRIBUTE_METHOD_CALL")»
			        «EXPAND FormulaSignature::formulaParameterDeclaration FOR formulaSignature-»
			        return «EXPAND getProductGeneration».«EXPAND FormulaSignature::formulaCall FOR formulaSignature-»;			
				«ENDIF-»
			«ENDIF-»
		}
	«ENDIF-»
«ENDDEFINE»


«DEFINE setter FOR XPolicyAttribute-»
	«IF generateSetter-»
		/**
		 * «inheritDocOrJavaDoc("METHOD_SETVALUE", name, description)»
		 *
		 * @generated
		 */
		«overrideAnnotationForPublishedMethodOrIf(published, overwrite)-»
		public void «method(methodNameSetter, javaClassName, "newValue")»{
			«EXPAND PropertyChangeSupport::storeOldValue-»
			this.«fieldName» = newValue;
			«EXPAND PropertyChangeSupport::notify-»
		}
	«ENDIF-»
«ENDDEFINE»

«DEFINE allowedValuesMethod FOR XPolicyAttribute-»
	«IF generateGetAllowedValuesFor-»
	/**
	 * «inheritDocOrJavaDoc("METHOD_GET_ALLOWED_VALUES_FOR", name, description)»
	 *
	 * @generated
	 */
	«overrideAnnotationForPublishedMethodOrIf(published, overwrite)-»
	public «ValueSet()»<«datatypeClass»> «method(methodNameGetAllowedValuesFor, IValidationContext(), "context")»{
		return «methodNameGetProductCmptGeneration»().«methodNameGetAllowedValuesFor»(context);
	}
	«ENDIF-»
«ENDDEFINE»

«DEFINE getProductGeneration FOR XPolicyAttribute-»
	«IF generatingPublishedInterfaces-»
		((«productGenerationClassName»)«methodNameGetProductCmptGeneration»())
	«ELSE-»
		«methodNameGetProductCmptGeneration»()
	«ENDIF-»
«ENDDEFINE»

«DEFINE initConfigurableAttribute FOR XPolicyAttribute-»
	«IF generateInitWithProductData-»
        «fieldName» = «methodNameGetProductCmptGeneration»().«methodNameGetDefaultValue»();
    «ENDIF-»
«ENDDEFINE»

«DEFINE initAttributeFromXML FOR XPolicyAttribute-»
	«IF generateInitPropertiesFromXML-»
        if (propMap.containsKey("«name»")) {
            this.«fieldName» = «getNewInstanceExpression("propMap.get(\"" + name + "\")")»;
        }
    «ENDIF-»
«ENDDEFINE»

