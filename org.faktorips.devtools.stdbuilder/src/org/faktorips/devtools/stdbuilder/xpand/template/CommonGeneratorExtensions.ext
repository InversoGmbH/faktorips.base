import org::faktorips::devtools::stdbuilder::xpand::model;
import org::faktorips::devtools::stdbuilder::xpand::policycmpt::model;

extension org::faktorips::devtools::stdbuilder::xpand::template::MethodNames reexport;

create List[ImportStatement] imported (XClass this) :
	(List[ImportStatement]) {}; 

ImportStatement newImport(String qualifiedName) :
	JAVA org.faktorips.devtools.stdbuilder.xpand.model.ImportStatement.newInstance(java.lang.String);

String addImport(List[ImportStatement] imported, String qName) :
	imported.add(newImport(qName));

String camelCaseToUnderscore(String s) :
	JAVA org.faktorips.util.StringUtil.camelCaseToUnderscore(java.lang.String); 

overrideAnnotation(AbstractGeneratorModelNode this, boolean interfaceMethodImplementation) :
	if needOverrideAnnotation(interfaceMethodImplementation) then "@Override";
	
overrideAnnotation(XPolicyAttribute this, boolean interfaceMethodImplementation) :
	if overwrite || needOverrideAnnotation(interfaceMethodImplementation) then "@Override";
	
inheritDocOrJavaDoc(AbstractGeneratorModelNode this, String jDoc):
	generatingPublishedInterfaces?"{@inheritDoc}":localizedJDoc(jDoc);

inheritDocOrJavaDoc(AbstractGeneratorModelNode this, String jDoc, Object param):
	generatingPublishedInterfaces?"{@inheritDoc}":localizedJDoc(jDoc, param);
	
inheritDocOrJavaDoc(AbstractGeneratorModelNode this, String jDoc, Object param, Object desc):
	generatingPublishedInterfaces?"{@inheritDoc}":localizedJDoc(jDoc, param, desc);
	
abstract(XClass this) :
	if abstract then "abstract";
