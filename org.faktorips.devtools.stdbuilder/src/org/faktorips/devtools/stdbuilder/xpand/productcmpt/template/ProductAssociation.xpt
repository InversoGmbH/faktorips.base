«IMPORT java::util»
«IMPORT org::faktorips::devtools::core::builder::naming»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::productcmpt::model»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::template::CommonGeneratorExtensions»

«DEFINE field FOR XProductAssociation-»
	«IF !derivedUnion-»
	    /**
	     * «localizedJDoc("FIELD_ASSOCIATION", getName(oneToMany).toFirstUpper())»
	     * 
	     * @generated
	     */
		«IF oneToMany-»
			private «Map("String", IProductComponentLink(targetClassName))» «fieldName»  = new «LinkedHashMap("String", IProductComponentLink(targetClassName))»(0);
		«ELSE-»
			private «IProductComponentLink(targetClassName)» «fieldName» = null;
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE getterSetterAdder FOR XProductAssociation-»
	«IF !derivedUnion»
		«EXPAND getterProductCmpt»
		«EXPAND getterProductCmptGen»
		«EXPAND getterProductCmptPerIndex»
		«EXPAND setterMethodForToOne»
		«EXPAND getterLinksFor»
		«EXPAND getterSingleLinkFor»
		«EXPAND addMethod»
		«EXPAND addMethodWithCardinality»
		«EXPAND getCardinalityFor»
		«EXPAND getNumOf»
    «ENDIF»
«ENDDEFINE»

«DEFINE getterProductCmpt FOR XProductAssociation-»
    /**
     * {@inheritDoc}
     * 
     * @generated
     */
     «overrideAnnotation(true)»
   	«IF oneToMany-»
	    public «List_(targetClassName)» «methodNameGetter»() {
        	«List_(targetClassName)» result = new «ArrayList(targetClassName)»(«fieldName».size());
			for («IProductComponentLink(targetClassName)» «name.toFirstLower()» : «fieldName».values()) {
	            result.add(«name.toFirstLower()».«getTarget()»);
    	    }
        	return result;
    «ELSE-»
	    public «targetClassName» «methodNameGetter»() {
			return «fieldName» != null ? «fieldName».«getTarget()» : null;
    «ENDIF-»
    }
«ENDDEFINE»

«DEFINE getterProductCmptGen FOR XProductAssociation-»
    /**
     * {@inheritDoc}
     * 
     * @generated
     */
     «overrideAnnotation(true)»
   	«IF oneToMany-»
	    public «List_(targetClassGenerationName)» «methodNameGetter»(«Calendar()» effectiveDate) {
        	«List_(targetClassName)» targets = «methodNameGetter»();
        	«List_(targetClassGenerationName)» result = new «ArrayList(targetClassGenerationName)»();
			for («targetClassName» target : targets) {
				«targetClassGenerationName» gen = target.«methodNameGetTargetGeneration»(effectiveDate);
				if (gen != null) {
	                result.add(gen);
            }
        }
        return result;
    «ELSE-»
	    public «targetClassGenerationName» «methodNameGetter»(«Calendar()» effectiveDate) {
			return «fieldName» != null ? «fieldName».«getTarget()».«methodNameGetTargetGeneration»(effectiveDate) : null;
    «ENDIF-»
    }
«ENDDEFINE»

«DEFINE getterProductCmptPerIndex FOR XProductAssociation-»
	«IF oneToMany-»
    /**
     * {@inheritDoc}
     * 
     * @generated
     */
     «overrideAnnotation(true)»
	public «targetClassName» «methodNameGetSingle»(int index) {
		«Iterator(IProductComponentLink(targetClassName))» it = «fieldName».values().iterator();
        try {
            for (int i = 0; i < index; i++) {
                it.next();
            }
            return it.next().«getTarget()»;
        } catch («NoSuchElementException()» e) {
            throw new IndexOutOfBoundsException(e.getLocalizedMessage());
        }
	}
	«ENDIF»
«ENDDEFINE»

«DEFINE getterLinksFor FOR XProductAssociation-»
    /**
     * {@inheritDoc}
     * 
     * @generated
     */
     «overrideAnnotation(true)»
	«IF oneToMany-»
	    public «Collection_(IProductComponentLink(targetClassName))» «methodNameGetLinksFor»() {
    	    return «Collections()».unmodifiableCollection(«fieldName».values());
    «ELSE-»
	    public «IProductComponentLink(targetClassName)» «methodNameGetLinksFor»() {
    		return «fieldName»;
	«ENDIF-»
    }
«ENDDEFINE»

«DEFINE getterSingleLinkFor FOR XProductAssociation-»
    /**
     * {@inheritDoc}
     * 
     * @generated
     */
     «overrideAnnotation(true)»
    public «IProductComponentLink(targetClassName)» «methodNameGetLinkFor»(«targetClassName» productComponent) {
		«IF oneToMany-»
        	return «fieldName».get(productComponent.getId());
        «ELSE-»
        	return «fieldName».«getTargetId()».equals(productComponent.getId()) ? «fieldName» : null;
        «ENDIF-»
    }
«ENDDEFINE»

«DEFINE addMethod FOR XProductAssociation-»
	«IF oneToMany-»
    /**
     * «localizedJDoc("METHOD_ADD_RELATED_CMPT")»
     * 
     * @generated
     */
    public void «methodNameAdd»(«targetClassName» target) {
        «EXPAND ProductCommons::checkRepositoryModifyable-»
        this.«fieldName».put(target.getId(), new «ProductComponentLink(targetClassName)»(this, target));
    }
    «ENDIF»
«ENDDEFINE»

«DEFINE addMethodWithCardinality FOR XProductAssociation-»
«REM» TODO FIPS-1141 «ENDREM» 
	«IF oneToMany-»
    /**
     * «localizedJDoc("METHOD_ADD_RELATED_CMPT_WITH_CARDINALITY")»
     * 
     * @generated
     */
    public void «methodNameAdd»(«targetClassName» target, «CardinalityRange()» cardinality) {
        «EXPAND ProductCommons::checkRepositoryModifyable-»
        this.«fieldName».put(target.getId(), new «ProductComponentLink(targetClassName)»(this, target, cardinality));
    }
    «ENDIF»
«ENDDEFINE»

«DEFINE setterMethodForToOne FOR XProductAssociation-»
	«IF !oneToMany-»
    /**
     * «localizedJDoc("METHOD_SET_1_RELATED_CMPT", name)»
     * 
     * @generated
     */
    public void «methodNameSetter»(«targetClassName» target) {
        «EXPAND ProductCommons::checkRepositoryModifyable-»
        «fieldName» = (target == null ? null : new «ProductComponentLink(targetClassName)»(this, target));
    }
	«ENDIF»
«ENDDEFINE»

«DEFINE getCardinalityFor FOR XProductAssociation-»
	«IF hasMatchingAssociation()-»
    /**
     * {@inheritDoc}
     * 
     * @generated
     */
    «overrideAnnotation(true)»
    public «CardinalityRange()» «methodNameGetCardinalityFor»(«targetClassName» productCmpt) {
        if (productCmpt != null) {
    	«IF oneToMany-»
            return «fieldName».containsKey(productCmpt.«getId()») ? «fieldName».get(productCmpt.«getId()»)
                    .«getCardinality()» : null;
        «ELSE-»
            return «fieldName» != null && «fieldName».«getTargetId()».equals(productCmpt.«getId()») ? «fieldName»
                    .«getCardinality()» : null;
        «ENDIF-»
        }
        return null;
    }
    «ENDIF»
«ENDDEFINE»

«DEFINE getNumOf FOR XProductAssociation-»
	«IF oneToMany-»
    /**
     * {@inheritDoc}
     * 
     * @generated
     */
    «overrideAnnotation(true)»
    public int «methodNameGetNumOf»() {
        return «fieldName».size();
    }
    «ENDIF»
«ENDDEFINE»

«DEFINE getLinkMethods FOR XProductClass»
	«EXPAND getLinkMethod»
	«EXPAND getLinksMethod»
«ENDDEFINE»

«DEFINE getLinkMethod FOR XProductClass-»
	    /**
	     * {@inheritDoc}
	     * 
	     * @generated
	     */
	    «overrideAnnotation(false)»
	    public «IProductComponentLink("? extends " + IProductComponent())» «getLink("String linkName", IProductComponent() + " target")» {
	    	«FOREACH associations AS this-»
		        if ("«name»".equals(linkName)) {
		            return «methodNameGetLinkFor»((«targetClassName»)target);
		        }
		    «ENDFOREACH-»
		    «IF hasSupertype() -»
		        return super.«getLink("linkName", "target")»;
		    «ELSE-»
	   	        return null;
		    «ENDIF-»
	    }
«ENDDEFINE»

«DEFINE getLinksMethod FOR XProductClass»
    /**
     * {@inheritDoc}
     * 
     * @generated
     */
    «overrideAnnotation(false)»
    public «List_(IProductComponentLink("? extends " + IProductComponent()))» «getLinks()» {
	    «List_(IProductComponentLink("? extends " + IProductComponent()))» list = 
	    «IF hasSupertype()-»
        	super.«getLinks()»;
        «ELSE-»
			new «ArrayList(IProductComponentLink("? extends " + IProductComponent()))»();        	
        «ENDIF-»
    	«FOREACH associations AS this-»
	    	«IF oneToMany-»
	    		list.addAll(«methodNameGetLinksFor»());
	    	«ELSE-»
	    		if («methodNameGetLinksFor»() != null) {
	    			list.add(«methodNameGetLinksFor»());
	    		}
	    	«ENDIF-»
        «ENDFOREACH-»
	    «IF hasSupertype() -»
	        return list;
	    «ELSE-»
	        return list;
	    «ENDIF-»
    }
«ENDDEFINE»

«DEFINE doInitReferencesFromXmlPart FOR XProductAssociation-»
	   associationElements = elementsMap.get("«name»");
	    if (associationElements != null) {
			«IF oneToMany-»
			        this.«fieldName» = new «LinkedHashMap("String", IProductComponentLink(targetClassName))»(associationElements.size());
			        for (Element element : associationElements) {
			            «IProductComponentLink(targetClassName)» link = new «ProductComponentLink(targetClassName)»(this);
			            link.initFromXml(element);
			            this.«fieldName».put(link.getTargetId(), link);
	        }
			«ELSE-»
	            Element element = associationElements.get(0);
	            «fieldName» = new «ProductComponentLink(targetClassName)»(this);
	            «fieldName».initFromXml(element);
			«ENDIF-»
	    }
«ENDDEFINE»

«DEFINE writeReferencesToXmlPart FOR XProductAssociation-»
		«IF oneToMany-»
		    for («IProductComponentLink(targetClassName)» link : «fieldName».values()) {
		        element.appendChild(((«IXmlPersistenceSupport()»)link).«toXml("element.getOwnerDocument()")»);
		    }
		«ELSE-»
		    if («fieldName» != null) {
				element.appendChild(((«IXmlPersistenceSupport()»)«fieldName»).«toXml("element.getOwnerDocument()")»);
			}
		«ENDIF-»
«ENDDEFINE»

«REM»    
    
    TODO:	Qualified association
«ENDREM»

