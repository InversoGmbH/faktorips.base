«IMPORT org::faktorips::devtools::stdbuilder»
«IMPORT org::faktorips::devtools::core::builder::naming»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::template»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::policycmpt::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::productcmpt::model»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::template::MethodNames»
«EXTENSION org::faktorips::devtools::stdbuilder::xpand::template::CommonGeneratorExtensions»

«DEFINE main FOR XPolicyCmptClass»
	«FILE getFileName(BuilderAspect::IMPLEMENTATION)-»
package «packageName»;

«EXPAND CommonDefinitions::ImportBlock FOREACH context.imports ONFILECLOSE»
	
	/**
	 «IF generatingPublishedInterfaces-»
	 *	«localizedJDoc("CLASS", getSimpleName(BuilderAspect::INTERFACE))»
	 «ENDIF-»
	 * @generated
	 */
	 «getAnnotations(AnnotatedJavaElementType::POLICY_CMPT_IMPL_CLASS)-»
	public «abstract()» class «className» extends «superclassName-» «EXPAND CommonDefinitions::implementedInterfaces»{

		«FOREACH attributes AS this-»
			«IF !published-»
				«EXPAND PolicyCmptAttribute::constantForPropertyName-»
				«EXPAND PolicyCmptAttribute::constantForValueSet-»
			«ENDIF-»
		«ENDFOREACH-»
		
		«FOREACH attributes AS this-»
			«IF constant-»
				«EXPAND PolicyCmptAttribute::memberField-»
			«ENDIF-»
		«ENDFOREACH-»
		
		«EXPAND PropertyChangeSupport::fieldDefinition-»

		«FOREACH attributes AS this-»
			«IF !constant-»
				«EXPAND PolicyCmptAttribute::memberField-»
			«ENDIF-»
		«ENDFOREACH-»
		
		«EXPAND PolicyCmptAssociation::field FOREACH associations-»
		
		«EXPAND constructors-»
		
		«EXPAND getterForProductAttributes(this) FOREACH productAttributes-»
		
		«FOREACH attributes AS this-»
			«EXPAND PolicyCmptAttribute::allowedValuesMethod-»
			«EXPAND PolicyCmptAttribute::getter-»
			«EXPAND PolicyCmptAttribute::setter-»
		«ENDFOREACH-»

		«EXPAND PolicyCmptAssociation::methods FOREACH associations-»
		
		«EXPAND DerivedUnionAssociation::methodsForDerivedUnion(this) FOREACH subsettedDerivedUnions-»

		«EXPAND Methods::method FOREACH methods-»
		
		«EXPAND getterForTables(this) FOREACH productTables-»
		
		/**
	     * «localizedJDoc("METHOD_INITIALIZE")»
	     * 
	     * @restrainedmodifiable
	     */
	     «IF hasSupertype() || configured-»
		 	«overrideAnnotation(false)-»
		 «ENDIF-»
	    public void «initialize()» {
	    	«IF hasSupertype()-»
		        super.«initialize()»;
	        «ENDIF-»
	    	«IF !attributesToInitWithProductData.isEmpty-»
		        if («methodNameGetProductCmptGeneration»() == null) {
		            return;
		        }
		        «FOREACH attributesToInitWithProductData AS this-»
					«EXPAND PolicyCmptAttribute::initConfigurableAttribute-»
		        «ENDFOREACH-»
	        «ENDIF-»
	        «IF !configured-»
	        «REM» TODO Empty line to match old code generator«ENDREM»
	        «ENDIF-»
		    // begin-user-code
		    // end-user-code
	    }
		
		«EXPAND generalMethodsForConfiguredPolicyCmpts-»
		
		«EXPAND generateCodeForDependentObject»
		
		«EXPAND DerivedUnionAssociation::getParent(this) FOREACH detailToMasterDerivedUnionAssociations-»
	   
		«EXPAND PropertyChangeSupport::generalMethods-»
		
		«EXPAND generalMethods-»

		«EXPAND ValidationRule::validationRuleMethods FOREACH validationRules-»
		
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE constructors FOR XPolicyCmptClass-»
	/**
     * «localizedJDoc("CONSTRUCTOR", className)»
     * 
     * @generated
     */
    public «method(className)» {
        super();
        «EXPAND initializationForOverrideAttributes-»
    }
    «IF configured»
		/**
	     * «localizedJDoc("CONSTRUCTOR", className)»
	     * 
	     * @generated
	     */
	    public «method(className, productComponentClassOrInterfaceName, "productCmpt")» {
	        super(productCmpt);
	        «EXPAND initializationForOverrideAttributes-»
	    }
    «ENDIF»
«ENDDEFINE»

«DEFINE getterForProductAttributes(XPolicyCmptClass currentClass) FOR XProductAttribute-»
	 /**
     * «localizedJDoc("METHOD_GET_VALUE_IN_POLICY", name)»
     «IF description.length > 0-»
     * <p>
     * «description»
     «ENDIF-»
     * 
     * @generated
     */
    public «javaClassName» «method(methodNameGetter)» {
    	«IF changingOverTime-»
        	return «currentClass.methodNameGetProductCmptGeneration»().«methodNameGetter»();
        «ELSE-»
        	return «currentClass.methodNameGetProductComponent»().«methodNameGetter»();
        «ENDIF-»
    }
«ENDDEFINE»

«DEFINE getterForTables(XPolicyCmptClass policyClass) FOR XTableUsage-»
    /**
     * «localizedJDoc("METHOD_GET_TABLE_IN_POLICY", name)»
     * 
     * @generated
     */
    public «tableClassName» «method(methodNameGetter)» {
    	«policyClass.productGenerationClassName» productCmpt = («policyClass.productGenerationClassName»)«policyClass.methodNameGetProductCmptGeneration»();
        if (productCmpt == null) {
            return null;
        }
        return productCmpt.«methodNameGetter»();
    }
«ENDDEFINE»

«DEFINE initializationForOverrideAttributes FOR XPolicyCmptClass-»
	«FOREACH attributes AS this-»
		«IF generateDefaultInitialize-»
			«methodNameSetter»(«defaultValueCode»);
		«ENDIF-»
	«ENDFOREACH-»
«ENDDEFINE»

«DEFINE generalMethodsForConfiguredPolicyCmpts FOR XPolicyCmptClass-»
	«IF configured-»
		/**
		 * {@inheritDoc}
		 *
		 * @generated
		 */
		 «overrideAnnotationForPublishedMethod()»
		 public «productComponentClassOrInterfaceName» «methodNameGetProductComponent»() {
		 	return («productComponentClassOrInterfaceName») «getProductComponent()»;
		 }
		 
		/**
		 * {@inheritDoc}
		 *
		 * @generated
		 */
		 «overrideAnnotationForPublishedMethod()»
		 public «productGenerationClassOrInterfaceName» «methodNameGetProductCmptGeneration»() {
		 	return («productGenerationClassOrInterfaceName») «getProductCmptGeneration()»;
		 }
	
		/**
		 * {@inheritDoc}
		 *
		 * @generated
		 */
		 «overrideAnnotationForPublishedMethod()»
		 public void «methodNameSetProductComponent»(«productComponentClassOrInterfaceName» «productComponentArgumentName», boolean initPropertiesWithConfiguratedDefaults) {
	        «setProductComponent(productComponentArgumentName)»;
	        if (initPropertiesWithConfiguratedDefaults) {
	            «initialize()»;
	        }
		 }
		 
		 /**
		 * {@inheritDoc}
		 *
	     * @generated
	     */
		 «overrideAnnotation(false)»
	    public void «effectiveFromHasChanged()» {
	        super.«effectiveFromHasChanged()»;
	        «EXPAND PolicyCmptAssociation::delegateEffectiveFromHasChanged FOREACH associations-»
	    }
	    
	    «IF firstDependantTypeInHierarchy-»
			/**
			 * {@inheritDoc}
			 *
			 * @generated
			 */
			«overrideAnnotationForInterfaceOrNonAbstractSuperclassMethod()»
			public «Calendar()» «getEffectiveFromAsCalendar()» {
				«IModelObject()» parent = «getParentModelObject()»;
				if (parent instanceof «IConfigurableModelObject()») {
					return ((«IConfigurableModelObject()»)parent).«getEffectiveFromAsCalendar()»;
				}
				return null;
			}
		«ENDIF-»
		«REM»Old generator checks for aggregateRoot && configurable. configurable is unnecessary as configured has already been tested above.«ENDREM»
	    «IF aggregateRoot-»
			/**
			 * {@inheritDoc}
			 *
			 * @generated
			 */
			«overrideAnnotation(!hasSupertype())»
			public «Calendar()» «getEffectiveFromAsCalendar()» {
	   			«IF hasSupertype()-»
	   				return super.«getEffectiveFromAsCalendar()»;
				«ELSE-»
					return null; «localizedComment("METHOD_GET_EFFECTIVE_FROM_TODO_LINE1")»
					«localizedComment("METHOD_GET_EFFECTIVE_FROM_TODO_LINE2")»
					«localizedComment("METHOD_GET_EFFECTIVE_FROM_TODO_LINE3")»
				«ENDIF-»
			}
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE generateCodeForDependentObject FOR XPolicyCmptClass-»
	«IF generateGetParentModelObject-»
	    /**
	     * {@inheritDoc}
	     * 
	     * @generated
	     */
		 «overrideAnnotationForInterfaceOrNonAbstractSuperclassMethod()»
	    public «IModelObject()» «getParentModelObject()» {
	    	«FOREACH associations AS this-»
	    		«IF compositionDetailToMaster && !derived-»
			        if («fieldName» != null) {
			            return «fieldName»;
			        }
		        «ENDIF-»
	    	«ENDFOREACH-»
	        «IF hasSupertype() && superclass.generateGetParentModelObject-»
	        	return super.«getParentModelObject()»;
		 	«ELSE-»
	        	return null;
		 	«ENDIF-»
	    }
    «ENDIF-»
	
«ENDDEFINE»

«DEFINE generalMethods FOR XPolicyCmptClass-»
	«IF generateInitPropertiesFromXML-»
	    /**
	     * {@inheritDoc}
	     * 
	     * @generated
	     */
		 «overrideAnnotation(false)»
	    protected void «initPropertiesFromXml(Map("String", "String")+" propMap", IRuntimeRepository()+" productRepository")» {
	        super.«initPropertiesFromXml("propMap", "productRepository")»;
			«EXPAND PolicyCmptAttribute::initAttributeFromXML FOREACH attributes-»
	    }
    «ENDIF-»
    
    /**
     * {@inheritDoc}
     * 
     * @generated
     */
    «overrideAnnotation(false)»
    protected «AbstractModelObject()» «createChildFromXml(Element()+" childEl")» {
        «AbstractModelObject()» newChild = super.«createChildFromXml("childEl")»;
        if (newChild != null) {
            return newChild;
        }
        «EXPAND PolicyCmptAssociation::createTargetFromXML FOREACH associations-»
        return null;
    }
    
    «IF generateMethodCreateUnresolvedReference-»
	    /**
	     * {@inheritDoc}
	     * 
	     * @generated
	     */
	    «overrideAnnotation(false)»
	    protected «IUnresolvedReference()» «createUnresolvedReference("Object objectId, String targetRole, String targetId")»
	            throws Exception {
	        «EXPAND PolicyCmptAssociation::createUnresolvedReference FOREACH associations-»
	        return super.createUnresolvedReference(objectId, targetRole, targetId);
	    }
    «ENDIF-»

	«IF generateDeltaSupport-»
    	«EXPAND DeltaSupport::computeDeltaMethod-»
    «ENDIF-»

    «IF generateCopySupport-»
    	«EXPAND CopySupport::copyMethods-»
    «ENDIF-»
    
    «IF generateVisitorSupport-»
    	«EXPAND VisitorSupport::acceptMethod-»
    «ENDIF-»
    
    «EXPAND validateMethods-»
«ENDDEFINE»

«DEFINE validateMethods FOR XPolicyCmptClass-»
    /**
     * «localizedJDoc("VALIDATE_SELF", name)»
     * 
     * @generated
     */
    «overrideAnnotation(false)»
    public boolean «validateSelf(MessageList()+" ml", IValidationContext()+" context")» {
        if (!super.«validateSelf("ml", "context")») {
            return STOP_VALIDATION;
        }
        «EXPAND ValidationRule::validate FOREACH validationRules-»
        return CONTINUE_VALIDATION;
    }

    /**
     * «localizedJDoc("VALIDATE_DEPENDANTS", name)»
     * 
     * @generated
     */
    «overrideAnnotation(false)»
    public void «validateDependants(MessageList()+" ml", IValidationContext()+" context")» {
        super.«validateDependants("ml", "context")»;
        «EXPAND PolicyCmptAssociation::validateDependents FOREACH associations-»
    }
«ENDDEFINE»
