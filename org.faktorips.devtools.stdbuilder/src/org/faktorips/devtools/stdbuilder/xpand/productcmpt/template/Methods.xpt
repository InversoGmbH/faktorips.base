«IMPORT org::faktorips::devtools::stdbuilder»
«IMPORT java::util»
«IMPORT org::faktorips::devtools::core::builder::naming»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::productcmpt::model»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::template::CommonGeneratorExtensions»

«DEFINE formulaMethod FOR XMethod-»
    /** «inheritDocOrTextIf(genInterface(), description)»
    «IF formulaOptional && (!published || genInterface())-»
    «IF description.length > 0-»
     * <p>
    «ENDIF-»
     * «localizedJDoc("METHOD_GETFORMULAR")»
     * @see #«methodNameIsFormulaAvailable» 
     «ENDIF-»
     * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)»
     * @generated
     */
     «overrideAnnotationForPublishedMethodOrIf(!genInterface() && published, overrides)-»
    «getModifier(genInterface())» «javaClassName» «method(methodName, methodParameters)» throws «FormulaExecutionException()»
    «IF !isGenerateMethodBody(genInterface())»;«ELSE-»
    {
    	«IF formulaCompiling.compileToXml -»
	    	«IF formulaOptional-»
	    		if («methodNameIsFormulaAvailable»()) {
	    	«ENDIF-»
	        	return («notPrimitiveJavaClassName»)getFormulaEvaluator().evaluate("«methodName»" «FOREACH methodParameters AS parameter», «parameter.name»«ENDFOREACH»);
	    	«IF formulaOptional-»
	    		}
	    	«ENDIF-»
        «ENDIF-»
    	«IF formulaOptional-»
        	throw new «FormulaExecutionException()»(this, "«name»" «FOREACH methodParameters AS parameter», «parameter.name»«ENDFOREACH»);
        «ENDIF-» 
    }
    «ENDIF-»
    «IF overloadsFormula && !genInterface()»
    	«LET overloadedFormulaMethod AS overloaded-»
		    /**
		     * «inheritDoc()»
		     * 
		     * @generated
		     */
	    	@Override
		    «overloaded.getModifier(genInterface())» «overloaded.javaClassName» «overloaded.methodName»(«FOREACH overloadedFormulaMethod.parameters AS param SEPARATOR ", "»«param.javaClassName» «param.name»«ENDFOREACH») throws «FormulaExecutionException()» {
		        // TODO a delegation to the method «methodName»(«FOREACH parameters AS param SEPARATOR ", "»«param.javaClassName»«ENDFOREACH») needs to be implemented here
		        // And make sure to disable the regeneration of this method.
		        throw new RuntimeException("Not implemented yet.");
		    }
    	«ENDLET-»
    «ENDIF-»
    
    «IF formulaOptional && !overloadsFormula»
    	/**
    	«IF published && !genInterface()-»
        * «inheritDoc()»
    	«ELSE-»
     	* «localizedJDoc("METHOD_IS_FORMULAR_AVAILABLE")»
    	«ENDIF-»
    	* «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)»
    	* @generated
    	*/
    	«overrideAnnotationForPublishedMethodOrIf(!genInterface() && published, !genInterface() && overrides )-»
    	«getModifier(false)» boolean «method(methodNameIsFormulaAvailable)» 
	    «IF genInterface()»;«ELSE-»
	    {
	        return «isFormulaAvailable("\"" + formularName + "\"")»;
	    }
	    «ENDIF-»
    «ENDIF-»
«ENDDEFINE»

«DEFINE method FOR XMethod-»
    /**
    «IF published && !genInterface()-»
     * «inheritDoc()»
    «ELSEIF description.length > 0-»
     * «description»
    «ENDIF-»
	 * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)»
     * @generated
     */
     «overrideAnnotationForPublishedMethodOrIf(!genInterface() && published, overrides)-»
    «getModifier(genInterface())» «javaClassName» «method(methodName, methodParameters)» «IF abstract || genInterface()-»
    	;
    «ELSE-»
	    {
	        // TODO implement method!
	        «IF !returnVoid-»
	        	return «defaultReturnValue»;
	        «ENDIF-»
	    }
    «ENDIF-»
«ENDDEFINE»