«IMPORT  org::faktorips::devtools::stdbuilder::xpand::productcmpt::template»
«IMPORT java::util»
«IMPORT org::faktorips::devtools::core::builder::naming»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::template»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::productcmpt::model»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::template::CommonGeneratorExtensions»

«DEFINE field FOR XProductAssociation-»
	«IF !derivedUnion && !constrain-»
	    /**
	     * «localizedJDoc("FIELD_ASSOCIATION", getName(oneToMany).toFirstUpper())»
	     * 
	     * @generated
	     */
		«IF oneToMany-»
			private «Map("String", IProductComponentLink(targetInterfaceName))» «field(fieldName)»  = new «LinkedHashMap("String", IProductComponentLink(targetInterfaceName))»(0);
		«ELSE-»
			private «IProductComponentLink(targetInterfaceName)» «field(fieldName)» = null;
		«ENDIF-»
	«ENDIF»
«ENDDEFINE»

«DEFINE getterSetterAdder FOR XProductAssociation-»
	«IF !derivedUnion»
		«EXPAND getterProductCmpt»
		«EXPAND getterProductCmptGen»
		«EXPAND getterProductCmptPerIndex»
		«IF !genInterface()-»
			«EXPAND setterMethodForToOne»
			«EXPAND addMethod»
			«EXPAND addMethodWithCardinality»
		«ENDIF-»
		«EXPAND getterLinksFor»
		«EXPAND getterSingleLinkFor»
		«EXPAND getCardinalityFor»
		«EXPAND Association::getNumOf»
    «ENDIF»
	«EXPAND Association::abstractMethods»
«ENDDEFINE»

«DEFINE getterProductCmpt FOR XProductAssociation-»
    /**
     * «inheritDocOrJavaDocIf(genInterface(), getJavadocKey("METHOD_GET"), getName(oneToMany))»
     * 
     * @generated
     */
     «overrideAnnotationForPublishedMethodAndIf(!genInterface() || constrain)-»
   	«IF oneToMany-»
	    public «List_("? extends " +targetInterfaceName)» «method(methodNameGetter)»
	    «IF genInterface()»;«ELSE-»
	    {
	    	«IF constrain-»
	    		return «ListUtil()».«convert("super."+methodNameGetter+"()", targetInterfaceName+".class")»;
	    	«ELSE-»
        		«List_(targetInterfaceName)» result = new «ArrayList(targetInterfaceName)»(«fieldName».size());
				for («IProductComponentLink(targetInterfaceName)» «name.toFirstLower()» : «fieldName».values()) {
	            	result.add(«name.toFirstLower()».«getTarget()»);
    	    	}
        		return result;
        «ENDIF-»
	    }
	    «ENDIF-»
    «ELSE-»
	    public «targetInterfaceName» «method(methodNameGetter)»
	    «IF genInterface()»;«ELSE-»
	    {
	    	«IF constrain-»
	    		return («targetInterfaceName»)super.«methodNameGetter»();
	    	«ELSE»
				return «fieldName» != null ? «fieldName».«getTarget()» : null;
			«ENDIF-»
	    }
	    «ENDIF-»
    «ENDIF-»
«ENDDEFINE»

«DEFINE getterProductCmptGen FOR XProductAssociation-»
    /**
     * «inheritDocOrJavaDocIf(genInterface(), getJavadocKey("METHOD_GET_CMPT_GEN"), getName(oneToMany))»
     * 
     * @generated
     */
     «overrideAnnotationForPublishedMethodAndIf(!genInterface() || constrain)-»
   	«IF oneToMany-»
	    public «List_("? extends " +targetClassGenerationName)» «method(methodNameGetter, Calendar(), "effectiveDate")»
	    «IF genInterface()»;«ELSE-»
	    {
	    	«IF constrain-»
	    		return «ListUtil()».«convert("super."+methodNameGetter+"(effectiveDate)", targetClassGenerationName + ".class")»;
	    	«ELSE-»
        		«List_("? extends " +targetInterfaceName)» targets = «methodNameGetter»();
        		«List_(targetClassGenerationName)» result = new «ArrayList(targetClassGenerationName)»();
				for («targetInterfaceName» target : targets) {
					«targetClassGenerationName» gen = target.«methodNameGetTargetGeneration»(effectiveDate);
					if (gen != null) {
	                	result.add(gen);
	            	}
				}
        		return result;
        	«ENDIF-»
	    }
	    «ENDIF-»
    «ELSE-»
	    public «targetClassGenerationName» «method(methodNameGetter, Calendar(), "effectiveDate")»
	   	«IF genInterface()»;«ELSE-»
	    {
	    	«IF constrain-»
	    		return («targetClassGenerationName»)super.«methodNameGetter»(effectiveDate);
	    	«ELSE-»
				return «fieldName» != null ? «fieldName».«getTarget()».«methodNameGetTargetGeneration»(effectiveDate) : null;
			«ENDIF-»
    	}
    	«ENDIF-»
    «ENDIF-»
«ENDDEFINE»

«DEFINE getterProductCmptPerIndex FOR XProductAssociation-»
	«IF oneToMany-»
	    /**
	     * «inheritDocOrJavaDocIf(genInterface(), "METHOD_GET_CMPT_AT_INDEX", name)»
	     * 
	     * @generated
	     */
	     «overrideAnnotationForPublishedMethodAndIf(!genInterface() || constrain)-»
		public «targetInterfaceName» «method(methodNameGetSingle, "int", "index")»
	    «IF genInterface()»;«ELSE-»
		{
			«IF constrain-»
				return («targetInterfaceName»)super.«methodNameGetSingle»(index);
			«ELSE-»
				«Iterator(IProductComponentLink(targetInterfaceName))» it = «fieldName».values().iterator();
	        	try {
	            	for (int i = 0; i < index; i++) {
	                	it.next();
	            	}
	            	return it.next().«getTarget()»;
	        	} catch («NoSuchElementException()» e) {
	            	throw new IndexOutOfBoundsException(e.getLocalizedMessage());
	        	}
	        «ENDIF-»
		}
		«ENDIF-»
	«ENDIF»
«ENDDEFINE»

«DEFINE getterLinksFor FOR XProductAssociation-»
    /**
     * «inheritDocOrJavaDocIf(genInterface(), getJavadocKey("METHOD_GET_CMPT_LINK"), getName(oneToMany))»
     * 
     * @generated
     */
     «overrideAnnotationForPublishedMethodAndIf(!genInterface())-»
	«IF oneToMany-»
	    public «Collection_(IProductComponentLink(targetInterfaceName))» «method(methodNameGetLinksFor)»
	    «IF genInterface()»;«ELSE-»
	    {
    	    return «Collections()».unmodifiableCollection(«fieldName».values());
	    }
	    «ENDIF-»
    «ELSE-»
	    public «IProductComponentLink(targetInterfaceName)» «method(methodNameGetLinksFor)»
	    «IF genInterface()»;«ELSE-»
	    {
    		return «fieldName»;
    	}
    	«ENDIF-»
    «ENDIF-»
«ENDDEFINE»

«DEFINE getterSingleLinkFor FOR XProductAssociation-»
    /**
     * «inheritDocOrJavaDocIf(genInterface(), "METHOD_GET_CMPT_LINK_AT_INDEX", name)»
     * 
     * @generated
     */
     «overrideAnnotationForPublishedMethodAndIf(!genInterface())-»
    public «IProductComponentLink(targetInterfaceName)» «method(methodNameGetLinkFor, targetInterfaceName, "productComponent")»
    «IF genInterface()»;«ELSE-»
    {
		«IF oneToMany-»
        	return «fieldName».get(productComponent.getId());
        «ELSE-»
        	return «fieldName».«getTargetId()».equals(productComponent.getId()) ? «fieldName» : null;
        «ENDIF-»
    }
    «ENDIF-»
«ENDDEFINE»

«DEFINE addMethod FOR XProductAssociation-»
	«IF oneToMany-»
    /**
     * «localizedJDoc("METHOD_ADD_CMPT")»
     * 
     * @generated
     */
     «overrideAnnotationForPublishedMethodAndIf(constrain)»
    public void «method(methodNameSetOrAdd, targetInterfaceNameBase, "target")» {
        «IF constrain-»
        	«ObjectUtil()».«checkInstanceOf("target", targetInterfaceName)»;
        	super.«methodNameSetOrAdd»(target);
		«ELSE-»
			«EXPAND ProductCommons::checkRepositoryModifyable-»
	        this.«fieldName».put(target.getId(), new «ProductComponentLink(targetInterfaceName)»(this, target));
        «ENDIF-»
    }
    «ENDIF»
«ENDDEFINE»

«DEFINE addMethodWithCardinality FOR XProductAssociation-»
«REM» TODO FIPS-1141 «ENDREM» 
	«IF oneToMany-»
    /**
     * «localizedJDoc("METHOD_ADD_CMPT_WITH_CARDINALITY")»
     * 
     * @generated
     */
     «overrideAnnotationForPublishedMethodAndIf(constrain)»
    public void «method(methodNameSetOrAdd, targetInterfaceNameBase, "target", CardinalityRange(), "cardinality")» {
        «IF constrain-»
        	«ObjectUtil()».«checkInstanceOf("target", targetInterfaceName)»;
        	super.«methodNameSetOrAdd»(target, cardinality);
		«ELSE-»
			«EXPAND ProductCommons::checkRepositoryModifyable-»
	        this.«fieldName».put(target.getId(), new «ProductComponentLink(targetInterfaceName)»(this, target, cardinality));
	    «ENDIF-»
    }
    «ENDIF»
«ENDDEFINE»

«DEFINE setterMethodForToOne FOR XProductAssociation-»
	«IF !oneToMany-»
    /**
     * «localizedJDoc("METHOD_SET_CMPT", name)»
     * 
     * @generated
     */
     «overrideAnnotationForPublishedMethodAndIf(constrain)»
    public void «method(methodNameSetOrAdd, targetInterfaceNameBase, "target")» {
        «IF constrain-»
        	«ObjectUtil()».«checkInstanceOf("target", targetInterfaceName)»;
        	super.«methodNameSetOrAdd»((«targetInterfaceName»)target);
		«ELSE-»
			«EXPAND ProductCommons::checkRepositoryModifyable-»
	        «fieldName» = (target == null ? null : new «ProductComponentLink(targetInterfaceName)»(this, target));
	    «ENDIF-»
    }
	«ENDIF»
«ENDDEFINE»

«DEFINE getCardinalityFor FOR XProductAssociation-»
	«IF hasMatchingAssociation()-»
	    /**
	     * «inheritDocOrJavaDocIf(genInterface(), "METHOD_GET_CARDINALITY_FOR", nameOfMatchingAssociation)»
	     * 
	     * @generated
	     */
	    «overrideAnnotationForPublishedMethodAndIf(!genInterface())-»
	    public «CardinalityRange()» «method(methodNameGetCardinalityFor, targetInterfaceName, "productCmpt")»
	    «IF genInterface()»;«ELSE-»
	    {
	        if (productCmpt != null) {
	    	«IF oneToMany-»
	            return «fieldName».containsKey(productCmpt.«getId()») ? «fieldName».get(productCmpt.«getId()»)
	                    .«getCardinality()» : null;
	        «ELSE-»
	            return «fieldName» != null && «fieldName».«getTargetId()».equals(productCmpt.«getId()») ? «fieldName»
	                    .«getCardinality()» : null;
	        «ENDIF-»
	        }
	        return null;
	    }
	    «ENDIF-»
    «ENDIF»
«ENDDEFINE»

«DEFINE getLinkMethods FOR XProductClass»
	«EXPAND getLinkMethod»
	«EXPAND getLinksMethod»
«ENDDEFINE»

«DEFINE getLinkMethod FOR XProductClass-»
	    /**
	     * «inheritDoc()»
	     * 
	     * @generated
	     */
	    «overrideAnnotation(false)-»
	    public «IProductComponentLink("? extends " + IProductComponent())» «getLink("String linkName", IProductComponent() + " target")» {
	    	«FOREACH associations AS this-»
				«IF !derivedUnion-»
			        if ("«name»".equals(linkName)) {
			            return «methodNameGetLinkFor»((«targetInterfaceName»)target);
			        }
		        «ENDIF-»
		    «ENDFOREACH-»
		    «IF hasSupertype() -»
		        return super.«getLink("linkName", "target")»;
		    «ELSE-»
	   	        return null;
		    «ENDIF-»
	    }
«ENDDEFINE»

«DEFINE getLinksMethod FOR XProductClass»
    /**
     * «inheritDoc()»
     * 
     * @generated
     */
    «overrideAnnotation(false)-»
    public «List_(IProductComponentLink("? extends " + IProductComponent()))» «getLinks()» {
	    «List_(IProductComponentLink("? extends " + IProductComponent()))» list = 
	    «IF hasSupertype()-»
        	super.«getLinks()»;
        «ELSE-»
			new «ArrayList(IProductComponentLink("? extends " + IProductComponent()))»();        	
        «ENDIF-»
    	«FOREACH associations AS this-»
			«IF !derivedUnion-»
		    	«IF oneToMany-»
		    		list.addAll(«methodNameGetLinksFor»());
		    	«ELSE-»
		    		if («methodNameGetLinksFor»() != null) {
		    			list.add(«methodNameGetLinksFor»());
		    		}
		    	«ENDIF-»
		    «ENDIF-»
        «ENDFOREACH-»
        return list;
    }
«ENDDEFINE»

«DEFINE doInitReferencesFromXmlPart FOR XProductAssociation-»
	«IF !derivedUnion && !constrain-»
	   associationElements = elementsMap.get("«name»");
	    if (associationElements != null) {
			«IF oneToMany-»
			        this.«fieldName» = new «LinkedHashMap("String", IProductComponentLink(targetInterfaceName))»(associationElements.size());
			        for (Element element : associationElements) {
			            «IProductComponentLink(targetInterfaceName)» link = new «ProductComponentLink(targetInterfaceName)»(this);
			            link.initFromXml(element);
			            this.«fieldName».put(link.getTargetId(), link);
	        }
			«ELSE-»
	            Element element = associationElements.get(0);
	            «fieldName» = new «ProductComponentLink(targetInterfaceName)»(this);
	            «fieldName».initFromXml(element);
			«ENDIF-»
	    }
	«ENDIF-»
«ENDDEFINE»

«DEFINE writeReferencesToXmlPart FOR XProductAssociation-»
	«IF !derivedUnion && !constrain-»
		«IF oneToMany-»
		    for («IProductComponentLink(targetInterfaceName)» link : «fieldName».values()) {
		        element.appendChild(((«IXmlPersistenceSupport()»)link).«toXml("element.getOwnerDocument()")»);
		    }
		«ELSE-»
		    if («fieldName» != null) {
				element.appendChild(((«IXmlPersistenceSupport()»)«fieldName»).«toXml("element.getOwnerDocument()")»);
			}
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»
