«IMPORT org::faktorips::devtools::stdbuilder»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::template»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::policycmpt::model»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::policycmpt::template::PolicyCmptAssociationExtension»

«DEFINE constants FOR XPolicyAssociation-»
	«IF !compositionDetailToMaster && !derived && !constrain-»
	    /**
	     * «localizedJDoc("FIELD_MAX_CARDINALITY", name)»
	     * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)-»
	     * @generated
	     */
	    public static final «IntegerRange()» «field(constantNameMaxCardinalityFor)» = «IntegerRange()».valueOf(«minCardinality», «maxCardinality»);
	«ENDIF-»

	«IF !hasSuperAssociationWithSameName()-»
	    /**
	     * «localizedJDoc("FIELD_ASSOCIATION_NAME", fieldName)»
	     * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)-»
	     * @generated
	     */
	    public final static String «field(constantNamePropertyName)» = "«fieldName»";
    «ENDIF-»
«ENDDEFINE»

«DEFINE field FOR XPolicyAssociation-»
	«IF generateField-»
		«IF masterToDetail || typeAssociation-»
		    /**
		     * «localizedJDoc("FIELD_ASSOCIATION", name)»
		     * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)-»
		     * @generated
		     */
			«getAnnotations(AnnotatedJavaElementType::POLICY_CMPT_IMPL_CLASS_ASSOCIATION)-»
			«getAnnotations(AnnotatedJavaElementType::POLICY_CMPT_IMPL_CLASS_TRANSIENT_FIELD)-»
			«IF oneToMany-»
				private «List_(targetInterfaceName)» «field(fieldName)»  = new «ArrayList(targetInterfaceName)»();
			«ELSE-»
				private «targetClassName» «field(fieldName)» = null;
			«ENDIF-»
		«ELSEIF compositionDetailToMaster-»
			/**
			 * «localizedJDoc("FIELD_PARENT", targetClassName)»
			 *
			 * @generated	 
			 */
			«getAnnotations(AnnotatedJavaElementType::POLICY_CMPT_IMPL_CLASS_ASSOCIATION)-»
			«getAnnotations(AnnotatedJavaElementType::POLICY_CMPT_IMPL_CLASS_TRANSIENT_FIELD)-»
			private «targetClassName» «field(fieldName)»;
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»
	
«DEFINE methods FOR XPolicyAssociation-»
	«EXPAND Association::getNumOf-»
	«EXPAND contains-»
	«EXPAND getters-»
	«EXPAND setterOrAdder-»
	«EXPAND newChildMethods-»
	«EXPAND remove-»
	«EXPAND Association::abstractMethods»
«ENDDEFINE»

«DEFINE contains FOR XAssociation-»
	«IF oneToMany && !constrain-»
	    /**
	     * «inheritDocOrJavaDocIf(genInterface(), "METHOD_CONTAINS_OBJECT")»
	     * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)-»
	     * @generated
	     */
     	«overrideAnnotationForPublishedMethodAndIf(!genInterface())-»
	    public boolean «method(methodNameContains, targetInterfaceName, "objectToTest")»
	    «IF genInterface()-»;«ELSE-»
	    {
	    	«IF derivedUnion-»
		        return «methodNameGetter»().contains(objectToTest);
	    	«ELSE-»
		        return «fieldName».contains(objectToTest);
	    	«ENDIF-»
	    }
	    «ENDIF-»
    «ENDIF»
«ENDDEFINE»

«DEFINE getters FOR XPolicyAssociation-»
	«IF generateGetter-»
		«IF oneToMany-»
	    /**
	     * «inheritDocOrJavaDocIf(genInterface(), "METHOD_GET_MANY", getName(true))»
	     * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)-»
	     * @generated
	     */
	    «overrideAnnotationForPublishedMethodAndIf(!genInterface() || constrain)-»
	    public «List_("? extends " + targetInterfaceName)» «method(methodNameGetter)»
	    «IF genInterface()-»;«ELSE-»
	    	{
	    	«IF constrain-»
	    		return «ListUtil()».«convert("super." + methodNameGetter + "()", targetInterfaceName+".class")»;
	    	«ELSE-»
	        	return «Collections()».unmodifiableList(«fieldName»);
	    	«ENDIF-»
	    	}
	    «ENDIF»
		/**
	     * «inheritDocOrJavaDocIf(genInterface(), "METHOD_GET_REF_OBJECT_BY_INDEX", name)»
	     * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)-»
	     * @generated
         */
	    «overrideAnnotationForPublishedMethodAndIf(!genInterface() || constrain)-»
	    public «targetInterfaceName» «method(methodNameGetSingle, "int", "index")»
		 «IF genInterface()-»;«ELSE-»
		 	{
	    	«IF constrain-»
	    		return («targetInterfaceName»)super.«methodNameGetSingle»(index);
		    «ELSE-»
		    	return «fieldName».get(index);
		   	«ENDIF-»
		   	}
		 «ENDIF»
	    «ELSE-»
		    /**
		     * «inheritDocOrJavaDocIf(genInterface(), "METHOD_GET_ONE", name)»
		     * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)-»
		     * @generated
		     */
		    «overrideAnnotationForPublishedMethodAndIf(!genInterface() || constrain)-»
		    public «targetInterfaceName» «method(methodNameGetter)»
		    «IF genInterface()-»;«ELSE-»
		    	{
		    	«IF constrain-»
		    		return («targetInterfaceName»)super.«methodNameGetter»();
		    	«ELSE-»
			        return «fieldName»;
			    «ENDIF-»
			    }
		    «ENDIF»
	    «ENDIF-»
    «ENDIF»
    «IF generateQualifiedGetter»
	    /**
	     * «inheritDocOrJavaDocIf(genInterface(), "METHOD_GET_REF_OBJECT_BY_QUALIFIER", name)»
	     * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)-»
	     * @generated
	     */
	    «overrideAnnotationForPublishedMethodAndIf(!genInterface() || constrain)-»
	     «IF oneToManyIgnoringQualifier-»
		    public  «List_("? extends " +targetInterfaceName)» «method(methodNameGetSingle, targetProductCmptInterfaceNameBase, "qualifier")»
		    «IF genInterface()-»;«ELSE-»
			    {
		    	«IF constrain-»
		        	«ObjectUtil()».«checkInstanceOf("qualifier", targetProductCmptInterfaceName)»;
	    			return «ListUtil()».«convert("super." + methodNameGetSingle + "(qualifier)", targetInterfaceName+".class")»;
		    	«ELSE-»
			        if (qualifier == null) {
			            return null;
			        }
			        «IF derived-»
				        «List_(targetInterfaceName)» elements = «methodNameGetter»();
				        «List_(targetInterfaceName)» result = new  «ArrayList(targetInterfaceName)»();
				        for («targetInterfaceName» element : elements) {
				        	«LET targetPolicyCmptClass AS targetClass-»
				            if (element.«targetClass.methodNameGetProductCmpt»().equals(qualifier)) {
				                result.add(element);
				            }
				            «ENDLET-»
				        }
		«REM»FIPS-1142::remove this if-else«ENDREM»	        «ELSE-»
				        «List_(targetInterfaceName)» result = new  «ArrayList(targetInterfaceName)»();
			        for («targetInterfaceName» «targetClassName.toFirstLower()» : «fieldName») {
				        	«LET targetPolicyCmptClass AS targetClass-»
				            if («targetClassName.toFirstLower()».«targetClass.methodNameGetProductCmpt»().equals(qualifier)) {
				                result.add(«targetClassName.toFirstLower()»);
				            }
				            «ENDLET-»
				        }
			        «ENDIF-»
			        return result;
			    «ENDIF-»
			    }
		   	«ENDIF-»
		«ELSE-»
		    public  «targetInterfaceName» «method(methodNameGetSingle, targetProductCmptInterfaceNameBase, "qualifier")»
		     «IF genInterface()-»;«ELSE-»
		    {
		    	«IF constrain-»
		        	«ObjectUtil()».«checkInstanceOf("qualifier", targetProductCmptInterfaceName)»;
		    		return («targetInterfaceName»)super.«methodNameGetSingle»(qualifier);
		    	«ELSE-»
			        if (qualifier == null) {
			            return null;
			        }
			        «IF derived-»
				        «List_(targetInterfaceName)» elements = «methodNameGetter»();
				        for («targetInterfaceName» element : elements) {
				        	«LET targetPolicyCmptClass AS targetClass-»
				            if (element.«targetClass.methodNameGetProductCmpt»().equals(qualifier)) {
				                return element;
				            }
				            «ENDLET-»
				        }
		«REM»FIPS-1142::remove this if-else«ENDREM»	        «ELSE-»
				        for («targetInterfaceName» «targetClassName.toFirstLower()» : «fieldName») {
				        	«LET targetPolicyCmptClass AS targetClass-»
				            if («targetClassName.toFirstLower()».«targetClass.methodNameGetProductCmpt»().equals(qualifier)) {
				                return «targetClassName.toFirstLower()»;
				            }
				            «ENDLET-»
				        }
			        «ENDIF-»
			        return null;
				«ENDIF-»
		    }
		    «ENDIF-»
		«ENDIF-»
	«ENDIF»
«ENDDEFINE»

«DEFINE setterOrAdder FOR XPolicyAssociation-»
	«IF generateSetter-»
		«EXPAND generateSetter-»
	«ELSEIF generateAddAndRemoveMethod-»
		«EXPAND generateAdder-»
    «ENDIF-»
«ENDDEFINE»

«DEFINE generateSetter FOR XPolicyAssociation-»
	«IF compositionDetailToMaster-»
		«IF !sharedAssociationImplementedInSuperclass && !genInterface()-»
			/**
			 * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)-»
		     * @generated
		     */
		    «overrideAnnotationIf(constrain)-»
		    public void «method(methodNameSetOrAddInternal,targetInterfaceNameBase, "newParent")» {
		        «IF constrain-»
		        	«ObjectUtil()».«checkInstanceOf("newParent", targetInterfaceName)»;
		        	super.«methodNameSetOrAddInternal»(newParent);
				«ELSE-»
			        if («methodNameGetter»() == newParent) {
			            return;
			        }
			        «IModelObject()» «parentVar()» = «getParentModelObject()»;
			        if (newParent != null && «parentVar()» != null) {
			            throw new «IllegalStateException()»(«localizedText("RUNTIME_EXCEPTION_SET_PARENT_OBJECT_INTERNAL", typeName, name)»);
			        }
			        this.«fieldName» = «castToImplementation(targetClassName)» newParent;
			        «IF typeConfigurableByProductCmptType-»
			        	effectiveFromHasChanged();
					«ENDIF-»
				«ENDIF-»
		    }
		«ENDIF-»
	«ELSE-»
		«IF !constrain || !generateInternalSetterOrAdder-»
		    /**
	 	     * «inheritDocOrJavaDocIf(genInterface(), "METHOD_SET_OBJECT", name)»
		     * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)-»
		     * @generated
		     */
		    «overrideAnnotationForPublishedMethodAndIf(!genInterface() || constrain)-»
		    public void «method(methodNameSetOrAdd, targetInterfaceNameBase, "newObject")»
		     «IF genInterface()-»;«ELSE-»
		    {
		    	«IF generateChangeSupport-»
					«EXPAND PropertyChangeSupport::storeOldValue-»
			        «methodNameSetOrAddInternal»(newObject);
					«EXPAND PropertyChangeSupport::notify-»
				«ELSE-»
					«EXPAND setterMethodCode(methodNameSetOrAdd)-»
				«ENDIF-»
		    }
		    «ENDIF-»
		«ENDIF-»

    	«IF generateInternalSetterOrAdder && !genInterface()-»
		    /** «REM»TODO old codegenerator writes the comment only for compositions«ENDREM»
		     «IF !typeAssociation-» 
		     * «localizedJDoc("METHOD_SET_OBJECT_INTERNAL", name)»
		     * 
		     «ENDIF-»
		     * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)-»
		     * @generated
		     */
		     «overrideAnnotationIf(constrain)-»
		    public void «method(methodNameSetOrAddInternal, targetInterfaceNameBase, "newObject")»{
				«EXPAND setterMethodCode(methodNameSetOrAddInternal)-»
	    	}	
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE setterMethodCode(String methodName) FOR XPolicyAssociation-»
    «IF constrain-»
    	«ObjectUtil()».«checkInstanceOf("newObject", targetInterfaceName)»;
    	super.«methodName»(newObject);
	«ELSEIF masterToDetail-»
		«IF generateCodeToSynchronizeInverseCompositionForSet-»
	        if («fieldName» != null) {
	            «EXPAND synchronizeInverseCompositionIfNecessaryForSet(false, fieldName, "null")-»
	        }
	        if (newObject != null) {
	            «EXPAND synchronizeInverseCompositionIfNecessaryForSet(true, "newObject", "this")-»
	        }
        «ENDIF-»
        «fieldName» = «castToImplementation(targetClassName)» newObject;
    	«EXPAND synchronizeInverseAssociationIfNecessary(fieldName)-»
    «ELSEIF typeAssociation-»
    	if (newObject == «fieldName») {
    		return;
    	}
    	«IF hasInverseAssociation()-»
	        «targetInterfaceName» oldRefObject = «fieldName»;
	        «fieldName» = null;
	        «EXPAND cleanupOldReference("oldRefObject")-»
	    «ENDIF-»
        «fieldName» = «castToImplementation(targetClassName)» newObject;
    	«EXPAND synchronizeInverseAssociationIfNecessary(fieldName)-»
    «ENDIF-»
«ENDDEFINE»

«DEFINE generateAdder FOR XPolicyAssociation-»
	«IF !constrain || !generateInternalSetterOrAdder-»
		/**
	 	 * «inheritDocOrJavaDocIf(genInterface(), "METHOD_ADD_OBJECT", name)»
	     * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)-»
	     * @generated
	     */
	   	«overrideAnnotationForPublishedMethodAndIf(!genInterface() || constrain)-»
	    public void «method(methodNameSetOrAdd, targetInterfaceNameBase, "objectToAdd")»
	    «IF genInterface()-»;«ELSE-»
	    {
	    	«IF generateInternalSetterOrAdder-»
		        «methodNameSetOrAddInternal»(objectToAdd);
		        «EXPAND PropertyChangeSupport::notifyNewAssociation("objectToAdd")-»
		    «ELSE-»
		    	«EXPAND addMethodCode(methodNameSetOrAdd)»
		    «ENDIF-»
	    }
	    «ENDIF-»
	«ENDIF-»

	«IF generateInternalSetterOrAdder && !genInterface()-»
	    /**
	     * «localizedJDoc("METHOD_ADD_OBJECT_INTERNAL", name)»
	     * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)-»
	     * @generated
	     */
	     «overrideAnnotationIf(constrain)»
	    public void «method(methodNameSetOrAddInternal, targetInterfaceNameBase, "objectToAdd")»{
		    «EXPAND addMethodCode(methodNameSetOrAddInternal)-»
	    }
	«ENDIF»
«ENDDEFINE»

«DEFINE addMethodCode(String methodName) FOR XPolicyAssociation-»
    «IF constrain-»
    	«ObjectUtil()».«checkInstanceOf("objectToAdd", targetInterfaceName)»;
    	super.«methodName»(objectToAdd);
    «ELSE-»
        if (objectToAdd == null) {
            throw new NullPointerException("Can't add null to association «name» of " + this);
        }
        if («fieldName».contains(objectToAdd)) {
            return;
        }
        «EXPAND synchronizeInverseCompositionIfNecessaryForAdd-»
		«fieldName».add(objectToAdd);
        «EXPAND synchronizeInverseAssociationIfNecessary("objectToAdd")-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE addOrSetNewInstance FOR XPolicyAssociation-»
	«IF oneToMany-»
		«IF generateChangeSupport-»
       		«methodNameSetOrAddInternal»(«variableNameNewInstance»);
       	«ELSE-»
       		«methodNameSetOrAdd»(«variableNameNewInstance»);
       	«ENDIF-»
    «ELSE-»
		«IF generateChangeSupport || compositionDetailToMaster-»
	       	«methodNameSetOrAddInternal»(«variableNameNewInstance»);
	    «ELSE-»
	       	«methodNameSetOrAdd»(«variableNameNewInstance»);
	    «ENDIF-»
    «ENDIF-»
«ENDDEFINE»

«DEFINE synchronizeInverseCompositionIfNecessaryForSet(boolean cast, String varName, String newRef) FOR XPolicyAssociation-»
	«IF cast»«castToImplementation(targetClassName, varName)»«ELSE»«varName»«ENDIF».«inverseAssociation.methodNameSetOrAddInternal»(«newRef»);
«ENDDEFINE»

«DEFINE cleanupOldReference(String varToCleanUp) FOR XPolicyAssociation-»
	«IF !oneToMany-»
		if(«varToCleanUp» != null){
        	«EXPAND cleanupOldReferenceInner(varToCleanUp)-»
		}
    «ELSE-»
    	«EXPAND cleanupOldReferenceInner(varToCleanUp)-»
    «ENDIF-»
«ENDDEFINE»

«DEFINE cleanupOldReferenceInner(String varToCleanUp) FOR XPolicyAssociation-»
	«IF inverseAssociation.oneToMany-»
		«varToCleanUp».«inverseAssociation.methodNameRemove»(this);
    «ELSE-»
		«varToCleanUp».«inverseAssociation.methodNameSetOrAdd»(null);    	
    «ENDIF-»
«ENDDEFINE»

«DEFINE newChildMethods FOR XPolicyAssociation-»
	«IF generateNewChildMethods-»
	    /**
 	     * «inheritDocOrJavaDocIf(genInterface(), "METHOD_NEW_CHILD", targetName, name)»
	     * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)-»
	     * @generated
	     */
		«overrideAnnotationForPublishedMethodAndIf(!genInterface() || needOverrideForConstrainNewChildMethod)-»
	    public «targetInterfaceName» «method(methodNameNew)»
	    «IF genInterface()-»;«ELSE-»
	    {
	        «targetClassName» «variableNameNewInstance» = new «targetClassName»();
			«EXPAND initializeChildInstanceAndReturn-»
	    }
	    «ENDIF-»
	
		«IF generateNewChildWithArgumentsMethod-»
		    /**
 	     	 * «inheritDocOrJavaDocIf(genInterface(), "METHOD_NEW_CHILD_WITH_PRODUCTCMPT_ARG", targetName, getName(false), targetProductCmptVariableName)»
		     * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)-»
		     * @generated
		     */
			«overrideAnnotationForPublishedMethodAndIf(!genInterface() || needOverrideForConstrainNewChildMethod)-»
		    public «targetInterfaceName» «method(methodNameNew, targetProductCmptInterfaceNameBase, targetProductCmptVariableName)»
		     «IF genInterface()-»;«ELSE-»
		    {
		        if («targetProductCmptVariableName» == null) {
		            return «methodNameNew»();
		        }
		        «targetInterfaceName» «variableNameNewInstance» = «castFromTo(targetProductCmptInterfaceNameBase, targetProductCmptInterfaceName, targetProductCmptVariableName)».«methodNameCreatePolicyCmptForTargetProductCmpt»(); 
				«EXPAND initializeChildInstanceAndReturn-»
		    }
		    «ENDIF-»
	    «ENDIF-»
    «ENDIF-»
«ENDDEFINE»

«DEFINE initializeChildInstanceAndReturn FOR XPolicyAssociation-»
	«EXPAND addOrSetNewInstance-»
	«variableNameNewInstance».«initialize()»;
	«EXPAND PropertyChangeSupport::notifyNewAssociation(variableNameNewInstance)-»
	return «variableNameNewInstance»;
«ENDDEFINE»

«DEFINE synchronizeInverseCompositionIfNecessaryForAdd FOR XPolicyAssociation-»
	«IF generateCodeToSynchronizeInverseCompositionForAdd-»
		«castToImplementation(targetClassName, "objectToAdd")».«inverseAssociation.methodNameSetOrAddInternal»(this);
    «ENDIF-»
«ENDDEFINE»

«DEFINE synchronizeInverseAssociationIfNecessary(String objectToSynchronize) FOR XPolicyAssociation-»
	«IF generateCodeToSynchronizeInverseAssociation-»
		«IF inverseAssociation.oneToMany-»
			if («EXPAND varNameNullCheckIfNecessary(objectToSynchronize)» !«objectToSynchronize».«inverseAssociation.methodNameContains»(this)) {
				«objectToSynchronize».«inverseAssociation.methodNameSetOrAdd»(this);
			}
	    «ELSE-»
	    	if («EXPAND varNameNullCheckIfNecessary(objectToSynchronize)» «objectToSynchronize».«inverseAssociation.methodNameGetter»() != this) {
				«IF false-»
				«REM» 
					TODO unnötiger Cast und Fallunterscheidung!
					«EXPAND castIfNeccessary(objectToSynchronize)»
				«ENDREM»
				«ENDIF-»
				«IF oneToMany-»
					«castToImplementation(targetClassName, objectToSynchronize)».«inverseAssociation.methodNameSetOrAdd»(this);
				«ELSE-»
					«objectToSynchronize».«inverseAssociation.methodNameSetOrAdd»(this);
				«ENDIF-»
			}
	    «ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE varNameNullCheckIfNecessary(String varName) FOR XPolicyAssociation-»
	«IF !oneToMany-»
		«varName» !=null &&
	«ENDIF-»
«ENDDEFINE»

«DEFINE remove FOR XPolicyAssociation-»
	«IF generateAddAndRemoveMethod && !constrain-»
	    /**
	     * «inheritDocOrJavaDocIf(genInterface(), "METHOD_REMOVE_OBJECT", name)»
	     * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)-»
	     * @generated
	     */
		«overrideAnnotationForPublishedMethodAndIf(!genInterface())-»
	    public void «method(methodNameRemove, targetInterfaceName, "objectToRemove")»
	    «IF genInterface()-»;«ELSE-»
	    {
	        if (objectToRemove == null) {
	            return;
	        }
			«EXPAND removeAndDetach-»
	        «EXPAND PropertyChangeSupport::notifyRemovedAssociation("objectToRemove")-»
	    }
	    «ENDIF-»
    «ENDIF-»
«ENDDEFINE»

«DEFINE removeAndDetach FOR XPolicyAssociation-»
	«IF generateCodeToSynchronizeInverseCompositionForRemove-»
		if («fieldName».remove(objectToRemove)) {
			«EXPAND detachRemovedObject-»
		}
	«ELSE-»
		«fieldName».remove(objectToRemove);
	«ENDIF-»
«ENDDEFINE»

«REM» TODO FIPS-1141 (7): delete the «IF hasInverseAssociation()-» clause when fixed«ENDREM»
«DEFINE detachRemovedObject FOR XPolicyAssociation-»
	«IF hasInverseAssociation()-»
		«IF inverseAssociation.oneToMany-»
			objectToRemove.«inverseAssociation.methodNameRemove»(this);
		«ELSE-»
			«IF inverseAssociation.typeAssociation-»
				«castToImplementation(targetClassName, "objectToRemove")».«inverseAssociation.methodNameSetOrAdd»(null);
			«ELSE-»
				«castToImplementation(targetClassName, "objectToRemove")».«inverseAssociation.methodNameSetOrAddInternal»(null);
			«ENDIF-»
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE delegateEffectiveFromHasChanged FOR XPolicyAssociation-»
	«IF considerInEffectiveFromHasChanged-»
		«IF oneToMany-»
			for («Iterator(targetInterfaceName)» it = «fieldName».iterator(); it.hasNext();) {
	            «AbstractConfigurableModelObject()» child = «castToImplementation(AbstractConfigurableModelObject())»it.next();
	            child.effectiveFromHasChanged();
	        }
		«ELSE-»
			if («fieldName» != null) {
	            «castToImplementation(AbstractConfigurableModelObject(), fieldName)».effectiveFromHasChanged();
	        }
		«ENDIF-»				 
	«ENDIF-»
«ENDDEFINE»

«DEFINE validateDependents FOR XPolicyAssociation-»
	«IF considerInValidateDependents-»
        «IF oneToMany-»
	        if («methodNameGetNumOf»() > 0) {
	            for («targetInterfaceName» rel : «methodNameGetter»()) {
	                ml.add(rel.validate(context));
	            }
	        }
        «ELSE-»
        	if («fieldName» != null) {
	            ml.add(«fieldName».validate(context));
	        }
        «ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE createTargetFromXML FOR XPolicyAssociation-»
	«IF considerInCreateChildFromXML-»
        if ("«name»".equals(childEl.getNodeName())) {
            String className = childEl.getAttribute("class");
            if (className.length() > 0) {
                try {
                    «targetClassName» «createChildFromXMLLocalVarName» = («targetClassName»)Class.forName(className).newInstance();
                    «IF oneToMany-»
	                    «methodNameSetOrAdd»(«createChildFromXMLLocalVarName»);
                    «ELSE-»
	                    «methodNameSetOrAdd»(«createChildFromXMLLocalVarName»);                    	
                    «ENDIF-»
                    return «createChildFromXMLLocalVarName»;
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            }
            «IF abstractTarget-»
            	throw new RuntimeException(childEl.toString() + ": Attribute className is missing.");
            «ELSE-»
            	return «castToImplementation(AbstractModelObject())»«methodNameNew»();
            «ENDIF-»
        }
	«ENDIF-»
«ENDDEFINE»

«DEFINE createUnresolvedReference FOR XPolicyAssociation-»
	«IF considerInCreateCreateUnresolvedReference-»
		if ("«name»".equals(targetRole)) {
            return new «DefaultUnresolvedReference()»(this, objectId, "«IF oneToMany»«methodNameSetOrAdd»«ELSE»«methodNameSetOrAdd»«ENDIF-»",
                    «targetInterfaceName».class, targetId);
        }
	«ENDIF-»
«ENDDEFINE»

