«IMPORT org::faktorips::devtools::stdbuilder»
«IMPORT org::faktorips::devtools::core::builder::naming»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::productcmpt::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::productcmptbuilder::model»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::template::CommonGeneratorExtensions»
«EXTENSION org::faktorips::devtools::stdbuilder::xpand::policycmptbuilder::template::PolicyCmptCreateMethodNames»
«EXTENSION org::faktorips::devtools::stdbuilder::xpand::productcmptbuilder::template::ProductBuilderNames»

«REM» Methods to initialize a builder.
If no published interfaces are generated, with methods are static methods in the product classes. Else, they are in the factory class«ENDREM»
«DEFINE with(boolean static) FOR XProductBuilder-»
	/**
	* «localizedJDoc("METHOD_WITH_IDS_DEFAULT",productName)»
	«IF changingOverTime-»* «localizedJDoc("METHOD_WITH_IDS_DEFAULT_GEN")»«ENDIF-»
	*
	* @generated
	*/	
	public «IF static-»static«ENDIF-» «implClassName» «with()»(«InMemoryRuntimeRepository()» runtimeRepository, String id, String kindId,String versionId) {
		«productImplClassName» product = new «productImplClassName»(runtimeRepository, id, kindId, versionId);
		product.«setValidFrom("new " + DateTime() + "(1900,1,1)")»;
		runtimeRepository.«putProductComponent("product")»;
				
		«IF changingOverTime-»
			«REM»Create productGen and sets the date«ENDREM-»
			«prodGenImplClassName» generation = new «prodGenImplClassName»(product);
			generation.«setValidFrom("new " + DateTime() + "(1900,1,1)")»;
			runtimeRepository.«putProductCmptGeneration("generation")»;
			
			return new «implClassName»(product, runtimeRepository, generation);
		«ELSE-»
			return new «implClassName»(product, runtimeRepository);
		«ENDIF»
	}
	
	/**
	* «localizedJDoc("METHOD_WITH_IDS",productName)»
	«IF changingOverTime-»* «localizedJDoc("METHOD_WITH_IDS_DEFAULT_GEN")»«ENDIF-»
	*
	* @generated
	*/	
	public «IF static-»static«ENDIF-» «implClassName» «with()»(«InMemoryRuntimeRepository()» runtimeRepository, String id, String kindId, String versionId, «DateTime()» validFrom) {
		«productImplClassName» product = new «productImplClassName»(runtimeRepository,id,kindId,versionId);
		product.«setValidFrom("validFrom")»;
		runtimeRepository.«putProductComponent("product")»;
		
		«IF changingOverTime-»
			«prodGenImplClassName» generation = new «prodGenImplClassName»(product);
			generation.«setValidFrom("validFrom")»;
			runtimeRepository.«putProductCmptGeneration("generation")»;
			
			return new «implClassName»(product, runtimeRepository, generation);
		«ELSE-»
			return new «implClassName»(product, runtimeRepository);
		«ENDIF»
	}

	/**
	* «localizedJDoc("METHOD_WITH_PRODID", productImplClassName)»
	*
	* @generated
	*/
	public «IF static-»static«ENDIF-» «implClassName» «with()»(«InMemoryRuntimeRepository()» runtimeRepository, String prodCmptId) {
		«productImplClassName» product =  («productImplClassName») runtimeRepository.getProductComponent(prodCmptId);
		
		if(product == null){
			throw new «RuntimeException()»("«localizedText("EXCEPTION_NO_PRODCMPT_FOUND")»");
		}else{
			return «implClassName».«from("product", "runtimeRepository")»;
		}
	}
«ENDDEFINE»

«REM»Method to get a builder from a product«ENDREM»
«DEFINE builder FOR XProductBuilder-»
	/**
	* «localizedJDoc("METHOD_BUILDER", name)»
	*
	* @generated
	*/
	«overrideAnnotationForPublishedMethodImplementationOr(hasNonAbstractSupertype())-»
	public «implClassName» «builder()»() «IF genInterface()-»;
	«ELSE-»
		{
			return «implClassName».«from("this", "(" + InMemoryRuntimeRepository() + ") this.getRepository()")»;
		}
	«ENDIF»
«ENDDEFINE»