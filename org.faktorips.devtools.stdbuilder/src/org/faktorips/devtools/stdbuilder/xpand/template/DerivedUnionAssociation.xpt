«IMPORT java::util»
«IMPORT org::faktorips::devtools::core::builder::naming»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::productcmpt::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::policycmpt::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::policycmpt::template»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::template::CommonGeneratorExtensions»

«DEFINE methodsForDerivedUnion(XClass currentContextClass) FOR XDerivedUnionAssociation-»
	«EXPAND getter(currentContextClass, methodNameGetter)»
	«EXPAND getterNumOf(currentContextClass)»
	«EXPAND getterNumOfInternal(currentContextClass)»
«ENDDEFINE»

«DEFINE methodsForDerivedUnionPolicy(XPolicyCmptClass currentContextClass) FOR XDerivedUnionAssociation-»
	«EXPAND getterNumOf(currentContextClass)»
	«EXPAND getter(currentContextClass, methodNameGetter)»
	«EXPAND getterNumOfInternal(currentContextClass)»
«ENDDEFINE»

«DEFINE getter(XClass currentContextClass, String methodName) FOR XDerivedUnionAssociation-»
    /**
     * {@inheritDoc}
     * 
     * @generated
     */
     «overrideAnnotationForPublishedMethod()-»
     public «List_(targetInterfaceName)» «methodName»() {
     	«List_(targetInterfaceName)» result = new «ArrayList(targetInterfaceName)»(«methodNameGetNumOfInternal»());
     	«IF isImplementedInSuperclass(currentContextClass)-»
     		result.addAll(super.«methodNameGetter»());
     	«ENDIF-»
     	«FOREACH (Set[XAssociation])getSubsetAssociations(currentContextClass) AS subsetAssociation-»
 			«IF subsetAssociation.oneToMany-»
     			result.addAll(«subsetAssociation.methodNameGetter»());
     		«ELSE-»
     			result.add(«subsetAssociation.methodNameGetter»());
     		«ENDIF-»
     	«ENDFOREACH-»
     	return result;
     }
«ENDDEFINE»

«DEFINE getterNumOf(XClass currentContextClass) FOR XDerivedUnionAssociation-»
    /**
     * {@inheritDoc}
     * 
     * @generated
     */
     «overrideAnnotationForPublishedMethod()-»
     public int «methodNameGetNumOf»() {
     	return «methodNameGetNumOfInternal»();
     }
«ENDDEFINE»

«DEFINE getterNumOfInternal(XClass currentContextClass) FOR XDerivedUnionAssociation-»
    /**
     * @generated
     */
     private int «methodNameGetNumOfInternal»() {
        int num = 0;
        «IF generateGetNumOfInternalSuperCall(currentContextClass)-»
     		num += super.«methodNameGetNumOf»();
        «ENDIF-»
        «IF isPolicyCmptClass(currentContextClass)-»
        	«REM»Force empty line, imitate old generator«ENDREM»
        «ENDIF-»
     	«FOREACH (Set[XAssociation])getSubsetAssociations(currentContextClass) AS subsetAssociation-»
     		num += «subsetAssociation.methodNameGetNumOf»();
     	«ENDFOREACH-»
        return num;
     }
«ENDDEFINE»

		«REM» wird in PolicyCmptAssociation.xpt behandelt
«DEFINE methodDerivedUnionContains(XClass currentContextClass) FOR XDerivedUnionAssociation-»
	«IF isDefinedIn(currentContextClass)-»
		«EXPAND PolicyCmptAssociation::contains»
	«ENDIF-»
«ENDDEFINE»
		«ENDREM»

«DEFINE getParent(XPolicyCmptClass currentContextClass) FOR XDetailToMasterDerivedUnionAssociation-»
	/**
     * {@inheritDoc}
     * 
     * @generated
     */
    «overrideAnnotationForPublishedMethodOrIf(isImplementedInSuperclass(currentContextClass))-» 
    public «targetInterfaceName» «methodNameGetter»() {
     	«FOREACH (Set[XPolicyAssociation])getDetailToMasterSubsetAssociations(currentContextClass) AS this-»
		    if («fieldName» != null) {
		        return «fieldName»;
		    }
     	«ENDFOREACH-»
    	«IF isImplementedInSuperclass(currentContextClass)-»
    		 return super.«methodNameGetter»();
    	«ELSE-» 
    		 return null;
    	«ENDIF-» 
    }
«ENDDEFINE»

