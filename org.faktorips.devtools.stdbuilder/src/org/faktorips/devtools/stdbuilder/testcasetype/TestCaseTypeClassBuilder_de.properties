# 
# Locale dependent generated Java sourcecode documentation in German.
#

# JavaDoc
CLASS_DESCRIPTION_JAVADOC=Instanzen dieser Klasse sind fachliche Testfaelle. Das Testen der fachlichen Logik findet in der Methode executeAsserts() statt. Die Daten fuer die Testfaelle werden von FaktorIPS-Testfaellen geliefert, die auf dem Testfalltyp basieren, auf dessen Basis auch diese Klasse generiert wird.  
CLASS_DESCRIPTION_ANNOTATION=generated

CONSTRUCTOR_JAVADOC=Erzeugt eine neue Instanz des Testfalls.
INITINPUTFROMXML_JAVADOC=Initialisiert die Eingabewerte aus dem XML.
INITEXPECTEDRESULTFROMXML_JAVADOC=Initialisiert die erwarteten Werte aus dem XML.
EXECUTEBUSINESSLOGIC_JAVADOC=Fuehrt die zu testende Geschaeftslogik aus.
EXECUTEASSERTS_JAVADOC=Fuehrt die Pruefungen (Asserts) aus, d.h. vergleicht die erwarteten Werten mit den tatsaechlichen Ergebnissen.
EXECUTEBUSINESSLOGIC_TODO=: Hier die durchzufuehrende Geschaeftslogik einfuegen\n\r// Wenn Sie zum Beispiel einen Testparameter vertrag definiert haben und die Klasse Vertrag eine Methode berechneBeitrag hat,\n\r// koennen Sie diese hier mit inputVertrag.berechneBeitrag() aufrufen.
ASSERT_TODO=: Hier muessen die durchzufuehrenden Pruefungen implementiert werden\n\r// Dies geschieht analog zu JUnit mit Aufrufen von assert(..) Methoden.\n\r// Zum Beispiel assert(erwartetVertrag.getBeitrag(), inputVertrag.getBeitrag(result);
RUNTIME_EXCEPTION_NO_ASSERTS=Keine Pruefungen vorhanden. Diese muessen in der Java-Klasse, die den Testfalltyp repraesentiert, implementiert werden.
INPUT_PREFIX=input
EXPECTED_RESULT_PREFIX=erwartet
RULE_VIOLATED_PREFIX=Verletzte
RULE_NOT_VIOLATED_PREFIX=NichtVerletzte
VIOLATED_CONSTANT_NAME=VERLETZT
NOT_VIOLATED_CONSTANT_NAME=NICHT_VERLETZT
ASSERT_RULE_METHOD_JAVADOC=Fuehrt die Asserts der Rule aus.
ASSERT_FAIL_VIOLATION_EXPECTED=Fehlende Regelverletzung: 
ASSERT_FAIL_NO_VIOLATION_EXPECTED=Regelverletzung nicht erwartet: 
