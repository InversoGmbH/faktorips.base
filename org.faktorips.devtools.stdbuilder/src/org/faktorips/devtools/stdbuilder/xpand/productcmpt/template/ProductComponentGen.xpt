«IMPORT org::faktorips::devtools::core::builder::naming»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::template»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::productcmpt::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::policycmpt::model»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::template::CommonGeneratorExtensions»

«DEFINE main FOR XProductCmptGenerationClass-»
	«FILE getFileName(BuilderAspect::IMPLEMENTATION) -»
	package «packageName»;

		«EXPAND CommonDefinitions::ImportBlock FOREACH imported() ONFILECLOSE»
		«EXPAND CommonDefinitions::ImportBlock FOREACH context.imports ONFILECLOSE»
	
		/**
		 * «localizedJDoc("CLASS", getSimpleName(BuilderAspect::INTERFACE))»
		 * @generated
		 */
		public «abstract()» class «getSimpleName(BuilderAspect::IMPLEMENTATION)» extends «superclassName-» «EXPAND CommonDefinitions::implementedInterfaces-»
		 {
		 
		 	«FOREACH attributes AS this-»
		 		«IF !generatingPublishedInterfaces || !published -»
			 		«EXPAND ProductAttribute::constantForPropertyName-»
			 	«ENDIF-»
		 	«ENDFOREACH-»
		 
			«EXPAND ProductAssociation::field FOREACH associations-»

			«EXPAND ProductAttribute::memberField FOREACH attributes-»
			
		    /**
		     * «localizedJDoc("CONSTRUCTOR", getSimpleName(BuilderAspect::IMPLEMENTATION))»
		     * 
		     * @generated
		     */
			public «method(getSimpleName(BuilderAspect::IMPLEMENTATION), getProductCmptClassName(BuilderAspect::IMPLEMENTATION), "productCmpt")» {
				super(productCmpt);
			}
			
			«EXPAND ProductAssociation::getterSetterAdder FOREACH  associations»
			
			«EXPAND DerivedUnionAssociation::methodsForDerivedUnion(this) FOREACH  derivedUnionAssociations»

«REM» GET PRODUCT COMPONENT METHOD «ENDREM»			
		    /**
		     * {@inheritDoc}
		     * 
		     * @generated
		     */
		    «overrideAnnotationForPublishedMethod()-»
			«REM» TODO FIPS-1059 «ENDREM»
		    public «getProductCmptClassName(BuilderAspect::INTERFACE)» «method(methodNameGetProductCmpt)» {
		        return («getProductCmptClassName(BuilderAspect::INTERFACE)»)«getProductComponent()»;
		    }

«REM» TODO Implementierung «ENDREM»
		    /**
		     * {@inheritDoc}
		     * 
		     * @generated
		     */
		    «overrideAnnotation(false)-»
		    protected void «doInitPropertiesFromXml(Map("String", Element()) + " configMap")» {
		        super.«doInitPropertiesFromXml("configMap")»;
		    }
			
«IF associations.size > 0»
		    /**
		     * @generated
		     */
		    «overrideAnnotation(false)-»
		    protected void «doInitReferencesFromXml(Map("String", List_(Element())) + " elementsMap")» {
		        super.«doInitReferencesFromXml("elementsMap")»;
		        «List_(Element())» «EXPAND ProductAssociation::doInitReferencesFromXmlPart FOREACH associations-»
		    }
«ENDIF»

«REM» TODO Implementierung «ENDREM»
		    /**
		     * {@inheritDoc}
		     * 
		     * @generated
		     */
		    «overrideAnnotation(false)-»
		    protected void «writePropertiesToXml(Element() + " element")» {
		    	«IF hasSupertype()-»
		        	super.«writePropertiesToXml("element")»;
		        «ELSE-»
 «REM» TODO translate «ENDREM»     	// Do not call super. See overridden method for clarification. 
		        «ENDIF-»
		    }
		   
		«IF associations.size > 0»
		    /**
		     * @generated
		     */
		    «overrideAnnotation(false)-»
		    protected void «writeReferencesToXml(Element() + " element")» {
		        super.«writeReferencesToXml("element")»;
		        «EXPAND ProductAssociation::writeReferencesToXmlPart FOREACH associations-»
		    }
		«ENDIF»

		«EXPAND createPolicyCmpt(this) FOREACH policyTypeClassHierarchy»

		«IF configurationForPolicyCmptType»
			«LET policyCmptClass AS policyCmptClass»
				«IF !policyCmptClass.abstract»
			    /**
			     * {@inheritDoc}
			     * 
			     * @generated
			     */
			    «overrideAnnotation(false)-»
			    public «IConfigurableModelObject()» «createPolicyComponent()» {
			        return «policyCmptClass.methodNameCreatePolicyCmpt»();
			    }
			    «ENDIF»
		    «ENDLET»
		«ENDIF»

		«EXPAND ProductAssociation::getLinkMethods»
		
	}
	«ENDFILE»
«ENDDEFINE»

«REM» The content of the method is always the same (use currentType). The methodName is derived from different types «ENDREM»
«DEFINE createPolicyCmpt(XProductCmptGenerationClass currentType) FOR XPolicyCmptClass»
	«IF !abstract»
    /**
     * {@inheritDoc}
     * 
     * @generated
     */
    «	(currentType != this)-»
    public «publishedInterfaceName» «method(methodNameCreatePolicyCmpt)» {
        «currentType.policyImplClassName» policy = new «currentType.policyImplClassName»(«currentType.methodNameGetProductCmpt»());
        policy.«setProductCmptGeneration("this")»;
        policy.«initialize()»;
        return policy;
    }
    «ENDIF»
«ENDDEFINE»
