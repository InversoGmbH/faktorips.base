«IMPORT java::util»
«IMPORT org::faktorips::devtools::core::builder::naming»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::productcmpt::model»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::policycmpt::template::PolicyCmptExtension»

«DEFINE field FOR XProductAssociation»
	«IF !derived»
	    /**
	     * «localizedJDoc("FIELD_ASSOCIATION", getName(onetoMany))»
	     * 
	     * @generated
	     */
		«IF onetoMany»
			private «Map()»<String, «IProductComponentLink()»<«targetClassName»>> «memberVarName»  = new «LinkedHashMap()»<String, «IProductComponentLink()»<«targetClassName»>>(0);
		«ELSE»
			private «IProductComponentLink()»<«targetClassName»> «name.toFirstLower()» = null;
		«ENDIF»
	«ENDIF»
	
«ENDDEFINE»

«DEFINE getterSetterAdder FOR XProductAssociation-»
	«IF !derived»
		«EXPAND getterProductCmpt»
		«EXPAND getterProductCmptGen»
		«EXPAND getterProductCmptPerIndex»
		«EXPAND getterLinksFor»
		«EXPAND getterSingleLinkFor»
		«EXPAND addMethod»
		«EXPAND addMethodWithCardinality»
		«EXPAND setterMethodForToOne»
		«EXPAND getCardinalityFor»
		«EXPAND getNumOf»
    «ENDIF»
«ENDDEFINE»

«DEFINE getterProductCmpt FOR XProductAssociation-»
    /**
     * {@inheritDoc}
     * 
     * @generated
     */
     «overrideAnnotation(true)»
   	«IF onetoMany-»
	    public «List_()»<«targetClassName»> «getterMethodName»() {
        	«List_()»<«targetClassName»> result = new «ArrayList()»<«targetClassName»>(«memberVarName».size());
			for («IProductComponentLink()»<«targetClassName»> «name.toFirstLower()» : «memberVarName».values()) {
	            result.add(«name.toFirstLower()».«getTarget()»);
    	    }
        	return result;
    «ELSE-»
	    public «targetClassName» «getterMethodName»() {
			return «memberVarName» != null ? «memberVarName».«getTarget()» : null;
    «ENDIF-»
    }
«ENDDEFINE»

«DEFINE getterProductCmptGen FOR XProductAssociation-»
    /**
     * {@inheritDoc}
     * 
     * @generated
     */
     «overrideAnnotation(true)»
   	«IF onetoMany-»
	    public «List_()»<«targetClassGenerationName»> «getterMethodName»(«Calendar()» effectiveDate) {
        	«List_()»<«targetClassName»> targets = «getterMethodName»();
        	«List_()»<«targetClassGenerationName»> result = new «ArrayList()»<«targetClassGenerationName»>();
			for («targetClassName» target : targets) {
				«targetClassGenerationName» gen = target.«getterNameForTargetGeneration»(effectiveDate);
				if (gen != null) {
	                result.add(gen);
            }
        }
        return result;
    «ELSE-»
	    public «targetClassGenerationName» «getterMethodName»(«Calendar()» effectiveDate) {
			return «memberVarName» != null ? «memberVarName».«getTarget()».«getterNameForTargetGeneration»(effectiveDate) : null;
    «ENDIF-»
    }
«ENDDEFINE»

«DEFINE getterProductCmptPerIndex FOR XProductAssociation-»
	«IF onetoMany-»
    /**
     * {@inheritDoc}
     * 
     * @generated
     */
     «overrideAnnotation(true)»
	public «targetClassName» «getGetterMethodName(false)»(int index) {
		«Iterator()»<«IProductComponentLink()»<«targetClassName»>> it = «memberVarName».values().iterator();
        try {
            for (int i = 0; i < index; i++) {
                it.next();
            }
            return it.next().«getTarget()»;
        } catch («NoSuchElementException()» e) {
            throw new IndexOutOfBoundsException(e.getLocalizedMessage());
        }
	}
	«ENDIF»
«ENDDEFINE»

«DEFINE getterLinksFor FOR XProductAssociation-»
    /**
     * {@inheritDoc}
     * 
     * @generated
     */
     «overrideAnnotation(true)»
	«IF onetoMany-»
	    public «Collection_()»<«IProductComponentLink()»<«targetClassName»>> «getterMethodNameForLinks»() {
    	    return «Collections()».unmodifiableCollection(«memberVarName».values());
    «ELSE-»
	    public «IProductComponentLink()»<«targetClassName»> «getterMethodNameForLinks»() {
    		return «memberVarName»;
	«ENDIF-»
    }
«ENDDEFINE»

«DEFINE getterSingleLinkFor FOR XProductAssociation-»
    /**
     * {@inheritDoc}
     * 
     * @generated
     */
     «overrideAnnotation(true)»
    public «IProductComponentLink()»<«targetClassName»> «getterMethodNameForSingleLink»(«targetClassName» productComponent) {
		«IF onetoMany-»
        	return «memberVarName».get(productComponent.getId());
        «ELSE-»
        	return «memberVarName».«getTargetId()».equals(productComponent.getId()) ? «memberVarName» : null;
        «ENDIF-»
    }
«ENDDEFINE»

«DEFINE addMethod FOR XProductAssociation-»
	«IF onetoMany-»
    /**
     * «localizedJDoc("METHOD_ADD_RELATED_CMPT")»
     * 
     * @generated
     */
    public void «addMethodName»(«targetClassName» target) {
        «EXPAND ProductCommons::checkRepositoryModifyable-»
        this.«memberVarName».put(target.getId(), new «ProductComponentLink()»<«targetClassName»>(this, target));
    }
    «ENDIF»
«ENDDEFINE»

«DEFINE addMethodWithCardinality FOR XProductAssociation-»
«REM» TODO FIPS-1141 «ENDREM» 
	«IF onetoMany-»
    /**
     * «localizedJDoc("METHOD_ADD_RELATED_CMPT_WITH_CARDINALITY")»
     * 
     * @generated
     */
    public void «addMethodName»(«targetClassName» target, «CardinalityRange()» cardinality) {
        «EXPAND ProductCommons::checkRepositoryModifyable-»
        this.«memberVarName».put(target.getId(), new «ProductComponentLink()»<«targetClassName»>(this, target, cardinality));
    }
    «ENDIF»
«ENDDEFINE»

«DEFINE setterMethodForToOne FOR XProductAssociation-»
	«IF !onetoMany-»
    /**
     * «localizedJDoc("METHOD_SET_1_RELATED_CMPT", name)»
     * 
     * @generated
     */
    public void «setterMethodName»(«targetClassName» target) {
        «EXPAND ProductCommons::checkRepositoryModifyable-»
        «memberVarName» = (target == null ? null : new «ProductComponentLink()»<«targetClassName»>(this, target));
    }
	«ENDIF»
«ENDDEFINE»

«DEFINE getCardinalityFor FOR XProductAssociation-»
	«IF hasMatchingAssociation()-»
    /**
     * {@inheritDoc}
     * 
     * @generated
     */
    «overrideAnnotation(true)»
    public «CardinalityRange()» «getterMethodCardinalityFor»(«targetClassName» productCmpt) {
        if (productCmpt != null) {
    	«IF onetoMany-»
            return «memberVarName».containsKey(productCmpt.«getId()») ? «memberVarName».get(productCmpt.«getId()»)
                    .«getCardinality()» : null;
        «ELSE-»
            return «memberVarName» != null && «memberVarName».«getTargetId()».equals(productCmpt.«getId()») ? «memberVarName»
                    .«getCardinality()» : null;
        «ENDIF-»
        }
        return null;
    }
    «ENDIF»
«ENDDEFINE»

«DEFINE getNumOf FOR XProductAssociation-»
	«IF onetoMany-»
    /**
     * {@inheritDoc}
     * 
     * @generated
     */
    «overrideAnnotation(true)»
    public int «getterMethodNameNumOf»() {
        return «memberVarName».size();
    }
    «ENDIF»
«ENDDEFINE»

«REM»
    
    
    TODO:	set for toOne
    		Qualified association
    		Derived Union?
    		getLinks()
«ENDREM»

