/*******************************************************************************
 * Copyright (c) 2005-2011 Faktor Zehn AG und andere.
 * 
 * Alle Rechte vorbehalten.
 * 
 * Dieses Programm und alle mitgelieferten Sachen (Dokumentationen, Beispiele, Konfigurationen,
 * etc.) duerfen nur unter den Bedingungen der Faktor-Zehn-Community Lizenzvereinbarung - Version
 * 0.1 (vor Gruendung Community) genutzt werden, die Bestandteil der Auslieferung ist und auch unter
 * http://www.faktorzehn.org/fips:lizenz eingesehen werden kann.
 * 
 * Mitwirkende: Faktor Zehn AG - initial API and implementation - http://www.faktorzehn.de
 *******************************************************************************/

package org.faktorips.devtools.stdbuilder.refactor;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.jdt.core.IType;
import org.faktorips.datatype.Datatype;
import org.faktorips.devtools.core.model.bf.IBusinessFunction;
import org.faktorips.devtools.core.model.enums.IEnumLiteralNameAttributeValue;
import org.faktorips.devtools.core.model.enums.IEnumType;
import org.faktorips.devtools.core.model.pctype.IPolicyCmptType;
import org.faktorips.devtools.core.model.pctype.IPolicyCmptTypeAttribute;
import org.faktorips.devtools.core.model.productcmpttype.IProductCmptType;
import org.faktorips.devtools.core.model.productcmpttype.IProductCmptTypeAttribute;
import org.faktorips.devtools.core.model.tablestructure.ITableStructure;
import org.faktorips.devtools.core.model.testcasetype.ITestCaseType;
import org.faktorips.devtools.core.model.valueset.ValueSetType;
import org.faktorips.devtools.stdbuilder.ProjectConfigurationUtil;
import org.faktorips.runtime.IValidationContext;
import org.faktorips.util.StringUtil;
import org.junit.Test;

/**
 * Tests the various Faktor-IPS "Rename" refactorings with regard to the generated Java source code.
 * 
 * @author Alexander Weickmann
 */
public class RenameRefactoringParticipantTest extends RefactoringParticipantTest {

    @Test
    public void testRenamePolicyCmptTypeAttribute() throws CoreException {
        IPolicyCmptTypeAttribute policyCmptTypeAttribute = createPolicyCmptTypeAttribute("policyAttribute", "Policy",
                "Product");

        IPolicyCmptType policyCmptType = policyCmptTypeAttribute.getPolicyCmptType();
        IProductCmptType productCmptType = policyCmptType.findProductCmptType(ipsProject);
        saveIpsSrcFile(policyCmptType);
        saveIpsSrcFile(productCmptType);
        performFullBuild(ipsProject);

        performRenameRefactoring(policyCmptTypeAttribute, "test");

        IType policyInterface = getJavaType("", "I" + "Policy", true, false);
        IType policyClass = getJavaType("", "Policy", false, false);
        IType productGenInterface = getJavaType("", "I" + "Product" + "Gen", true, false);
        IType productGenClass = getJavaType("", "Product" + "Gen", false, false);
        expectationsForRenamePolicyCmptTypeAttribute(policyInterface, policyClass, productGenInterface,
                productGenClass, "policyAttribute", "test", "QMoney;");
    }

    /**
     * Tests that the Java elements generated by the original attribute are renamed when renaming an
     * {@link IPolicyCmptTypeAttribute} that overwrites another attribute of the super type
     * hierarchy.
     */
    @Test
    public void testRenameOverwritingPolicyCmptTypeAttribute() throws CoreException {
        IPolicyCmptType superPolicyCmptType = newPolicyAndProductCmptType(ipsProject, "SuperPolicy", "SuperProduct");
        IPolicyCmptType policyCmptType = newPolicyAndProductCmptType(ipsProject, "Policy", "Product");
        policyCmptType.setSupertype(superPolicyCmptType.getQualifiedName());

        IPolicyCmptTypeAttribute superPolicyCmptTypeAttribute = createPolicyCmptTypeAttribute("policyAttribute",
                superPolicyCmptType);
        IPolicyCmptTypeAttribute policyCmptTypeAttribute = createPolicyCmptTypeAttribute(
                superPolicyCmptTypeAttribute.getName(), policyCmptType);
        policyCmptTypeAttribute.setOverwrite(true);

        saveIpsSrcFile(superPolicyCmptType);
        saveIpsSrcFile(superPolicyCmptType.findProductCmptType(ipsProject));
        saveIpsSrcFile(policyCmptType);
        saveIpsSrcFile(policyCmptType.findProductCmptType(ipsProject));
        performFullBuild(ipsProject);

        performRenameRefactoring(policyCmptTypeAttribute, "test");

        IType superPolicyInterface = getJavaType("", "I" + "SuperPolicy", true, false);
        IType superPolicyClass = getJavaType("", "SuperPolicy", false, false);
        IType superProductGenInterface = getJavaType("", "I" + "SuperProduct" + "Gen", true, false);
        IType superProductGenClass = getJavaType("", "SuperProduct" + "Gen", false, false);
        expectationsForRenamePolicyCmptTypeAttribute(superPolicyInterface, superPolicyClass, superProductGenInterface,
                superProductGenClass, "policyAttribute", "test", "QMoney;");
    }

    private void expectationsForRenamePolicyCmptTypeAttribute(IType javaInterface,
            IType javaClass,
            IType javaProductGenInterface,
            IType javaProductGenClass,
            String oldName,
            String newName,
            String dataTypeSignature) {

        String oldNameCamelCase = StringUtil.toCamelCase(oldName, true);
        String newNameCamelCase = StringUtil.toCamelCase(newName, true);

        assertFalse(javaInterface.getField("PROPERTY_" + oldName.toUpperCase()).exists());
        assertFalse(javaInterface.getMethod("get" + oldNameCamelCase, new String[] {}).exists());
        assertFalse(javaInterface.getMethod("set" + oldNameCamelCase, new String[] { dataTypeSignature }).exists());
        assertFalse(javaProductGenInterface.getMethod("getDefaultValue" + oldNameCamelCase, new String[] {}).exists());
        assertFalse(javaProductGenInterface.getMethod("getSetOfAllowedValuesFor" + oldNameCamelCase,
                new String[] { "Q" + IValidationContext.class.getSimpleName() + ";" }).exists());

        assertFalse(javaClass.getField(oldName).exists());
        assertFalse(javaClass.getMethod("get" + oldNameCamelCase, new String[] {}).exists());
        assertFalse(javaClass.getMethod("set" + oldNameCamelCase, new String[] { dataTypeSignature }).exists());
        assertFalse(javaProductGenClass.getField("defaultValue" + oldNameCamelCase).exists());
        assertFalse(javaProductGenClass.getField("setOfAllowedValues" + oldNameCamelCase).exists());
        assertFalse(javaProductGenClass.getMethod("getDefaultValue" + oldNameCamelCase, new String[] {}).exists());
        assertFalse(javaProductGenClass.getMethod("getSetOfAllowedValuesFor" + oldNameCamelCase,
                new String[] { "Q" + IValidationContext.class.getSimpleName() + ";" }).exists());

        assertTrue(javaInterface.getField("PROPERTY_" + newName.toUpperCase()).exists());
        assertTrue(javaInterface.getMethod("get" + newNameCamelCase, new String[] {}).exists());
        assertTrue(javaInterface.getMethod("set" + newNameCamelCase, new String[] { dataTypeSignature }).exists());
        assertTrue(javaProductGenInterface.getMethod("getDefaultValue" + newNameCamelCase, new String[] {}).exists());
        assertTrue(javaProductGenInterface.getMethod("getSetOfAllowedValuesFor" + newNameCamelCase,
                new String[] { "Q" + IValidationContext.class.getSimpleName() + ";" }).exists());

        assertTrue(javaClass.getField(newName).exists());
        assertTrue(javaClass.getMethod("get" + newNameCamelCase, new String[] {}).exists());
        assertTrue(javaClass.getMethod("set" + newNameCamelCase, new String[] { dataTypeSignature }).exists());
        assertTrue(javaProductGenClass.getField("defaultValue" + newNameCamelCase).exists());
        assertTrue(javaProductGenClass.getField("setOfAllowedValues" + newNameCamelCase).exists());
        assertTrue(javaProductGenClass.getMethod("getDefaultValue" + newNameCamelCase, new String[] {}).exists());
        assertTrue(javaProductGenClass.getMethod("getSetOfAllowedValuesFor" + newNameCamelCase,
                new String[] { "Q" + IValidationContext.class.getSimpleName() + ";" }).exists());
    }

    @Test
    public void testRenamePolicyCmptTypeAttributeValueSetEnum() throws CoreException {
        IPolicyCmptTypeAttribute policyCmptTypeAttribute = createPolicyCmptTypeAttribute("policyAttribute", "Policy",
                "Product");
        policyCmptTypeAttribute.setValueSetType(ValueSetType.ENUM);

        IPolicyCmptType policyCmptType = policyCmptTypeAttribute.getPolicyCmptType();
        IProductCmptType productCmptType = policyCmptType.findProductCmptType(ipsProject);
        saveIpsSrcFile(policyCmptType);
        saveIpsSrcFile(productCmptType);
        performFullBuild(ipsProject);

        performRenameRefactoring(policyCmptTypeAttribute, "test");

        IType productGenInterface = getJavaType("", "I" + "Product" + "Gen", true, false);
        IType productGenClass = getJavaType("", "Product" + "Gen", false, false);
        assertFalse(productGenInterface.getMethod("getAllowedValuesForPolicyAttribute",
                new String[] { "Q" + IValidationContext.class.getSimpleName() + ";" }).exists());
        assertFalse(productGenClass.getField("allowedValuesForPolicyAttribute").exists());
        assertFalse(productGenClass.getMethod("getAllowedValuesForPolicyAttribute",
                new String[] { "Q" + IValidationContext.class.getSimpleName() + ";" }).exists());
        assertTrue(productGenInterface.getMethod("getAllowedValuesForTest",
                new String[] { "Q" + IValidationContext.class.getSimpleName() + ";" }).exists());
        assertTrue(productGenClass.getField("allowedValuesForTest").exists());
        assertTrue(productGenClass.getMethod("getAllowedValuesForTest",
                new String[] { "Q" + IValidationContext.class.getSimpleName() + ";" }).exists());
    }

    @Test
    public void testRenamePolicyCmptTypeAttributeValueSetRange() throws CoreException {
        IPolicyCmptTypeAttribute policyCmptTypeAttribute = createPolicyCmptTypeAttribute("policyAttribute", "Policy",
                "Product");
        policyCmptTypeAttribute.setValueSetType(ValueSetType.RANGE);

        IPolicyCmptType policyCmptType = policyCmptTypeAttribute.getPolicyCmptType();
        IProductCmptType productCmptType = policyCmptType.findProductCmptType(ipsProject);
        saveIpsSrcFile(policyCmptType);
        saveIpsSrcFile(productCmptType);
        performFullBuild(ipsProject);

        performRenameRefactoring(policyCmptTypeAttribute, "test");

        IType productGenInterface = getJavaType("", "I" + "Product" + "Gen", true, false);
        IType productGenClass = getJavaType("", "Product" + "Gen", false, false);
        assertFalse(productGenInterface.getMethod("getRangeForPolicyAttribute",
                new String[] { "Q" + IValidationContext.class.getSimpleName() + ";" }).exists());
        assertFalse(productGenClass.getField("rangeForPolicyAttribute").exists());
        assertFalse(productGenClass.getMethod("getRangeForPolicyAttribute",
                new String[] { "Q" + IValidationContext.class.getSimpleName() + ";" }).exists());
        assertTrue(productGenInterface.getMethod("getRangeForTest",
                new String[] { "Q" + IValidationContext.class.getSimpleName() + ";" }).exists());
        assertTrue(productGenClass.getField("rangeForTest").exists());
        assertTrue(productGenClass.getMethod("getRangeForTest",
                new String[] { "Q" + IValidationContext.class.getSimpleName() + ";" }).exists());
    }

    @Test
    public void testRenameProductCmptTypeAttribute() throws CoreException {
        IProductCmptTypeAttribute productCmptTypeAttribute = createProductCmptTypeAttribute("productAttribute",
                "Product", "Policy");

        IProductCmptType productCmptType = productCmptTypeAttribute.getProductCmptType();
        IPolicyCmptType policyCmptType = productCmptType.findPolicyCmptType(ipsProject);
        saveIpsSrcFile(policyCmptType);
        saveIpsSrcFile(productCmptType);
        performFullBuild(ipsProject);

        performRenameRefactoring(productCmptTypeAttribute, "test");

        IType productGenInterface = getJavaType("", "I" + "Product" + "Gen", true, false);
        IType productGenClass = getJavaType("", "Product" + "Gen", false, false);
        IType policyClass = getJavaType("", "Policy", false, false);
        assertFalse(productGenInterface.getMethod("getProductAttribute", new String[] {}).exists());
        assertFalse(productGenClass.getField("productAttribute").exists());
        assertFalse(productGenClass.getMethod("getProductAttribute", new String[] {}).exists());
        assertFalse(productGenClass.getMethod("setProductAttribute", new String[] { "QString;" }).exists());
        assertFalse(policyClass.getMethod("getProductAttribute", new String[] {}).exists());
        assertTrue(productGenInterface.getMethod("getTest", new String[] {}).exists());
        assertTrue(productGenClass.getField("test").exists());
        assertTrue(productGenClass.getMethod("getTest", new String[0]).exists());
        assertTrue(productGenClass.getMethod("setTest", new String[] { "QString;" }).exists());
        assertTrue(policyClass.getMethod("getTest", new String[0]).exists());
    }

    @Test
    public void testRenameEnumAttributeAbstractJava5Enums() throws CoreException {
        ProjectConfigurationUtil.setUpUseJava5Enums(ipsProject, true);
        IEnumType enumType = createEnumType("EnumType", null, "id", "name");
        enumType.setAbstract(true);

        saveIpsSrcFile(enumType);
        performFullBuild(ipsProject);

        performRenameRefactoring(enumType.getEnumAttribute("id"), "test");

        IType enumJavaType = getJavaType("", "EnumType", true, false);
        assertFalse(enumJavaType.getMethod("getId", new String[0]).exists());
        assertTrue(enumJavaType.getMethod("getTest", new String[0]).exists());
    }

    @Test
    public void testRenameEnumAttributeAbstract() throws CoreException {
        ProjectConfigurationUtil.setUpUseJava5Enums(ipsProject, false);
        IEnumType enumType = createEnumType("EnumType", null, "id", "name");
        enumType.setAbstract(true);

        saveIpsSrcFile(enumType);
        performFullBuild(ipsProject);

        performRenameRefactoring(enumType.getEnumAttribute("id"), "test");

        IType enumJavaType = getJavaType("", "EnumType", true, false);
        assertFalse(enumJavaType.getField("id").exists());
        assertFalse(enumJavaType.getMethod("getId", new String[0]).exists());
        assertTrue(enumJavaType.getField("test").exists());
        assertTrue(enumJavaType.getMethod("getTest", new String[0]).exists());
    }

    /**
     * Assures that Java elements referring to Java elements in the type hierarchy of an enum are
     * properly renamed.
     */
    @Test
    public void testRenameEnumAttributeHierarchy() throws CoreException {
        ProjectConfigurationUtil.setUpUseJava5Enums(ipsProject, false);
        // Create the hierarchy
        IEnumType superEnumType = createEnumType("SuperEnumType", null, "id", "name");
        superEnumType.setAbstract(true);
        IEnumType midEnumType = createEnumType("MidEnumType", superEnumType, "id", "name");
        midEnumType.setAbstract(true);
        IEnumType subEnumType = createEnumType("SubEnumType", midEnumType, "id", "name");
        subEnumType.newEnumLiteralNameAttribute();

        saveIpsSrcFile(superEnumType);
        saveIpsSrcFile(midEnumType);
        saveIpsSrcFile(subEnumType);
        performFullBuild(ipsProject);

        performRenameRefactoring(superEnumType.getEnumAttribute("id"), "test");

        IType subJavaType = getJavaType("", "SubEnumType", true, false);
        assertFalse(subJavaType.getMethod("getValueById",
                new String[] { "Q" + Datatype.STRING.getQualifiedName() + ";" }).exists());
        assertFalse(subJavaType.getMethod("isValueById",
                new String[] { "Q" + Datatype.STRING.getQualifiedName() + ";" }).exists());
        assertTrue(subJavaType.getMethod("getValueByTest",
                new String[] { "Q" + Datatype.STRING.getQualifiedName() + ";" }).exists());
        assertTrue(subJavaType.getMethod("isValueByTest",
                new String[] { "Q" + Datatype.STRING.getQualifiedName() + ";" }).exists());
    }

    @Test
    public void testRenamePolicyCmptType() throws CoreException {
        IPolicyCmptType policyCmptType = newPolicyAndProductCmptType(ipsProject, "Policy", "Product");
        IProductCmptType productCmptType = policyCmptType.findProductCmptType(ipsProject);

        saveIpsSrcFile(policyCmptType);
        saveIpsSrcFile(productCmptType);
        performFullBuild(ipsProject);

        performRenameRefactoring(policyCmptType, "RenamedPolicy");

        checkJavaSourceFilesPolicyCmptType("", "Policy", "", "RenamedPolicy");
        IType productInterface = getJavaType("", "I" + "Product", true, false);
        IType productClass = getJavaType("", "Product", false, false);
        assertFalse(productClass.getMethod("createPolicy", new String[] {}).exists());
        assertFalse(productInterface.getMethod("createPolicy", new String[] {}).exists());
        assertTrue(productClass.getMethod("createRenamedPolicy", new String[] {}).exists());
        assertTrue(productInterface.getMethod("createRenamedPolicy", new String[] {}).exists());
    }

    @Test
    public void testRenameProductCmptType() throws CoreException {
        IPolicyCmptType policyCmptType = newPolicyAndProductCmptType(ipsProject, "Policy", "Product");
        IProductCmptType productCmptType = policyCmptType.findProductCmptType(ipsProject);

        saveIpsSrcFile(policyCmptType);
        saveIpsSrcFile(productCmptType);
        performFullBuild(ipsProject);

        performRenameRefactoring(productCmptType, "RenamedProduct");

        checkJavaSourceFilesProductCmptType("", "Product", "", "RenamedProduct");
        IType policyClass = getJavaType("", "Policy", false, false);
        assertFalse(policyClass.getMethod("getProduct", new String[0]).exists());
        assertFalse(policyClass.getMethod("getProductGen", new String[0]).exists());
        assertFalse(policyClass.getMethod("setProduct", new String[] { "IProduct", "Z" }).exists());
        assertTrue(policyClass.getMethod("getRenamedProduct", new String[0]).exists());
        assertTrue(policyClass.getMethod("getRenamedProductGen", new String[0]).exists());
        assertTrue(policyClass.getMethod("setRenamedProduct", new String[] { "QIRenamedProduct;", "Z" }).exists());
    }

    @Test
    public void testRenameEnumLiteralNameAttributeValue() throws CoreException {
        ProjectConfigurationUtil.setUpUseJava5Enums(ipsProject, false);
        performTestRenameEnumLiteralNameAttributeValue();
    }

    @Test
    public void testRenameEnumLiteralNameAttributeValueJava5Enums() throws CoreException {
        ProjectConfigurationUtil.setUpUseJava5Enums(ipsProject, true);
        performTestRenameEnumLiteralNameAttributeValue();
    }

    private void performTestRenameEnumLiteralNameAttributeValue() throws CoreException {
        IEnumType enumType = createEnumType("EnumType", null, "id", "name", "name", "0", "foo", "FOO");
        IEnumLiteralNameAttributeValue enumLiteralNameAttributeValue = enumType.getEnumValues().get(0)
                .getEnumLiteralNameAttributeValue();

        saveIpsSrcFile(enumType);
        performFullBuild(ipsProject);

        performRenameRefactoring(enumLiteralNameAttributeValue, "bar");

        IType javaEnum = getJavaType("", "EnumType", true, false);
        assertFalse(javaEnum.getField("FOO").exists());
        assertTrue(javaEnum.getField("bar").exists());
    }

    @Test
    public void testRenameEnumType() throws CoreException {
        IEnumType enumType = createEnumType("EnumType", null, "id", "name");
        enumType.setContainingValues(false);
        enumType.setEnumContentName("EnumContent");

        saveIpsSrcFile(enumType);
        performFullBuild(ipsProject);

        performRenameRefactoring(enumType, "RenamedEnumType");

        checkJavaSourceFilesEnumType("", "EnumType", "", "RenamedEnumType");
    }

    @Test
    public void testRenameTableStructure() throws CoreException {
        ITableStructure tableStructure = createTableStructure("TableStructure");

        saveIpsSrcFile(tableStructure);
        performFullBuild(ipsProject);

        performRenameRefactoring(tableStructure, "RenamedTableStructure");

        checkJavaSourceFilesTableStructure("", "TableStructure", "", "RenamedTableStructure");
    }

    @Test
    public void testRenameTestCaseType() throws CoreException {
        ITestCaseType testCaseType = createTestCaseType("TestCaseType");

        saveIpsSrcFile(testCaseType);
        performFullBuild(ipsProject);

        performRenameRefactoring(testCaseType, "RenamedTestCaseType");

        checkJavaSourceFilesTestCaseType("", "TestCaseType", "", "RenamedTestCaseType");
    }

    @Test
    public void testRenameBusinessFunction() throws CoreException {
        IBusinessFunction businessFunction = createBusinessFunction("BusinessFunction");

        saveIpsSrcFile(businessFunction);
        performFullBuild(ipsProject);

        performRenameRefactoring(businessFunction, "RenamedBusinessFunction");

        checkJavaSourceFilesBusinessFunction("", "BusinessFunction", "", "RenamedBusinessFunction");
    }

    @Test
    public void testRenameOnlyLetterCaseChanged() throws CoreException {
        IPolicyCmptType policyCmptType = newPolicyCmptTypeWithoutProductCmptType(ipsProject, "PolicyCmptType");

        saveIpsSrcFile(policyCmptType);
        performFullBuild(ipsProject);

        performRenameRefactoring(policyCmptType, "policyCmptType");

        assertTrue(getJavaType("", "I" + "PolicyCmptType", true, false).exists());
        assertTrue(getJavaType("", "PolicyCmptType", false, false).exists());
    }

}
