«IMPORT org::faktorips::devtools::core::builder::naming»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::template»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::policycmpt::model»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::template::MethodNames»
«EXTENSION org::faktorips::devtools::stdbuilder::xpand::template::CommonGeneratorExtensions»

«DEFINE main FOR XPolicyCmptClass»
	«FILE getFileName(BuilderAspect::IMPLEMENTATION)-»
	package «packageName»;

		«EXPAND CommonDefinitions::ImportBlock FOREACH modelContext.imports ONFILECLOSE»
	
		/**
		 «IF generatingPublishedInterfaces-»* Implementation of «getSimpleName(BuilderAspect::INTERFACE)».«ENDIF»
		 * @generated
		 */
		public «EXPAND potentialAbstract» class «getSimpleName(BuilderAspect::IMPLEMENTATION)» extends «superclassName-» «EXPAND implementedInterfaces-»
		{

		«FOREACH attributes AS this-»
			«IF !published-»
				«EXPAND PolicyCmptAttribute::fieldProperties»
			«ENDIF-»
		«ENDFOREACH-»
		
		«FOREACH attributes AS this-»
			«IF constant-»
				«EXPAND PolicyCmptAttribute::memberField»
			«ENDIF-»
		«ENDFOREACH-»
		
		«EXPAND PropertyChangeSupport::fieldDefinition»

		«FOREACH attributes AS this-»
			«IF !constant-»
				«EXPAND PolicyCmptAttribute::memberField»
			«ENDIF-»
		«ENDFOREACH-»
			
		«EXPAND constructors»

		«FOREACH attributes AS this-»
			«IF productRelevant-»
				«EXPAND PolicyCmptAttribute::allowedValuesMethod»
			«ENDIF-»
			«IF generateSetter-»
				«EXPAND PolicyCmptAttribute::setter»
			«ENDIF-»
			«IF generateGetter-»
				«EXPAND PolicyCmptAttribute::getter»
			«ENDIF-»
		«ENDFOREACH-»

		«IF configured-»
			«EXPAND generalMethodsForConfiguredPolicyCmpts»
	    «ENDIF-»
	   
		«EXPAND PropertyChangeSupport::generalMethods»
		
		«EXPAND generalMethods»

		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE implementedInterfaces FOR XPolicyCmptClass-»
	«IF implementsInterface-»
 implements «FOREACH implementedInterfaces AS interface SEPARATOR ","»«interface»«ENDFOREACH-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE potentialAbstract FOR XPolicyCmptClass-»
	«IF abstract» abstract «ENDIF-»
«ENDDEFINE»



«DEFINE constructors FOR XPolicyCmptClass-»
	/**
     * Creates a new «getSimpleName(BuilderAspect::IMPLEMENTATION)».
     * 
     * @generated
     */
    public «getSimpleName(BuilderAspect::IMPLEMENTATION)»() {
        super();
        «EXPAND initializationForOverrideAttributes-»
    }
    «IF configured»
	/**
     * Creates a new «getSimpleName(BuilderAspect::IMPLEMENTATION)».
     * 
     * @generated
     */
    public «getSimpleName(BuilderAspect::IMPLEMENTATION)»(«productComponentClassOrInterfaceName» productCmpt) {
        super(productCmpt);
        «EXPAND initializationForOverrideAttributes-»
    }
    «ENDIF»
«ENDDEFINE»


«DEFINE initializationForOverrideAttributes FOR XPolicyCmptClass-»
	«FOREACH attributes AS this-»
		«IF generateDefaultInitialize-»
			«setterMethodName»(«defaultValueCode»);
		«ENDIF-»
	«ENDFOREACH-»
«ENDDEFINE»

«DEFINE generalMethodsForConfiguredPolicyCmpts FOR XPolicyCmptClass-»
		
    /**
     * Initializes the object with the configured defaults.
     * 
     * @restrainedmodifiable
     */
	 «overrideAnnotation(false)»
    public void «initialize()» {
        if («productGenerationGetterName»() == null) {
            return;
        }
        «FOREACH attributes AS this-»
			«EXPAND PolicyCmptAttribute::initConfigurableAttribute-»
        «ENDFOREACH-»
        // begin-user-code
        // end-user-code
    }
	 
	/**
	 * @generated
	 */
	 «overrideAnnotation(false)»
	 public «productComponentClassOrInterfaceName» «productComponentGetterName»() {
	 	return («productComponentClassOrInterfaceName») «getProductComponent()»;
	 }
	 
	/**
	 * @generated
	 */
	 «overrideAnnotation(false)»
	 public «productGenerationClassOrInterfaceName» «productGenerationGetterName»() {
	 	return («productGenerationClassOrInterfaceName») «getProductCmptGeneration()»;
	 }

	/**
	 * @generated
	 */
	 «overrideAnnotation(false)»
	 public void «productComponentSetterName»(«productComponentClassOrInterfaceName» «productComponentArgumentName», boolean initPropertiesWithConfiguratedDefaults) {
        «setProductComponent(productComponentArgumentName)»;
        if (initPropertiesWithConfiguratedDefaults) {
            «initialize()»;
        }
	 }
	 /**
     * @generated
     */
	 «overrideAnnotation(false)»
    public void «effectiveFromHasChanged()» {
        super.«effectiveFromHasChanged()»;
    }
    
	/**
	 * @generated
	 */
	 «overrideAnnotation(false)»
	 public «addImport("java.util.Calendar")» «getEffectiveFromAsCalendar()» {
	 	«IF aggregateRoot-»
		 	«IF hasSupertype()-»
		 		return super.«getEffectiveFromAsCalendar()»;
		 	«ELSE-»
		 	    return null; // TODO Implement access to effective from.
        // To avoid that the generator overwrites the implementation,
        // you must add "NOT" after @generated in the Javadoc!
		 	«ENDIF-»
		 «ELSE-»
		        «IModelObject()» parent = «getParentModelObject()»;
		        if (parent instanceof «IConfigurableModelObject()») {
		            return ((«IConfigurableModelObject()»)parent).«getEffectiveFromAsCalendar()»;
		        }
		        return null;
		 «ENDIF-»
	 }
    
«ENDDEFINE»

«DEFINE generalMethods FOR XPolicyCmptClass-»
    /**
     * {@inheritDoc}
     * 
     * @generated
     */
	 «overrideAnnotation(false)»
    protected void initPropertiesFromXml(«Map()»<String, String> propMap, «IRuntimeRepository()» productRepository) {
   «REM» initPropertiesFromXml() in Extension auslager und mit 1 oder 2 argumenten definieren «ENDREM»
        super.initPropertiesFromXml(propMap, productRepository);    	
        «FOREACH attributes AS this-»
			«EXPAND PolicyCmptAttribute::initAttributeFromXML-»
        «ENDFOREACH-»
    }
«ENDDEFINE»
