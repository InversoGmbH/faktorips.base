/*******************************************************************************
 * Copyright (c) 2005-2009 Faktor Zehn AG und andere.
 * 
 * Alle Rechte vorbehalten.
 * 
 * Dieses Programm und alle mitgelieferten Sachen (Dokumentationen, Beispiele, Konfigurationen,
 * etc.) duerfen nur unter den Bedingungen der Faktor-Zehn-Community Lizenzvereinbarung - Version
 * 0.1 (vor Gruendung Community) genutzt werden, die Bestandteil der Auslieferung ist und auch unter
 * http://www.faktorzehn.org/f10-org:lizenzen:community eingesehen werden kann.
 * 
 * Mitwirkende: Faktor Zehn AG - initial API and implementation - http://www.faktorzehn.de
 *******************************************************************************/

package org.faktorips.devtools.stdbuilder.refactor;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.OperationCanceledException;
import org.eclipse.jdt.core.IJavaElement;
import org.eclipse.ltk.core.refactoring.Change;
import org.eclipse.ltk.core.refactoring.RefactoringStatus;
import org.eclipse.ltk.core.refactoring.participants.CheckConditionsContext;
import org.faktorips.devtools.core.model.IIpsElement;
import org.faktorips.devtools.core.model.pctype.IPolicyCmptType;
import org.faktorips.devtools.core.model.productcmpttype.IProductCmptType;
import org.faktorips.devtools.core.model.type.IAttribute;
import org.faktorips.devtools.core.model.type.IType;
import org.faktorips.devtools.core.refactor.LocationDescriptor;
import org.faktorips.devtools.stdbuilder.StandardBuilderSet;

/**
 * This class is loaded by the Faktor-IPS rename refactoring to participate in this process by
 * renaming the Java source code.
 * <p>
 * This is accomplished by successively calling JDT refactorings on the <tt>IJavaElement</tt>
 * generated by the code generator for the <tt>IIpsElement</tt> to be refactored.
 * 
 * @author Alexander Weickmann
 */
public class RenameRefactoringParticipant extends org.eclipse.ltk.core.refactoring.participants.RenameParticipant {

    /** A helper providing shared standard builder refactoring functionality. */
    private RefactoringParticipantHelper refactoringHelper;

    /** Creates a <tt>RenameRefactoringParticipant</tt>. */
    public RenameRefactoringParticipant() {
        refactoringHelper = new RenameParticipantHelper();
    }

    @Override
    public RefactoringStatus checkConditions(IProgressMonitor pm, CheckConditionsContext context)
            throws OperationCanceledException {

        return refactoringHelper.checkConditions(pm, context);
    }

    @Override
    public Change createChange(IProgressMonitor pm) throws CoreException, OperationCanceledException {
        return refactoringHelper.createChange(pm);
    }

    @Override
    protected boolean initialize(Object element) {
        return refactoringHelper.initialize(element);
    }

    @Override
    public String getName() {
        return "StandardBuilder Rename Participant";
    }

    /** The <tt>RefactoringParticipantHelper</tt> for this participant. */
    private final class RenameParticipantHelper extends RefactoringParticipantHelper {

        @Override
        protected void createChangeThis(IJavaElement originalJavaElement,
                IJavaElement newJavaElement,
                IProgressMonitor pm) throws OperationCanceledException, CoreException {

            renameJavaElement(originalJavaElement, newJavaElement.getElementName(), getArguments()
                    .getUpdateReferences(), pm);
        }

        @Override
        protected boolean initializeNewJavaElements(IIpsElement ipsElement, StandardBuilderSet builderSet) {
            if (ipsElement instanceof IAttribute) {
                initNewJavaElements((IAttribute)ipsElement, builderSet);

            } else if (ipsElement instanceof IPolicyCmptType) {
                IPolicyCmptType policyCmptType = (IPolicyCmptType)ipsElement;
                initNewJavaElements(policyCmptType, getTargetLocation(policyCmptType), builderSet);

            } else if (ipsElement instanceof IProductCmptType) {
                IProductCmptType productCmptType = (IProductCmptType)ipsElement;
                initNewJavaElements(productCmptType, getTargetLocation(productCmptType), builderSet);

            } else {
                return false;
            }

            return true;
        }

        /** Returns the target location for the given <tt>IType</tt>. */
        private LocationDescriptor getTargetLocation(IType type) {
            return new LocationDescriptor(type.getIpsPackageFragment(), getArguments().getNewName());
        }

        /**
         * Initializes the list of the <tt>IJavaElement</tt>s generated for the <tt>IAttribute</tt>
         * after it has been refactored.
         */
        private void initNewJavaElements(IAttribute attribute, StandardBuilderSet builderSet) {
            String oldName = attribute.getName();
            attribute.setName(getTargetLocation(attribute.getType()).getName());
            setNewJavaElements(builderSet.getGeneratedJavaElements(attribute));
            attribute.setName(oldName);
        }

    }

}
