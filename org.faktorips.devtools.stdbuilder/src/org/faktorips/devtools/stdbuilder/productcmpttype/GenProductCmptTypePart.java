/*******************************************************************************
 * Copyright (c) 2005,2006 Faktor Zehn GmbH und andere.
 *
 * Alle Rechte vorbehalten.
 *
 * Dieses Programm und alle mitgelieferten Sachen (Dokumentationen, Beispiele,
 * Konfigurationen, etc.) dürfen nur unter den Bedingungen der 
 * Faktor-Zehn-Community Lizenzvereinbarung – Version 0.1 (vor Gründung Community) 
 * genutzt werden, die Bestandteil der Auslieferung ist und auch unter
 *   http://www.faktorips.org/legal/cl-v01.html
 * eingesehen werden kann.
 *
 * Mitwirkende:
 *   Faktor Zehn GmbH - initial API and implementation 
 *
 *******************************************************************************/

package org.faktorips.devtools.stdbuilder.productcmpttype;

import org.eclipse.core.runtime.CoreException;
import org.faktorips.devtools.core.builder.DefaultJavaGeneratorForIpsPart2;
import org.faktorips.devtools.core.model.ipsobject.IIpsObjectPartContainer;
import org.faktorips.devtools.core.model.productcmpttype.IProductCmptType;
import org.faktorips.util.ArgumentCheck;
import org.faktorips.util.LocalizedStringsSet;

public abstract class GenProductCmptTypePart extends DefaultJavaGeneratorForIpsPart2{

    private GenProductCmptType genProductCmptType;
    
    public GenProductCmptTypePart(GenProductCmptType genProductCmptType, IIpsObjectPartContainer part, LocalizedStringsSet stringsSet) throws CoreException {
        super(part, stringsSet);
        ArgumentCheck.notNull(genProductCmptType, this);
        this.genProductCmptType = genProductCmptType;
    }


    public GenProductCmptType getGenProductCmptType(){
        return genProductCmptType;
    }

    /**
     * Returns the qualified name of the Java class generated by this builder for the given ips
     * object.
     * 
     * @param ipsObject the ips object.
     * @return the qualified class name
     * @throws CoreException
     */
    public String getQualifiedClassName(IProductCmptType target, boolean forInterface) throws CoreException {
        return genProductCmptType.getBuilderSet().getGenerator(target).getQualifiedName(forInterface);
    }

    public String getUnqualifiedClassName(IProductCmptType target, boolean forInterface) throws CoreException {
        return genProductCmptType.getBuilderSet().getGenerator(target).getUnqualifiedClassName(forInterface);
    }

    protected boolean isUseTypesafeCollections() {
        return getGenProductCmptType().getBuilderSet().isUseTypesafeCollections();
    }
}
