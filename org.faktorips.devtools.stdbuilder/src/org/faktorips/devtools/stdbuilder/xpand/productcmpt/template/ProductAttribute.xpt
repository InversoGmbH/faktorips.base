«IMPORT org::faktorips::devtools::stdbuilder»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::runtime»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::productcmpt::model»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::template::CommonGeneratorExtensions»

«DEFINE constantForPropertyName FOR XProductAttribute-»
	/**
	 * «localizedJDoc("FIELD_PROPERTY_NAME", name)»
	 * @generated
	 */
	public final static String «field(constantNamePropertyName)» = "«name»";
«ENDDEFINE»

«DEFINE memberField FOR XProductAttribute-»
	/**
	 * «localizedJDoc("FIELD_VALUE", name.toFirstUpper())»
	 *
	 * @generated
	 */
	 «IF multiValue-»
		 private «javaClassName» «field(fieldName)» = «newInstance»;
		 «REM»new line because of old code generator«ENDREM»
	 «ELSE-»
		 private «javaClassName» «field(fieldName)» = «defaultValueCode»;
	 «ENDIF-»
«ENDDEFINE»

«DEFINE getterSetter FOR XProductAttribute-»
	«EXPAND getter-»
	«EXPAND setter-»
«ENDDEFINE»

«DEFINE getter FOR XProductAttribute-» 
	/**
	 * «inheritDocOrJavaDoc("METHOD_GETVALUE", name, description)»
	 *
	 * @generated
	 */
	«overrideAnnotationForPublishedMethodOrIf(published, overwrite)»
	public «javaClassName» «method(methodNameGetter)»{
		return «getReferenceOrSafeCopyIfNecessary(fieldName)»;
	}
«ENDDEFINE»


«DEFINE setter FOR XProductAttribute-»
	/**
	 * «localizedJDoc("METHOD_SETVALUE", name, description)»
	 *
	 * @generated
	 */
	public void «method(methodNameSetter, javaClassName, "newValue")»{
		«EXPAND ProductCommons::checkRepositoryModifyable-»
		this.«fieldName» = «getReferenceOrSafeCopyIfNecessary("newValue")»;
	}
«ENDDEFINE»

«DEFINE initAttributeFromXML FOR XProductAttribute-»
        configElement = configMap.get("«name»");
        if (configElement != null) {
        «IF multiValue-»
        	«IF javaClassName == "List<String>"-»
	            «javaClassName» valueList = «MultiValueXmlHelper()».«getValuesFromXML("configElement")»;
	        «ELSE-»
	            «javaClassName» valueList = «newInstance»;
	            «List_("String")» stringList = «MultiValueXmlHelper()».«getValuesFromXML("configElement")»;
	            for (String stringValue : stringList) {
	                «singleJavaClassName» convertedValue = «getNewSingleInstanceFromExpression("stringValue")»;
	                valueList.add(convertedValue);
	            }
	        «ENDIF-»
   	        this.«name» = valueList;
        «ELSE-»
            String value = «ValueToXmlHelper()».«getValueFromElement("configElement", "\"Value\"")»;
            this.«name» = «getNewInstanceFromExpression("value")»;
        «ENDIF-»
        }        
«ENDDEFINE»

«DEFINE writeAttributeToXML FOR XProductAttribute-»
        attributeElement = element.getOwnerDocument().createElement("AttributeValue");
        attributeElement.setAttribute("attribute", "«name»");
        «IF multiValue-»
            «IF javaClassName == "List<String>"-»
                «MultiValueXmlHelper()».«addValuesToElement("attributeElement", "this." + name)»;
            «ELSE-»
		        stringList = new «ArrayList("String")»();
		        for («singleJavaClassName» value : this.«name») {
		            String stringValue = value == null ? null : value.toString();
		            stringList.add(stringValue);
		        }
		        «MultiValueXmlHelper()».«addValuesToElement("attributeElement", "stringList")»;
	        «ENDIF-»
	    «ELSE-»
	        «ValueToXmlHelper()».addValueToElement(«getToStringExpression(name)», attributeElement, "Value");
        «ENDIF-»
        element.appendChild(attributeElement);
«ENDDEFINE»
