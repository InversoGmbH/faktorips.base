«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::policycmpt::model»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::template::CommonGeneratorExtensions»

«DEFINE copyMethods FOR XPolicyCmptClass-»
	
   	«IF !abstract-»
	    /**
	     * {@inheritDoc}
	     * 
	     * @generated
	     */
	    «overrideAnnotationForInterfaceOrNonAbstractSuperclassMethod()»
	    public «IModelObject()» «newCopy()» {
	        «Map(IModelObject(), IModelObject())» copyMap = new «HashMap(IModelObject(), IModelObject())»();
	        «className» newCopy = («className») «newCopyInternal("copyMap")»;
	        «copyAssociationsInternal("newCopy", "copyMap")»;
	        return newCopy;
	    }
	«ENDIF-»
	
	/**
     * «localizedJDoc("METHOD_NEW_COPY_INTERNAL")»
     * 
     * @generated
     */
     «overrideAnnotationIfHasSuperclass()»
    public «IModelObject()» «newCopyInternal(Map(IModelObject(), IModelObject())+" copyMap")» {
    	«IF !abstract-»
	        «className» newCopy = («className»)copyMap.get(this);
	        if (newCopy == null) {
	            newCopy = new «className»();
	            «IF configured-»
		            newCopy.«copyProductCmptAndGenerationInternal("this")»;
	            «ENDIF-»
	            «copyProperties("newCopy", "copyMap")»;
	        }
	        return newCopy;
    	«ELSE-»
	        throw new RuntimeException(
	                "This method has to be abstract. It needs to have an empty body because of a bug in JMerge.");
	    «ENDIF-»
    }

    /**
     * «localizedJDoc("METHOD_COPY_PROPERTIES")»
     * 
     * @generated
     */
     «overrideAnnotationIfHasSuperclass()»
    protected void «copyProperties(IModelObject()+" copy", Map(IModelObject(), IModelObject())+" copyMap")» {
		«IF hasSupertype()-»
			super.copyProperties(copy, copyMap);
        «ENDIF-»		
        «IF attributesToCopy.size > 0 || associationsToCopy.size > 0-»
    		«className» concreteCopy = («className»)copy;
        	«EXPAND copyAttributes-»
        	«EXPAND copyAssociations-»        	
        «ENDIF-»
        «IF attributesToCopy.size == 0 && associationsToCopy.size == 0 && !hasSupertype()-»
        	«localizedComment("NOTHING_TO_DO")»
        «ENDIF-»
    }

    /**
     * «localizedJDoc("METHOD_COPY_ASSOCIATIONS_INTERNAL")»
     *
     * @generated
     */
     «overrideAnnotationIfHasSuperclass()»
    public void «copyAssociationsInternal(IModelObject()+" abstractCopy", Map(IModelObject(), IModelObject())+" copyMap")» {
    	«IF hasSupertype()-»
	        super.copyAssociationsInternal(abstractCopy, copyMap);
    	«ENDIF-»
        «IF associationsToCopy.size > 0-»
            «IF requiresLocalVariableInCopyAssocsInternal»
            	«className» newCopy = («className»)abstractCopy;
            «ENDIF-»
	        «EXPAND copyAssociationInternal FOREACH associations-»
        «ENDIF-»
        «IF associationsToCopy.size == 0 && !hasSupertype()-»
        	«localizedComment("NOTHING_TO_DO")»
        «ENDIF-»
    }
«ENDDEFINE»

«REM»Siehe PolicyCmptImplClassBuilder Z.394«ENDREM»
«DEFINE copyAttributes FOR XPolicyCmptClass-»
	«FOREACH attributesToCopy AS this-»
		«IF considerInCopySupport-»
	        concreteCopy.«fieldName» = «fieldName»;
	    «ENDIF-»
	«ENDFOREACH-»
«ENDDEFINE»

«DEFINE copyAssociations FOR XPolicyCmptClass-»
	«FOREACH associations AS this-»
		«IF considerInCopySupport-»
			«IF typeAssociation-»		
				«IF oneToMany-»
        			concreteCopy.«fieldName».addAll(«fieldName»);
				«ELSE-»
        			concreteCopy.«fieldName» = «fieldName»;
				«ENDIF-»
			«ELSE-»
				«IF oneToMany-»
			        for («Iterator(targetInterfaceName)» it = «fieldName».iterator(); it.hasNext();) { «REM» TODO cast ohne published interfaces nicht noetig«ENDREM»
			            «targetClassName» «copySupportLoopVarName» = («targetClassName»)it.next();
			            «targetClassName» «copySupportCopyVarName» = («targetClassName»)«copySupportLoopVarName».newCopyInternal(copyMap);
			            «IF setInverseAssociationInCopySupport-»
				            «copySupportCopyVarName».«methodNameInverseAssociationSetInternal»(concreteCopy);
			           	«ENDIF-»
			            concreteCopy.«fieldName».add(«copySupportCopyVarName»);
			            copyMap.put(«copySupportLoopVarName», «copySupportCopyVarName»);
       				}			
				«ELSE-»
			        if («fieldName» != null) { «REM» TODO cast ohne published interfaces nicht noetig«ENDREM»
			            concreteCopy.«fieldName» = («targetClassName»)«fieldName».newCopyInternal(copyMap);
			            «IF setInverseAssociationInCopySupport-»
			            	concreteCopy.«fieldName».«methodNameInverseAssociationSetInternal»(concreteCopy);
			           	«ENDIF-»
			            copyMap.put(«fieldName», concreteCopy.«fieldName»);
			        }
				«ENDIF-»
		    «ENDIF-»
	    «ENDIF-»
	«ENDFOREACH-»
«ENDDEFINE»

«REM»Siehe PolicyCmptImplClassBuilder Z.523«ENDREM»
«DEFINE copyAssociationInternal FOR XPolicyAssociation-»
	«IF considerInCopySupport-»
		«IF typeAssociation-»		
			«IF oneToMany-»
		        for («targetInterfaceName» «copySupportLoopVarNameInternal» : «fieldName») {
		            if (copyMap.containsKey(«copySupportLoopVarNameInternal»)) {
		                newCopy.«fieldName».remove(«copySupportLoopVarNameInternal»);
		                newCopy.«fieldName».add((«targetInterfaceName»)copyMap
		                        .get(«copySupportLoopVarNameInternal»));
		            }
		        }
			«ELSE-»
				if (copyMap.containsKey(«fieldName»)) {
					newCopy.«fieldName» = («targetClassName»)copyMap.get(«fieldName»);
				}
			«ENDIF-»
		«ELSE-»
			«IF oneToMany-»
				for («targetInterfaceName» «copySupportLoopVarNameInternal» : «fieldName») {
		            «targetClassName» «copySupportCopyVarName» = («targetClassName»)copyMap.get(«copySupportLoopVarNameInternal»);
		            ((«targetClassName»)«copySupportLoopVarNameInternal»).copyAssociationsInternal(«copySupportCopyVarName», copyMap);
		        }
			«ELSE-»
		        if («fieldName» != null) {
		            «targetClassName» «copySupportCopyVarName» = («targetClassName»)copyMap.get(«fieldName»);
		            «fieldName».copyAssociationsInternal(«copySupportCopyVarName», copyMap);
		        }
			«ENDIF-»
	    «ENDIF-»
    «ENDIF-»
«ENDDEFINE»
