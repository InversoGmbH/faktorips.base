«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::policycmpt::model»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::template::CommonGeneratorExtensions»

«DEFINE computeDeltaMethod FOR XPolicyCmptClass-»
	/**
     * {@inheritDoc}
     * 
     * @generated
     */
    «overrideAnnotationIfHasSuperclass()»
    public «IModelObjectDelta()» «computeDelta(IModelObject() +" otherObject", IDeltaComputationOptions()+" options")» {
    	«IF hasSupertype()-»
        	«ModelObjectDelta()» delta = («ModelObjectDelta()») super.computeDelta(otherObject, options);
        «ELSE-»
        	«ModelObjectDelta()» delta = «ModelObjectDelta()».newDelta(this, otherObject, options);
        «ENDIF-»
        if (!«className».class.isAssignableFrom(otherObject.getClass())) {
            return delta;
        }
    	«IF !attributesForDeltaComputation.isEmpty || !associationsForDeltaComputation.isEmpty-»
	        «className» «localVarNameDeltaSupportOtherObject» = («className»)otherObject;
			«EXPAND DeltaSupport::deltaCheckForAttribute(this, localVarNameDeltaSupportOtherObject) FOREACH attributesForDeltaComputation-»
			«EXPAND DeltaSupport::deltaCheckForRelatedClasses(this) FOREACH associationsForDeltaComputation-»
        «ENDIF-»
        return delta;
    }
«ENDDEFINE»

«DEFINE deltaCheckForAttribute(XPolicyCmptClass policyClass, String localVarName) FOR XPolicyAttribute-»
	«IF considerInDeltaComputation-»
        delta.checkPropertyChange(«policyClass.publishedInterfaceName».«constantNamePropertyName», «fieldName», «localVarName».«fieldName», options);
    «ENDIF-»
«ENDDEFINE»

«DEFINE deltaCheckForRelatedClasses(XPolicyCmptClass policyClass) FOR XPolicyAssociation-»
	«IF considerInDeltaComputation-»
		ModelObjectDelta.createChildDeltas(delta, «fieldName», other«policyClass.className».«fieldName», "«fieldName»", options);
    «ENDIF-»
«ENDDEFINE»
