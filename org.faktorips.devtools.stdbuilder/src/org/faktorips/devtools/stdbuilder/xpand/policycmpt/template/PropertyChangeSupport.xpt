«IMPORT org::faktorips::devtools::stdbuilder»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::policycmpt::model»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::template::CommonGeneratorExtensions»
«DEFINE fieldDefinition FOR XPolicyCmptClass-»
	«IF generateChangeSupport && !hasSupertype()-»
	    /**
	     * «localizedJDoc("FIELD_PROPERTY_CHANGE_SUPPORT")»
	     * 
	     * @generated
	     */
	     «getAnnotations(AnnotatedJavaElementType::POLICY_CMPT_IMPL_CLASS_TRANSIENT_FIELD)»
	    protected final «IpsPropertyChangeSupport()» propertyChangeSupport = new «IpsPropertyChangeSupport()»(this);
	«ENDIF»
«ENDDEFINE»

«DEFINE generalMethods FOR XPolicyCmptClass-»	
	«EXPAND notifyChangeListeners-»
	«EXPAND addRemoveListenerMethods-»
«ENDDEFINE»

«DEFINE notifyChangeListeners FOR XPolicyCmptClass-»
	«IF generateNotifyChangeListeners-»
		/**
	     * {@inheritDoc}
	     * 
		 * @generated
		 */
		 «overrideAnnotationIfHasSuperclassOrInterface()-»
		public void notifyChangeListeners(«PropertyChangeEvent()» event) {
			«IF !hasSupertype()-»
		        if (event instanceof «AssociationChangedEvent()») {
		            propertyChangeSupport.fireAssociationChange((«AssociationChangedEvent()»)event);
		        } else {
		            propertyChangeSupport.firePropertyChange(event);
		        }
			«ELSE-»
				super.notifyChangeListeners(event);
			«ENDIF-»
	        «FOREACH associations AS this-»
	    		«IF compositionDetailToMaster && !derived-»
			        if («fieldName» != null) {
			            ((«INotificationSupport()»)«fieldName»).notifyChangeListeners(event);
			        }
			    «ENDIF-»
	        «ENDFOREACH-»
	    }
	«ENDIF»
«ENDDEFINE»

«DEFINE addRemoveListenerMethods FOR XPolicyCmptClass-»
	«IF generateChangeSupport && !hasSupertype()-»
	    /**
	     * {@inheritDoc}
	     * 
	     * @generated
	     */
		«overrideAnnotation(true)-»
	    public void addPropertyChangeListener(«PropertyChangeListener()» listener) {
	        propertyChangeSupport.addPropertyChangeListener(listener);
	    }
	
	    /**
	     * {@inheritDoc}
	     * 
	     * @generated
	     */
		«overrideAnnotation(true)-»
	    public void addPropertyChangeListener(«PropertyChangeListener()» listener, boolean propagateEventsFromChildren) {
	        propertyChangeSupport.addPropertyChangeListener(listener, propagateEventsFromChildren);
	    }
	
	    /**
	     * {@inheritDoc}
	     * 
	     * @generated
	     */
		«overrideAnnotation(true)-»
	    public void addPropertyChangeListener(String propertyName, PropertyChangeListener listener) {
	        propertyChangeSupport.addPropertyChangeListener(propertyName, listener);
	    }
	
	    /**
	     * {@inheritDoc}
	     * 
	     * @generated
	     */
		«overrideAnnotation(true)-»
	    public boolean hasListeners(String propertyName) {
	        return propertyChangeSupport.hasListeners(propertyName);
	    }
	
	    /**
	     * {@inheritDoc}
	     * 
	     * @generated
	     */
		«overrideAnnotation(true)-»
	    public void removePropertyChangeListener(PropertyChangeListener listener) {
	        propertyChangeSupport.removePropertyChangeListener(listener);
	    }
	
	    /**
	     * {@inheritDoc}
	     * 
	     * @generated
	     */
		«overrideAnnotation(true)-»
	    public void removePropertyChangeListener(String propertyName, PropertyChangeListener listener) {
	        propertyChangeSupport.removePropertyChangeListener(propertyName, listener);
	    }
	«ENDIF»
«ENDDEFINE»

«DEFINE storeOldValue FOR XPolicyAttribute-»
	«IF generateChangeSupport-»
		«javaClassName» «oldValueVariable» = «fieldName»;
	«ENDIF-»
«ENDDEFINE»

«DEFINE storeOldValue FOR XPolicyAssociation-»
	«IF generateChangeSupport-»
		«targetInterfaceName» «oldValueVariable» = «fieldName»;
	«ENDIF-»
«ENDDEFINE»

«DEFINE notify FOR XPolicyAttribute-»
	«IF generateChangeSupport-»
		«IF datatype.name=="int" || datatype.name=="boolean"-»
			«EXPAND notifyForIntOrBoolean-»
		«ELSE-»
			notifyChangeListeners(new «PropertyChangeEvent()» (this, «constantNamePropertyName», «oldValueVariable», «fieldName»));
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE notify FOR XPolicyAssociation-»
	«EXPAND notifyAssociation(oldValueVariable, "newObject")-»
«ENDDEFINE»

«DEFINE notifyNewAssociation(String variableName) FOR XPolicyAssociation-»
	«EXPAND notifyAssociation("null", variableName)-»
«ENDDEFINE»

«DEFINE notifyRemovedAssociation(String variableName) FOR XPolicyAssociation-»
	«EXPAND notifyAssociation(variableName, "null")-»
«ENDDEFINE»

«DEFINE notifyAssociation(String oldValue, String newValue) FOR XPolicyAssociation-»
	«IF generateChangeSupport-»
		notifyChangeListeners(new «AssociationChangedEvent()» (this, «constantNamePropertyName», «oldValue», «newValue»));
	«ENDIF-»
«ENDDEFINE»

«REM»Workaround entsprechend BeanChangeListenerSupportBuilder#appendFieldAccess()«ENDREM»
«DEFINE notifyForIntOrBoolean FOR XPolicyAttribute-»
		«IF datatype.name=="int"-»
			notifyChangeListeners(new «PropertyChangeEvent()» (this, «constantNamePropertyName», new Integer(«oldValueVariable»), new Integer(«fieldName»)));
		«ELSE-»
			notifyChangeListeners(new «PropertyChangeEvent()» (this, «constantNamePropertyName», Boolean.valueOf(«oldValueVariable»), Boolean.valueOf(«fieldName»)));
		«ENDIF-»
«ENDDEFINE»