«IMPORT org::faktorips::devtools::stdbuilder»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::productcmpt::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::productcmpt::template»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::productcmpt::template::ProductAttributeExtension»

«DEFINE constantForPropertyName FOR XProductAttribute-»
		/**
	 	* «localizedJDoc("FIELD_PROPERTY_NAME", name)»
		* «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)»
	 	* @generated
	 	*/
		public static final String «field(constantNamePropertyName)» = "«name»";
«ENDDEFINE»

«DEFINE memberField FOR XProductAttribute-»
		/**
	 	* «localizedJDoc("FIELD_VALUE", name.toFirstUpper())»
	 	* «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)»
	 	* @generated
	 	*/
		«getAnnotations(AnnotatedJavaElementType::PRODUCT_CMPT_IMPL_CLASS_ATTRIBUTE_FIELD)-»
    	private «javaClassName» «field(fieldName)»;
«ENDDEFINE»

«DEFINE abstractGetter FOR XProductAttribute-»
		/**
	 	* «inheritDocOrJavaDocIf(genInterface(), "METHOD_GETVALUE", name, descriptionForJDoc)»
	 	* «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)»
	 	* @generated
	 	*/
		public abstract «javaClassName» «method(methodNameGetter)»;
«ENDDEFINE»

«DEFINE getterSetter FOR XProductAttribute-»
	«EXPAND getter-»
	«EXPAND setter-»
	«EXPAND internalSetter-»
«ENDDEFINE»

«DEFINE setDefaultValue FOR XProductAttribute-»	
	«IF callSetDefaultValue-»
		«methodNameSetterInternal»(«defaultValueCode»);
	«ENDIF-»
«ENDDEFINE»

«DEFINE getter FOR XProductAttribute-»
		/**
	 	* «inheritDocOrJavaDocIf(genInterface(), "METHOD_GETVALUE", name, descriptionForJDoc)»
	 	* «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)»
	 	* @generated
	 	*/
		«getAnnotationsForPublishedInterfaceModifierRelevant(AnnotatedJavaElementType::PRODUCT_CMPT_DECL_CLASS_ATTRIBUTE_GETTER, genInterface())-»
		«overrideAnnotationForPublishedMethodOrIf(!genInterface() && published, overwrite)-»
		public «javaClassName» «method(methodNameGetter)»
		«IF genInterface()»;«ELSE-»
		{
			return «getReferenceOrSafeCopyIfNecessary(fieldName)»;
		}
		«ENDIF-»
		«IF multilingual-»
			«EXPAND multilingualGetter-»
		«ENDIF»
«ENDDEFINE»

«DEFINE multilingualGetter FOR XProductAttribute-»
	/**
 	* «inheritDocOrJavaDocIf(genInterface(), "METHOD_GETVALUE_MULTILINGUAL", name, descriptionForJDoc)»
 	* «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)»
 	* @generated
 	*/
	«overrideAnnotationForPublishedMethodOrIf(!genInterface() && published, overwrite)-»
	«IF multiValue-»
		public «List_("String")-» «method(methodNameGetter, Locale(), "locale")»
		«IF genInterface()»;«ELSE-»
		{
	        «List_("String")-» result = new «ArrayList("String")»();
	        for («DefaultInternationalString()» internationalString : «fieldName») {
	            result.add(internationalString.get(locale));
	        }
	        return result;
		}
		«ENDIF-»
	«ELSE-»
		public String «method(methodNameGetter, Locale(), "locale")»
		«IF genInterface()»;«ELSE-»
		{
	        return «fieldName».get(locale);
		}
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE setter FOR XProductAttribute-»
		/**
	 	* «localizedJDoc("METHOD_SETVALUE", name, description)»
	 	* «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)»
	 	* @generated
	 	*/
		«getAnnotationsForPublishedInterfaceModifierRelevant(AnnotatedJavaElementType::PRODUCT_CMPT_DECL_CLASS_ATTRIBUTE_SETTER, genInterface())-»
		public void «method(methodNameSetter, javaClassName, "newValue")»{
			«EXPAND ProductCommons::checkRepositoryModifyable-»
			«methodNameSetterInternal»(«getReferenceOrSafeCopyIfNecessary("newValue")»);
		}
«ENDDEFINE»

«DEFINE internalSetter FOR XProductAttribute-»
	«IF (!genInterface())-»
		/**
 		* «localizedJDoc("METHOD_SETVALUE_INTERNAL", name, description)»
 		* «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)»
 		* @generated
 		*/
		protected final void «method(methodNameSetterInternal, javaClassName, "newValue")»{
			this.«fieldName» = newValue;
		}
	«ENDIF-»
«ENDDEFINE»

«DEFINE initFromXmlMethodCall FOR XProductAttribute-»
		«methodNameDoInitFromXml»(configMap);
«ENDDEFINE»

«DEFINE initFromXmlMethod FOR XProductAttribute-»
		/**
 		* @generated
 		*/
		private void «method(methodNameDoInitFromXml, Map("String", Element()), "configMap")» {
	        Element configElement = configMap.get(«constantNamePropertyName»);
	        if (configElement != null) {
	        «IF multiValue-»
	        	«EXPAND initMultiValueAttributeFromXml-»
	        «ELSE-»
	            «xmlValueType()» value = «ValueToXmlHelper()».«getFromElement("configElement", XML_TAG_VALUE())»;
	           	this.«fieldName» = «getNewInstanceFromExpression("value", "getRepository()")»;
	        «ENDIF-»
	        }
	    }
«ENDDEFINE»

«DEFINE initMultiValueAttributeFromXml FOR XProductAttribute-»
	«IF multiValueDirectXmlHandling-»
        «javaClassName» valueList = «MultiValueXmlHelper()».«getMultiValueFromXML("configElement")»;
    «ELSE-»
        «javaClassName» valueList = «newMultiValueInstance»;
    	«LET singleValueOfMultiValueAttribute AS this-»
            «List_("String")» stringList = «MultiValueXmlHelper()».«getValuesFromXML("configElement")»;
            for (String stringValue : stringList) {
                «javaClassName» convertedValue = «getNewInstanceFromExpression("stringValue", "getRepository()")»;
                valueList.add(convertedValue);
            }
        «ENDLET-»
    «ENDIF-»
	this.«fieldName» = valueList;
«ENDDEFINE»

«DEFINE writeAttributeToXmlMethodCall FOR XProductAttribute-»
		«methodNameWriteToXml»(element);
«ENDDEFINE»

«DEFINE writeAttributeToXmlMethod FOR XProductAttribute-»
	    /**
	     * @generated
	     */
		private void «method(methodNameWriteToXml, Element(), "element")» {
	        Element attributeElement = element.getOwnerDocument().createElement(«XML_TAG_ATTRIBUTE_VALUE()»);
	        attributeElement.setAttribute(«XML_ATTRIBUTE_ATTRIBUTE()», «constantNamePropertyName»);
	        «IF multiValue-»
	            «IF multiValueDirectXmlHandling-»
	                «MultiValueXmlHelper()».«addMultiValueToElement("attributeElement", "this." + fieldName)»;
	            «ELSE-»
	            	«LET singleValueOfMultiValueAttribute AS this-»
				        «List_("String")» stringList«fieldName.toFirstUpper()» = new «ArrayList("String")»();
				        for («javaClassName» value : this.«fieldName») {
				            String stringValue = «getToStringExpression("value")»;
				            stringList«fieldName.toFirstUpper()».add(stringValue);
				        }
				    «ENDLET-»
			        «MultiValueXmlHelper()».«addValuesToElement("attributeElement", "stringList" + fieldName.toFirstUpper())»;
		        «ENDIF-»
		    «ELSE-»
	       		«ValueToXmlHelper()».«addToElement(getToStringExpression(fieldName), "attributeElement", XML_TAG_VALUE())»;
	        «ENDIF-»
	        element.appendChild(attributeElement);
		}
«ENDDEFINE»
