«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::policycmpt::model»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::template::CommonGeneratorExtensions»
«DEFINE fieldDefinition FOR XPolicyCmptClass-»
	«IF modelContext.generatePropertyChange && !hasSupertype()-»
	    /**
	     * «localizedJDoc("FIELD_PROPERTY_CHANGE_SUPPORT")»
	     * 
	     * @generated
	     */
	    protected final «addImport("org.faktorips.runtime.IpsPropertyChangeSupport")» propertyChangeSupport = new IpsPropertyChangeSupport(this);
	«ENDIF»
«ENDDEFINE»

«DEFINE generalMethods FOR XPolicyCmptClass-»
	«IF modelContext.generatePropertyChange && !hasSupertype()-»
	/**
     * {@inheritDoc}
     * 
	 * @generated
	 */«REM»«overrideAnnotation(false)-»«ENDREM»
	public void notifyChangeListeners(«addImport("java.beans.PropertyChangeEvent")» event) {
        if (event instanceof «addImport("org.faktorips.runtime.AssociationChangedEvent")») {
            propertyChangeSupport.fireAssociationChange((AssociationChangedEvent)event);
        } else {
            propertyChangeSupport.firePropertyChange(event);
        }
    }
    
    /**
     * {@inheritDoc}
     * 
     * @generated
     */«REM»«overrideAnnotation(false)-»«ENDREM»
    public void addPropertyChangeListener(«addImport("java.beans.PropertyChangeListener")» listener) {
        propertyChangeSupport.addPropertyChangeListener(listener);
    }

    /**
     * {@inheritDoc}
     * 
     * @generated
     */«REM»«overrideAnnotation(false)-»«ENDREM»
    public void addPropertyChangeListener(PropertyChangeListener listener, boolean propagateEventsFromChildren) {
        propertyChangeSupport.addPropertyChangeListener(listener, propagateEventsFromChildren);
    }

    /**
     * {@inheritDoc}
     * 
     * @generated
     */«REM»«overrideAnnotation(false)-»«ENDREM»
    public void addPropertyChangeListener(String propertyName, PropertyChangeListener listener) {
        propertyChangeSupport.addPropertyChangeListener(propertyName, listener);
    }

    /**
     * {@inheritDoc}
     * 
     * @generated
     */«REM»«overrideAnnotation(false)-»«ENDREM»
    public boolean hasListeners(String propertyName) {
        return propertyChangeSupport.hasListeners(propertyName);
    }

    /**
     * {@inheritDoc}
     * 
     * @generated
     */«REM»«overrideAnnotation(false)-»«ENDREM»
    public void removePropertyChangeListener(PropertyChangeListener listener) {
        propertyChangeSupport.removePropertyChangeListener(listener);
    }

    /**
     * {@inheritDoc}
     * 
     * @generated
     */«REM»«overrideAnnotation(false)-»«ENDREM»
    public void removePropertyChangeListener(String propertyName, PropertyChangeListener listener) {
        propertyChangeSupport.removePropertyChangeListener(propertyName, listener);
    }
	«ENDIF»
«ENDDEFINE»

«DEFINE storeOldValue FOR XPolicyAttribute-»
	«IF modelContext.generatePropertyChange-»
		«javaClassName» «oldValueVariable» = «fieldName»;
	«ENDIF-»
«ENDDEFINE»

«DEFINE notify FOR XPolicyAttribute-»
	«IF modelContext.generatePropertyChange-»
		«IF datatype.name=="int" || datatype.name=="boolean"-»
			«EXPAND notifyForIntOrBoolean-»
		«ELSE-»
			notifyChangeListeners(new «PropertyChangeEvent()» (this, «constantNamePropertyName», «oldValueVariable», «fieldName»));
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«REM»Workaround entsprechend BeanChangeListenerSupportBuilder#appendFieldAccess()«ENDREM»
«DEFINE notifyForIntOrBoolean FOR XPolicyAttribute-»
		«IF datatype.name=="int"-»
			notifyChangeListeners(new «PropertyChangeEvent()» (this, «constantNamePropertyName», new Integer(«oldValueVariable»), new Integer(«fieldName»)));
		«ELSE-»
			notifyChangeListeners(new «PropertyChangeEvent()» (this, «constantNamePropertyName», Boolean.valueOf(«oldValueVariable»), Boolean.valueOf(«fieldName»)));
		«ENDIF-»
«ENDDEFINE»