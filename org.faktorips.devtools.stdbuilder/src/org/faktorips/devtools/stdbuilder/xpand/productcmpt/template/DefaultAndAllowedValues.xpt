«IMPORT org::faktorips::devtools::stdbuilder»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::productcmpt::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::policycmpt::model»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::template::CommonGeneratorExtensions»

«DEFINE defaultAndAllowedValuesFields FOR XPolicyAttribute-»
	«IF generateGetAllowedValuesForAndGetDefaultValue-»
		«EXPAND defaultField-»
		«EXPAND allowedValueSetField-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE defaultField FOR XPolicyAttribute-»
    /**
     * «localizedJDoc("FIELD_DEFAULTVALUE", name)»
     * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)»
     * @generated
     */
    private «javaClassName» «field(fieldNameDefaultValue)» = «defaultValueCode»;
«ENDDEFINE»

«DEFINE allowedValueSetField FOR XPolicyAttribute-»
    /**
     * «localizedJDoc(getJavadocKey("FIELD"), name)»
     * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)»
     * @generated
     */
    private «valueSetJavaClassName» «field(fieldNameValueSet)»;
«ENDDEFINE»

«DEFINE getter FOR XPolicyAttribute-»
	«IF generateGetAllowedValuesForAndGetDefaultValue-»
		«EXPAND getterDefaultValue-»
		«EXPAND getterAllowedValues-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE getterDefaultValue FOR XPolicyAttribute-»
    /**
     * «inheritDocOrJavaDocIf(genInterface(), "METHOD_GET_DEFAULTVALUE", name)»
     * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)»
     * @generated
     */
	«getAnnotationsForPublishedInterfaceModifierRelevant(AnnotatedJavaElementType::PRODUCT_CMPT_DECL_CLASS_ATTRIBUTE_DEFAULT, genInterface())-»
	«overrideAnnotationForPublishedMethodOrIf(!genInterface() && published, overrideGetDefaultValue && overwrittenAttribute.productRelevantInHierarchy)-»
    public «javaClassName» «method(methodNameGetDefaultValue)»
    «IF genInterface()»;«ELSE-»
    {
        return «fieldNameDefaultValue»;
    }
    «ENDIF»
«ENDDEFINE»

«DEFINE getterAllowedValues FOR XPolicyAttribute-»
    /**
     * «inheritDocOrJavaDocIf(genInterface(), getJavadocKey("METHOD_GET"), name)»
     * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)»
     * @generated
     */
	«getAnnotationsForPublishedInterfaceModifierRelevant(AnnotatedJavaElementType::PRODUCT_CMPT_DECL_CLASS_ATTRIBUTE_ALLOWED_VALUES, genInterface())-»
	«overrideAnnotationForPublishedMethodOrIf(!genInterface() && published, overrideGetAllowedValuesFor && overwrittenAttribute.productRelevantInHierarchy)-»
    public «valueSetJavaClassName» «method(methodNameGetAllowedValuesFor, IValidationContext(), "context")»
    «IF genInterface()»;«ELSE-»
    {
        return «fieldNameValueSet»;
    }
    «ENDIF»
«ENDDEFINE»

«DEFINE initFromXmlMethodCall FOR XPolicyAttribute-»
	«IF generateGetAllowedValuesForAndGetDefaultValue-»
		«methodNameDoInitFromXml»(configMap);
    «ENDIF-»
«ENDDEFINE»

«DEFINE initFromXmlMethod FOR XPolicyAttribute-»
	«IF generateGetAllowedValuesForAndGetDefaultValue-»
		/**
 		* @generated
 		*/
 		private void «method(methodNameDoInitFromXml, Map("String", Element()), "configMap")» {
        Element configElement = configMap.get(«policyCmptNode.implClassName».«constantNamePropertyName»);
        if (configElement != null) {
            String value = «ValueToXmlHelper()».«getValueFromElement("configElement", XML_TAG_VALUE())»;
            «fieldNameDefaultValue» = «getNewInstanceFromExpression("value", "getRepository()")»;
            «IF valueSetUnrestricted-»
            	«IF ipsEnum-»
       	            «fieldNameValueSet» = «newEnumValueSetInstance(getAllEnumValuesCode("getRepository()"), "true")»;
            	«ELSE-»
	            	«fieldNameValueSet» = «ValueToXmlHelper()».«getUnrestrictedValueSet("configElement", XML_TAG_VALUE_SET())»;
            	«ENDIF-»
            «ENDIF-»
            «IF valueSetEnum || (valueSetUnrestricted && enumValueSetSupported)-»
	            «EnumValues()» values = «ValueToXmlHelper()».«getEnumValueSetFromElement("configElement", XML_TAG_VALUE_SET())»;
	            if (values != null) {
	                «ArrayList(javaClassUsedForValueSet)» enumValues = new «ArrayList(javaClassUsedForValueSet)»();
	                for (int i = 0; i < values.«getNumberOfValues()»; i++) {
	                    enumValues.add(«getValueSetNewInstanceFromExpression("values.getValue(i)", "getRepository()")»);
	                }
	                «fieldNameValueSet» = «newEnumValueSetInstance("enumValues", "values
	                        .containsNull()")»;
	            }
            «ENDIF-»
            «IF valueSetRange || (valueSetUnrestricted && rangeSupported)-»
	            «Range()» range = «ValueToXmlHelper()».«getRangeFromElement("configElement", XML_TAG_VALUE_SET())»;
	            if (range != null) {
	                «fieldNameValueSet» = «getNewRangeExpression("range.getLower()", "range
	                        .getUpper()", "range.getStep()", "range.containsNull()")»;
	            }
            «ENDIF-»
        }
	}
	 «ENDIF-»
«ENDDEFINE»

«DEFINE writeAttributeToXmlMethodCall FOR XPolicyAttribute-»
	«IF generateGetAllowedValuesForAndGetDefaultValue-»
		«methodNameWriteToXml»(element);
	«ENDIF-»
«ENDDEFINE»

«DEFINE writeAttributeToXmlMethod FOR XPolicyAttribute-»
	«IF generateGetAllowedValuesForAndGetDefaultValue-»
		/**
		 * @generated
	     */
		private void «method(methodNameWriteToXml, Element(), "element")» {
	        Element configElement = element.getOwnerDocument().createElement(«XML_TAG_CONFIG_ELEMENT()»);
	        configElement.setAttribute(«XML_ATTRIBUTE_ATTRIBUTE()», «policyCmptNode.implClassName».«constantNamePropertyName»);
	        «ValueToXmlHelper()».«addValueToElement(toStringExpression, "configElement", XML_TAG_VALUE())»;
	        Element valueSetElement = element.getOwnerDocument().createElement(«XML_TAG_VALUE_SET()»);
	        «IF valueSetUnrestricted-»
		        if («fieldNameValueSet» instanceof «UnrestrictedValueSet("?")») {
		            Element valueElement = element.getOwnerDocument().createElement(«XML_TAG_ALL_VALUES()»);
		            valueElement.setAttribute(«XML_ATTRIBUTE_CONTAINS_NULL()», Boolean.toString(«fieldNameValueSet».«containsNull()»));
		            valueSetElement.appendChild(valueElement);
		        }
	        «ENDIF-»
	    	«IF valueSetUnrestricted && rangeSupported-»
	        	if («fieldNameValueSet» instanceof «qnameRange("?")») {
		            «qnameRange(javaClassQualifiedNameUsedForValueSet)» range = («qnameRange(javaClassQualifiedNameUsedForValueSet)»)«fieldNameValueSet»;
		            «EXPAND writeRange("range")-»
		        }
	        «ELSEIF valueSetRange-»
	                «EXPAND writeRange(fieldNameValueSet)-»
	        «ENDIF-»
	        «IF valueSetUnrestricted && enumValueSetSupported-»
	    		if («fieldNameValueSet» instanceof «OrderedValueSet("?")») {
	    			«EXPAND writeEnumValueSet-»
		        }
		    «ELSEIF valueSetEnum-»
	       			«EXPAND writeEnumValueSet-»
			«ENDIF-»
	        configElement.appendChild(valueSetElement);
	        element.appendChild(configElement);
		}
	«ENDIF-»
«ENDDEFINE»


«DEFINE writeRange(String rangeVar) FOR XPolicyAttribute-»
	            Element valueSetValuesElement = element.getOwnerDocument().createElement(«XML_TAG_RANGE()»);
	            valueSetValuesElement.setAttribute(«XML_ATTRIBUTE_CONTAINS_NULL()», Boolean.toString(«fieldNameValueSet».«containsNull()»));
	            «ValueToXmlHelper()».«addValueToElement(getToStringExpression(rangeVar + ".getLowerBound()"),
	                    "valueSetValuesElement", XML_TAG_LOWER_BOUND())»;
	            «ValueToXmlHelper()».«addValueToElement(getToStringExpression(rangeVar + ".getUpperBound()"),
	                    "valueSetValuesElement", XML_TAG_UPPER_BOUND())»;
	            «ValueToXmlHelper()».«addValueToElement(getToStringExpression(rangeVar + ".getStep()"),
	                    "valueSetValuesElement", XML_TAG_STEP())»;
	            valueSetElement.appendChild(valueSetValuesElement);
«ENDDEFINE»

«DEFINE writeEnumValueSet FOR XPolicyAttribute-»
	            Element valueSetValuesElement = element.getOwnerDocument().createElement(«XML_TAG_ENUM()»);
	            valueSetValuesElement.setAttribute(«XML_ATTRIBUTE_CONTAINS_NULL()», Boolean.toString(«fieldNameValueSet».«containsNull()»));
	            for («javaClassQualifiedName» value : «fieldNameValueSet».getValues(true)) {
	                Element valueElement = element.getOwnerDocument().createElement(«XML_TAG_VALUE()»);
	                «ValueToXmlHelper()».«addValueToElement(getToStringExpression("value"),"valueElement", XML_TAG_DATA())»;
	                valueSetValuesElement.appendChild(valueElement);
	            }
	            valueSetElement.appendChild(valueSetValuesElement);
«ENDDEFINE»
	            