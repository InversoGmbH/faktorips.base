«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::policycmpt::model»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::policycmpt::template::PolicyCmptAssociationExtension»
«EXTENSION org::faktorips::devtools::stdbuilder::xpand::template::ClassNames»

«DEFINE validate FOR XValidationRule-»
        if (!«methodNameExecRule»(ml, context)) {
            return STOP_VALIDATION;
        }
«ENDDEFINE»

«DEFINE validationRuleMethods FOR XValidationRule-»
	«EXPAND execRuleMethod»
	«EXPAND createMessageFor»
«ENDDEFINE»

«DEFINE execRuleMethod FOR XValidationRule-»
    /**
     * «localizedJDoc("EXEC_RULE", name)»
     * 
     * @restrainedmodifiable
     */
    protected boolean «method(methodNameExecRule, MessageList(), "ml", IValidationContext(), "context")» {
    	«IF specificBusinessFunctions»
  	        if (
  	        «FOREACH specifiedBusinessFunctions AS bf SEPARATOR " || "-»
  	        "«bf»".equals(context.getValue("businessFunction"))
  	        «ENDFOREACH-»
  	        ) {
    	«ENDIF-»
		«IF configured»
	        if («getProductCmptGeneration()».«isValidationRuleActivated(constantNameRuleName)») {
		«ENDIF-»
		«IF !checkValueAgainstValueSetRule-»
		     // begin-user-code
	        «localizedComment("EXEC_RULE_IMPLEMENT_TODO", name)»
	        if (true) {
	            ml.add(«methodNameCreateMessage»(context «FOREACH replacementParameters AS param», null«ENDFOREACH»));«IF needTodoCompleteCallCreateMsg-»
	            «localizedComment("EXEC_RULE_COMPLETE_CALL_CREATE_MSG_TODO",name)»
	            «ENDIF-»
	        }
	        return CONTINUE_VALIDATION;
	        // end-user-code
	    «ELSE-»
	    	«LET checkedAttribute AS this-»
	        if (!«methodNameGetAllowedValuesFor»(context).contains(«methodNameGetter»())) {
	        «ENDLET-»
	            // begin-user-code
	            ml.add(«methodNameCreateMessage»(context «FOREACH replacementParameters AS param», null«ENDFOREACH»));
	            // end-user-code
	        }
      		return CONTINUE_VALIDATION;
        «ENDIF-»
		«IF configured-»
	    }
        return CONTINUE_VALIDATION;
		«ENDIF-»
    	«IF specificBusinessFunctions-»
	    }
        return CONTINUE_VALIDATION;
    	«ENDIF-»
    }
«ENDDEFINE»

«DEFINE createMessageFor FOR XValidationRule-»
    /**
     * «localizedJDoc("CREATE_MESSAGE", name)»
     * 
     * @generated
     */
    protected «Message()» «method(methodNameCreateMessage, createMessageParameters)» {
    	«IF validateAttributes-»
                ObjectProperty[] invalidObjectProperties = new ObjectProperty[] {
                «FOREACH validatedAttributeConstants AS constant SEPARATOR ","-»
                new ObjectProperty(this, «constant»)
                «ENDFOREACH-»
				 };
        «ELSE-»
        «ObjectProperty()» invalidObjectProperties = new «ObjectProperty()»(this);
		«ENDIF-»        
        «IF containsReplacementParameters-»
	        «MsgReplacementParameter()»[] replacementParameters = new «MsgReplacementParameter()»[] {
	        	«FOREACH replacementParameters AS param SEPARATOR ","-»
	                new «MsgReplacementParameter()»("«param»", «param»)
	            «ENDFOREACH-»
	             };
	    «ENDIF-»
        «MessagesHelper()» messageHelper = new «MessagesHelper()»("«validateMessageBundleName»",
                getClass().getClassLoader());
        String msgText = messageHelper.getMessage("«validationMessageKey»", context.getLocale()«FOREACH replacementParameters AS param», «param»«ENDFOREACH»);
        return new «Message()»(«messageCode», msgText, «severityConstant», invalidObjectProperties «IF containsReplacementParameters», replacementParameters«ENDIF»);
    }
«ENDDEFINE»