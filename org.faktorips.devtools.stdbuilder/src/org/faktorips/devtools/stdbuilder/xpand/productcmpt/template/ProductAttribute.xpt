«IMPORT org::faktorips::devtools::stdbuilder»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::productcmpt::model»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::productcmpt::template::ProductAttributeExtension»

«DEFINE constantForPropertyName FOR XProductAttribute-»
	«IF !overwrite-»
		/**
	 	* «localizedJDoc("FIELD_PROPERTY_NAME", name)»
		 «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)»
	 	* @generated
	 	*/
		public final static String «field(constantNamePropertyName)» = "«name»";
	«ENDIF-»
«ENDDEFINE»

«DEFINE memberField FOR XProductAttribute-»
	«IF !overwrite-»
		/**
	 	* «localizedJDoc("FIELD_VALUE", name.toFirstUpper())»
	 	* «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)»
	 	* @generated
	 	*/
    	private «javaClassName» «field(fieldName)»;
    «ENDIF-»
«ENDDEFINE»

«DEFINE getterSetter FOR XProductAttribute-»
	«EXPAND getter-»
	«EXPAND setter-»
	«EXPAND internalSetter-»
«ENDDEFINE»

«DEFINE setDefaultValue FOR XProductAttribute-»	
	«IF (overwrite || !defaultValueNull)-»
		«methodNameSetterInternal»(«defaultValueCode»);
	«ENDIF-»
«ENDDEFINE»

«DEFINE getter FOR XProductAttribute-»
	«IF !overwrite-»
		/**
	 	* «inheritDocOrJavaDocIf(genInterface(), "METHOD_GETVALUE", name, descriptionForJDoc)»
	 	* «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)»
	 	* @generated
	 	*/
		«overrideAnnotationForPublishedMethodOrIf(!genInterface() && published, overwrite)-»
		public «javaClassName» «method(methodNameGetter)»
		«IF genInterface()»;«ELSE-»
		{
			return «getReferenceOrSafeCopyIfNecessary(fieldName)»;
		}
		«ENDIF-»
		«IF multilingual-»
			«EXPAND multilingualGetter-»
		«ENDIF»
	«ENDIF»
«ENDDEFINE»

«DEFINE multilingualGetter FOR XProductAttribute-»
	/**
 	* «inheritDocOrJavaDocIf(genInterface(), "METHOD_GETVALUE_MULTILINGUAL", name, descriptionForJDoc)»
 	* «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)»
 	* @generated
 	*/
	«overrideAnnotationForPublishedMethodOrIf(!genInterface() && published, overwrite)-»
	«IF multiValue-»
		public «List_("String")-» «method(methodNameGetter, Locale(), "locale")»
		«IF genInterface()»;«ELSE-»
		{
	        «List_("String")-» result = new «ArrayList("String")»();
	        for («DefaultInternationalString()» internationalString : «fieldName») {
	            result.add(internationalString.get(locale));
	        }
	        return result;
		}
		«ENDIF-»
	«ELSE-»
		public String «method(methodNameGetter, Locale(), "locale")»
		«IF genInterface()»;«ELSE-»
		{
	        return «fieldName».get(locale);
		}
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE setter FOR XProductAttribute-»
	«IF !overwrite-»
		/**
	 	* «localizedJDoc("METHOD_SETVALUE", name, description)»
	 	* «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)»
	 	* @generated
	 	*/
		public void «method(methodNameSetter, javaClassName, "newValue")»{
			«EXPAND ProductCommons::checkRepositoryModifyable-»
			«methodNameSetterInternal»(«getReferenceOrSafeCopyIfNecessary("newValue")»);
		}
	«ENDIF-»
«ENDDEFINE»

«DEFINE internalSetter FOR XProductAttribute-»
	«IF (!overwrite && !genInterface())-»
		/**
 		* «localizedJDoc("METHOD_SETVALUE_INTERNAL", name, description)»
 		* «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)»
 		* @generated
 		*/
		protected final void «method(methodNameSetterInternal, javaClassName, "newValue")»{
			this.«fieldName» = newValue;
		}
	«ENDIF-»
«ENDDEFINE»

«DEFINE initAttributeFromXML FOR XProductAttribute-»
	«IF !overwrite-»
        configElement = configMap.get("«name»");
        if (configElement != null) {
        «IF multiValue-»
        	«EXPAND initMultiValueAttributeFromXml-»
        «ELSE-»
            «xmlValueType()» value = «ValueToXmlHelper()».«getFromElement("configElement", "\"Value\"")»;
           	this.«fieldName» = «getNewInstanceFromExpression("value", "getRepository()")»;
        «ENDIF-»
        }
    «ENDIF-»
«ENDDEFINE»

«DEFINE initMultiValueAttributeFromXml FOR XProductAttribute-»
	«IF multiValueDirectXmlHandling-»
        «javaClassName» valueList = «MultiValueXmlHelper()».«getMultiValueFromXML("configElement")»;
    «ELSE-»
        «javaClassName» valueList = «newMultiValueInstance»;
    	«LET singleValueOfMultiValueAttribute AS this-»
            «List_("String")» stringList = «MultiValueXmlHelper()».«getValuesFromXML("configElement")»;
            for (String stringValue : stringList) {
                «javaClassName» convertedValue = «getNewInstanceFromExpression("stringValue", "getRepository()")»;
                valueList.add(convertedValue);
            }
        «ENDLET-»
    «ENDIF-»
	this.«fieldName» = valueList;
«ENDDEFINE»

«DEFINE writeAttributeToXML FOR XProductAttribute-»
	«IF !overwrite-»
        attributeElement = element.getOwnerDocument().createElement("AttributeValue");
        attributeElement.setAttribute("attribute", "«name»");
        «IF multiValue-»
            «IF multiValueDirectXmlHandling-»
                «MultiValueXmlHelper()».«addMultiValueToElement("attributeElement", "this." + fieldName)»;
            «ELSE-»
            	«LET singleValueOfMultiValueAttribute AS this-»
			        «List_("String")» stringList«fieldName.toFirstUpper()» = new «ArrayList("String")»();
			        for («javaClassName» value : this.«fieldName») {
			            String stringValue = «getToStringExpression("value")»;
			            stringList«fieldName.toFirstUpper()».add(stringValue);
			        }
			    «ENDLET-»
		        «MultiValueXmlHelper()».«addValuesToElement("attributeElement", "stringList" + fieldName.toFirstUpper())»;
	        «ENDIF-»
	    «ELSE-»
       		«ValueToXmlHelper()».«addToElement(getToStringExpression(fieldName), "attributeElement", "\"Value\"")»;
        «ENDIF-»
        element.appendChild(attributeElement);
	«ENDIF-»
«ENDDEFINE»
