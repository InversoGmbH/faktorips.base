«IMPORT java::util»
«IMPORT org::faktorips::devtools::core::builder::naming»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::productcmpt::model»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::template::CommonGeneratorExtensions»

«DEFINE formulaMethod FOR XMethod-»
    /**
     * {@inheritDoc}
     * 
     * @generated
     */
     «overrideAnnotationForPublishedMethodOrIf(published, overrides)-»
    «modifier» «javaClassName» «method(methodName, methodParameters)» throws «FormulaExecutionException()» {
        return («notPrimitiveJavaClassName»)getFormulaEvaluator().evaluate("«methodName»"«IF methodParameters.size>0», «ENDIF»«FOREACH methodParameters AS parameter SEPARATOR ","»«parameter.name»«ENDFOREACH»);
    }
    «IF overloadsFormula»
    	«LET overloadedFormulaMethod AS this-»
		    /**
		     * {@inheritDoc}
		     * 
		     * @generated
		     */
		    «overrideAnnotation(false)»
		    «modifier» «javaClassName» «method(methodName, methodParameters)» throws «FormulaExecutionException()» {
		        // TODO a delegation to the method computeAnyFormula(int, PaymentMode) needs to be
		        // implemented here
		        // And make sure to disable the regeneration of this method.
		        throw new RuntimeException("Not implemented yet.");
		    }
    	«ENDLET-»
    «ENDIF-»
«ENDDEFINE»

«DEFINE method FOR XMethod-»
    /**
    «IF published-»
     * {@inheritDoc}
     * 
    «ENDIF-»
     * @generated
     */
     «overrideAnnotationForPublishedMethodOrIf(published, overrides)-»
    «modifier» «javaClassName» «method(methodName, methodParameters)» «IF abstract-»
    	;
    «ELSE-»
	    {
	        // TODO implement method!
	        «IF !returnVoid-»
	        	return «defaultReturnValue»;
	        «ENDIF-»
	    }
    «ENDIF-»
«ENDDEFINE»