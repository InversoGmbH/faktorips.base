<?xml version="1.0" encoding="UTF-8"?>
<!--============================================================================================-->
<!--Delegating build script, used by cruisecontrol to build MY_PROJECT_1.-->
<!--Note that the basedir is set to the checked out project-->
<!--============================================================================================-->
<project name="build-faktorips" basedir="checkout/../">
    <!-- global properties -->
	<property name="cvsroot" value=":local:/usr/local/cvsroot"/>
    
	<!--needs to be updated on every buildcall IMPORTANT - DONT TOUCH THIS!!!!-->
    <target name="updateBuildTemplate">
        <property name="cvsBuildmodule" value="org.faktorips.build"/>
        <property name="projectBuildDir" value="checkout/"/>
        <!--checkout/update project-->
        <cvs command="co ${cvsBuildmodule}" dest="${projectBuildDir}" cvsroot="${cvsroot}" quiet="true"/>
    </target>
    
	<!--============================================================================================-->
    <!--project targets. please note: each new target has to be a dependant of "updateBuildTemplate"-->
    <!--============================================================================================-->
	
    <target name="util" depends="updateBuildTemplate" description="builds the 'org.faktorips.util' project">
        <property name="cvsUtilmodule" value="org.faktorips.util"/>
        <property name="projectUtilDir" value="checkout/"/>
        <!--checkout/update project-->
        <cvs command="co ${cvsUtilmodule}" dest="${projectUtilDir}" cvsroot="${cvsroot}" quiet="true"/>
        <!--Call the target that does everything-->
        <ant dir="${projectUtilDir}/${cvsUtilmodule}/build/" antfile="build.xml" target="clean"/>
        <ant dir="${projectUtilDir}/${cvsUtilmodule}/build/" antfile="build.xml" target="buildjar"/>
    </target>
	
    <target name="valuetypes" depends="updateBuildTemplate" description="builds the 'org.faktorips.valuetypes' project">
        <property name="cvsValuetypesmodule" value="org.faktorips.valuetypes"/>
        <property name="projectValuetypesDir" value="checkout/"/>
        <!--checkout/update project-->
        <cvs command="co ${cvsValuetypesmodule}" dest="${projectValuetypesDir}" cvsroot="${cvsroot}" quiet="true"/>
        <!--Call the target that does everything-->
        <ant dir="${projectValuetypesDir}/${cvsValuetypesmodule}/build/" antfile="build.xml" target="clean"/>
        <ant dir="${projectValuetypesDir}/${cvsValuetypesmodule}/build/" antfile="build.xml" target="buildjar"/>
    </target>
	
    <target name="valuetypes.java5" depends="updateBuildTemplate" description="builds the 'org.faktorips.valuetypes.java5' project">
        <property name="cvsValuetypesmodule" value="org.faktorips.valuetypes.java5"/>
        <property name="projectValuetypesDir" value="checkout/"/>
        <!--checkout/update project-->
        <cvs command="co ${cvsValuetypesmodule}" dest="${projectValuetypesDir}" cvsroot="${cvsroot}" quiet="true"/>
        <!--Call the target that does everything-->
        <ant dir="${projectValuetypesDir}/${cvsValuetypesmodule}/build/" antfile="build.xml" target="clean"/>
        <ant dir="${projectValuetypesDir}/${cvsValuetypesmodule}/build/" antfile="build.xml" target="buildjar"/>
    </target>
	
    <target name="dtflcommon" depends="updateBuildTemplate" description="builds the 'org.faktorips.dtflcommon' project">
        <property name="cvsDtflcommonmodule" value="org.faktorips.dtflcommon"/>
        <property name="projectDtflcommonDir" value="checkout/"/>
        <!--checkout/update project-->
        <cvs command="co ${cvsDtflcommonmodule}" dest="${projectDtflcommonDir}" cvsroot="${cvsroot}" quiet="true"/>
        <!--Call the target that does everything-->
        <ant dir="${projectDtflcommonDir}/${cvsDtflcommonmodule}/build/" antfile="build.xml" target="clean"/>
        <ant dir="${projectDtflcommonDir}/${cvsDtflcommonmodule}/build/" antfile="build.xml" target="buildjar"/>
    </target>
	
    <target name="runtime" depends="updateBuildTemplate" description="builds the 'org.faktorips.runtime' project">
        <property name="cvsRuntimemodule" value="org.faktorips.runtime"/>
        <property name="projectRuntimeDir" value="checkout/"/>
        <!--checkout/update project-->
        <cvs command="co ${cvsRuntimemodule}" dest="${projectRuntimeDir}" cvsroot="${cvsroot}" quiet="true"/>
        <!--Call the clean-target-->
        <ant dir="${projectRuntimeDir}/${cvsRuntimemodule}/build/" antfile="build.xml" target="clean"/>
        <!--Call the target that does everything-->
        <ant dir="${projectRuntimeDir}/${cvsRuntimemodule}/build/" antfile="build.xml" target="buildjar"/>
    </target>
	
    <target name="runtime.java5" depends="updateBuildTemplate" description="builds the 'org.faktorips.runtime.java5' project">
        <property name="cvsRuntimemodule" value="org.faktorips.runtime.java5"/>
        <property name="projectRuntimeDir" value="checkout/"/>
        <!--checkout/update project-->
        <cvs command="co ${cvsRuntimemodule}" dest="${projectRuntimeDir}" cvsroot="${cvsroot}" quiet="true"/>
        <!--Call the clean-target-->
        <ant dir="${projectRuntimeDir}/${cvsRuntimemodule}/build/" antfile="build.xml" target="clean"/>
        <!--Call the target that does everything-->
        <ant dir="${projectRuntimeDir}/${cvsRuntimemodule}/build/" antfile="build.xml" target="buildjar"/>
    </target>
	
    <target name="fl" depends="updateBuildTemplate" description="builds the 'org.faktorips.fl' project">
        <property name="cvsFlmodule" value="org.faktorips.fl"/>
        <property name="projectFlDir" value="checkout/"/>
        <!--checkout/update project-->
        <cvs command="co ${cvsFlmodule}" dest="${projectFlDir}" cvsroot="${cvsroot}" quiet="true"/>
        <!--Call the target that does everything-->
        <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="cleanParserSource"/>
        <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="clean"/>
        <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="buildjar"/>
    </target>
    <target name="devtools.ant" depends="updateBuildTemplate" description="builds the 'org.faktorips.devtools.ant' project">
        <property name="cvsAntModule" value="org.faktorips.devtools.ant"/>
        <property name="projectAntDir" value="checkout/"/>
        <!--checkout/update project-->
        <cvs command="co ${cvsAntModule}" dest="${projectAntDir}" cvsroot="${cvsroot}" quiet="true"/>
        <!--Call the target that does everything-->
        <ant dir="${projectAntDir}/${cvsAntModule}/" antfile="scripts/buildExtraJAR.xml" target="clean"/>
        <ant dir="${projectAntDir}/${cvsAntModule}/" antfile="scripts/buildExtraJAR.xml" target="main"/>
    </target>
	
    <target name="devtools.core" depends="updateBuildTemplate" description="builds the 'org.faktorips.devtools.core' project">
        <property name="cvsFlmodule" value="org.faktorips.devtools.core"/>
        <property name="projectFlDir" value="checkout/"/>
        <!--checkout/update project-->
        <cvs command="co ${cvsFlmodule}" dest="${projectFlDir}" cvsroot="${cvsroot}" quiet="true"/>
        <!--Call the target that does everything-->
        <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="clean"/>
        <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="buildjar"/>
    </target>
	
    <target name="devtools.core.ui" depends="updateBuildTemplate" description="builds the 'org.faktorips.devtools.core.ui' project">
        <property name="cvsCoreUimodule" value="org.faktorips.devtools.core.ui"/>
        <property name="projectCoreUiDir" value="checkout/"/>
        <!--checkout/update project-->
        <cvs command="co ${cvsCoreUimodule}" dest="${projectCoreUiDir}" cvsroot="${cvsroot}" quiet="true"/>
        <!--Call the target that does everything-->
        <ant dir="${projectCoreUiDir}/${cvsCoreUimodule}/build/" antfile="build.xml" target="clean"/>
        <ant dir="${projectCoreUiDir}/${cvsCoreUimodule}/build/" antfile="build.xml" target="buildjar"/>
    </target>
	
    <target name="devtools.stdbuilder" depends="updateBuildTemplate" description="builds the 'org.faktorips.devtools.stdbuilder' project">
        <property name="cvsFlmodule" value="org.faktorips.devtools.stdbuilder"/>
        <property name="projectFlDir" value="checkout/"/>
        <!--checkout/update project-->
        <cvs command="co ${cvsFlmodule}" dest="${projectFlDir}" cvsroot="${cvsroot}" quiet="true"/>
        <!--Call the target that does everything-->
        <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="clean"/>
        <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="buildjar"/>
    </target>
	
	
    <!--============================================================================================-->
    <!--project targets for additional customers plugins, e.g. BBV, KQV-->
    <!--============================================================================================-->
    
	<target name="de.bbv.faktorips.runtime" depends="updateBuildTemplate" description="builds the 'de.bbv.faktorips.runtime' project">
        <property name="cvsFlmodule" value="de.bbv.faktorips.runtime"/>
        <property name="projectFlDir" value="checkout/"/>
        <!--checkout/update project-->
        <cvs command="co de.bbv.cm.CMPlugin" dest="${projectFlDir}" cvsroot="${cvsroot}" quiet="true"/>
        <cvs command="co ${cvsFlmodule}" dest="${projectFlDir}" cvsroot="${cvsroot}" quiet="true"/>
        <!--Call the target that does everything-->
        <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="clean"/>
        <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="buildjar"/>
    </target>
		
    <target name="de.bbv.faktorips.devtools" depends="updateBuildTemplate" description="builds the 'de.bbv.faktorips.devtools' project">
        <property name="cvsFlmodule" value="de.bbv.faktorips.devtools"/>
        <property name="projectFlDir" value="checkout/"/>
        <!--checkout/update project-->
        <cvs command="co de.bbv.cm.CMPlugin" dest="${projectFlDir}" cvsroot="${cvsroot}" quiet="true"/>
        <cvs command="co ${cvsFlmodule}" dest="${projectFlDir}" cvsroot="${cvsroot}" quiet="true"/>
        <!--Call the target that does everything-->
        <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="clean"/>
        <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="buildjar"/>
    </target>
	
    <target name="de.qv.faktorips" depends="updateBuildTemplate" description="builds the 'de.qv.faktorips' project">
        <property name="cvsFlmodule" value="de.qv.faktorips"/>
        <property name="projectFlDir" value="checkout/"/>
        <!--checkout/update project-->
        <cvs command="co ${cvsFlmodule}" dest="${projectFlDir}" cvsroot="${cvsroot}" quiet="true"/>
        <!--Call the target that does everything-->
        <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="clean"/>
        <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="buildjar"/>
    </target>
	
    <target name="devtools.msgpm" depends="updateBuildTemplate" description="builds the  project">
        <property name="cvsFlmodule" value="org.faktorips.devtools.msgpm"/>
        <property name="projectFlDir" value="checkout/"/>
        <!--checkout/update project-->
        <delete includeemptydirs="true" dir="${cvsFlmodule}"/>
        <cvs command="co ${cvsFlmodule}" dest="${projectFlDir}" cvsroot="${cvsroot}" quiet="true"/>
        <!--Call the target that does everything-->
        <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="clean"/>
        <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="buildjar"/>
    </target>
	
	
    <!--============================================================================================-->
    <!--targets using the pluginbuilder,-->
    <!--build and test the faktorips feature and runs the integration test-->
    <!--============================================================================================-->
    
	<!--this target build the faktorips features and runs the plugin tests-->
    <target name="pluginbuilder.faktorips" description="builds the complete faktorips feature and executes all junit plugin test">
        <property name="cvsPluginbuildermodule" value="org.faktorips.pluginbuilder"/>
        <property name="projectsRootDir" value="checkout/"/>

    	<!-- checkout faktorips plugins and feature -->
    	<cvs command="co ${cvsPluginbuildermodule}" dest="${projectsRootDir}" cvsroot="${cvsroot}" quiet="true"/>
        <cvs command="co org.faktorips.feature" dest="${projectsRootDir}" cvsroot="${cvsroot}" quiet="true"/>
        <cvs command="co org.faktorips.feature.nls1" dest="${projectsRootDir}" cvsroot="${cvsroot}" quiet="true"/>
        <cvs command="co org.faktorips.nls.devtools.core.nl1" dest="${projectsRootDir}" cvsroot="${cvsroot}" quiet="true"/>
        <cvs command="co org.faktorips.feature.test" dest="${projectsRootDir}" cvsroot="${cvsroot}" quiet="true"/>
        <cvs command="co org.faktorips.devtools.core.test" dest="${projectsRootDir}" cvsroot="${cvsroot}" quiet="true"/>
        <cvs command="co org.faktorips.devtools.core.ui.test" dest="${projectsRootDir}" cvsroot="${cvsroot}" quiet="true"/>
        <cvs command="co org.faktorips.devtools.stdbuilder.test" dest="${projectsRootDir}" cvsroot="${cvsroot}" quiet="true"/>
    	<!-- checkout faktorips uml plugins and feature -->
        <cvs command="co org.faktorips.uml" dest="${projectsRootDir}" cvsroot="${cvsroot}" quiet="true"/>
        <cvs command="co org.faktorips.uml.nl1" dest="${projectsRootDir}" cvsroot="${cvsroot}" quiet="true"/>
        <cvs command="co org.faktorips.uml.test" dest="${projectsRootDir}" cvsroot="${cvsroot}" quiet="true"/>
        <cvs command="co org.faktorips.uml.feature" dest="${projectsRootDir}" cvsroot="${cvsroot}" quiet="true"/>
        <cvs command="co org.faktorips.uml.feature.nls1" dest="${projectsRootDir}" cvsroot="${cvsroot}" quiet="true"/>
    	
    	<antcall inheritall="true" target="-delete.eclipse.configuration.log"/>
    	
        <!-- delegate to the pluginbuilder target -->
    	<ant dir="${projectsRootDir}/org.faktorips.pluginbuilder/" antfile="build.xml" target="main-cc">
            <property name="label" value="HEAD"/>
        </ant>
    </target>
    
	<!-- target to copy cc build artefacts -->
	<target name="copy.artifacts.pluginbuilder.faktorips" description="target to copy cc build artefacts">
		<!-- properties from cc: ccProjectDir (defined in config.xml), cctimestamp (see cc reference)-->

		<defaultexcludes remove="**/._*"/>
			
		<!-- copy eclipse workspace logfile -->
		<!-- problems if the workspace has been created, but there is an error or exception in the workspace-->
		<mkdir dir="${ccProjectDir}/${cctimestamp}"/>
		<copy file="${basedir}/pluginbuilder_tmp/org.faktorips.pluginbuilder/workspace/.metadata/.log" 
			tofile="${ccProjectDir}/${cctimestamp}/eclipse_workspace.log"
		    failonerror="false" verbose="true"/>
		
		<!-- copy eclipse configuration log -->
		<!-- problems if the workspace hasn't been created in case of errors, e.g. feature not found -->
        <antcall inheritall="true" target="-copy.eclipse.configuration.log"/>
		
		<!-- copy autoamted test html report -->
		<copy file="${basedir}/pluginbuilder_tmp/org.faktorips.pluginbuilder/results/testresults/html/testReport_N-${label}.html" 
			todir="${ccProjectDir}/${cctimestamp}"
			failonerror="false" verbose="true"/>
	</target>
	
    <!--this target runs the integrationtest, 
       the target org.faktorips.pluginbuilder must be executed before, this will be handled by cruisecontrol-->
    <target name="pluginbuilder.integrationtest" description="target to run the faktorips integrationtest, using the previous build faktorips feature">
        <property name="projectsRootDir" value="checkout/"/>
        <property name="cvsIntegrationtestmodule" value="org.faktorips.integrationtest"/>
        <property name="projectIntegrationtestDir" value="checkout/"/>
        
    	<!--checkout org.faktorips.integrationtest project-->
        <cvs command="co ${cvsIntegrationtestmodule}" dest="${projectIntegrationtestDir}" cvsroot="${cvsroot}" quiet="true"/>
        
    	<antcall inheritall="true" target="-delete.eclipse.configuration.log"/>
        
    	<!--delegate to the pluginbuilder integrationtest target-->
        <ant dir="${projectsRootDir}/org.faktorips.pluginbuilder/" antfile="build.xml" target="integrationtest"/>
    </target>
	
    <!--this target builds the faktorips release madatory parameter: 
           -Dbuild.version -> the version which will be released -->
    <!--note that if this script is running local without cvs the following parameter must be set:
        optional parameters:
           -DuseCvs=false -> no cvs support 
           -Dall.map=all_copy.map -> copy features and plugins from the workspace instead of using a releas tag with cvs 
           -DprojectsRootDir -> the root dir of all plugin projects
           -DbaseDir -> the parent dir of the dir specified in projectsRootDir
         additionaly make sure that the build_host_<hostname>.properies exists in the pluginbuilder project-->
    <target name="release.faktorips" 
    	description="release build for an specified faktorips release version, builds the complete feature, executes the junit plugin tests and distributes the result to the update site and download directory">
        <property name="useCvs" value="true"/>
        <property name="projectsRootDir" value="checkout_release/"/>
        <property name="downloadDir" value="/var/www/localhost/htdocs/update.faktorzehn.org/faktorips/downloads"/>
    	<property name="buildDirectory" value="${basedir}/pluginbuilder_release_tmp/org.faktorips.pluginbuilder_release"/>
        <!-- download zip file names -->        
    	<property name="faktoripsReleaseDownloadZipPath" value="${downloadDir}/faktorips_${build.version}.zip"/>
        <property name="faktoripsNls1ReleaseDownloadZipPath" value="${downloadDir}/faktorips.nls1_${build.version}.zip"/>
        <property name="release.properties" value="${projectsRootDir}/org.faktorips.pluginbuilder/releases/${build.version}.properties"/>
    	
    	<condition property="isUseCvs" value="true">
            <equals arg1="${useCvs}" arg2="true"/>
        </condition>
    	
        <!-- TODO create plugin builder property file using build.version 
             cvs tag depending on the build.version -->

    	<!--checkout pluginbuilder, build project -->
    	<antcall inheritall="true" target="-checkout.pluginbuilder"/>
    	<antcall inheritall="true" target="-checkout.build"/>
    	
    	<!--asserts-->
        <!--1. check if the build.version property is given-->
        <fail unless="build.version" message="Please specify the build.version, e.g. ant ... -Dbuild.version=2.2.0.rfinal"/>
    	<!--2. check if the build.verion property file exists-->
        <available type="file" file="${release.properties}" property="releasePropertiesExists"/>
        <fail message="Could not find ${build.version}.properties in ${projectsRootDir}/org.faktorips.pluginbuilder/releases/" unless="releasePropertiesExists"/>
    	<!--3. check previous release build with same target, check file exists in download dir -->
        <fail message="Release zip already exists: ${faktoripsReleaseDownloadZipPath}">
             <condition><available file="${faktoripsReleaseDownloadZipPath}"/></condition>
         </fail>
        <fail message="Release zip already exists: ${faktoripsNls1ReleaseDownloadZipPath}">
             <condition><available file="${faktoripsNls1ReleaseDownloadZipPath}"/></condition>
         </fail>

    	<!-- checkout pluginbuilder with correct build.version -->
    	<antcall inheritall="true" target="-checkout.pluginbuilder.build.version"/>
        
        <!--checkout updatesite-->
    	<antcall inheritall="true" target="-checkout.updatesite"/>
    	
        <!-- check if test should be run or not, property 'pluginbuilder.is.runtests' could be overwritten -->
        <loadproperties srcfile="${release.properties}">
          <filterchain>
            <linecontains>
              <contains value="pluginbuilder.is.runtests"/>
            </linecontains>
          </filterchain>
        </loadproperties>
    	<echo message="pluginbuilder.is.runtests: ${pluginbuilder.is.runtests}"/>

        <!--build release unsing pluginbuilder main target-->
    	<ant dir="${projectsRootDir}/org.faktorips.pluginbuilder/" antfile="build.xml" target="main">
            <property name="build.version" value="${build.version}"/>
            <property name="buildDirectory" value="${buildDirectory}"/>
            <property name="pluginbuilder.is.runtests" value="${pluginbuilder.is.runtests}"/>
        </ant>
    	
        <!--copy zipped features into the faktorips download directory, fails if files already exists-->
    	<antcall inheritall="true" target="-copy.updatesite.to.download.dir"/>

    	<!--install the features on updatesite-->
        <!--1. generate a new site.xml on the updatesite, including all previous and new feature versions-->
        <ant dir="${projectsRootDir}/org.faktorips.pluginbuilder/build-files" antfile="postBuild.xml" target="-createNightlyBuildSiteXml">
            <property name="siteXmlFile" value="${basedir}/${projectsRootDir}/org.faktorips.updatesite/site_tmp.xml"/>
            <property name="pluginbuilder.features" value="org.faktorips.feature,org.faktorips.feature.nls1"/>
            <property name="buildDirectory" value="${buildDirectory}"/>
            <property name="buildHome" value="${basedir}/${projectsRootDir}/org.faktorips.pluginbuilder"/>
            <property name="updateSiteCategoryName" value="Faktor-IPS ${build.version}"/>
            <property name="updateSiteCategoryLabel" value="Faktor-IPS ${build.version}"/>
            <property name="updateSiteDescription" value="FaktorIPS update site"/>
            <property name="updateSiteUrl" value="http://update.faktorzehn.org/faktorips"/>
        </ant>
        <!--2. copy all features and plugins to the updatesite project-->
    	<antcall inheritall="true" target="-copy.updatesite.to.updatesite.project"/>

        <!--3. merge the generated site.xml with the previous site.xml as new site.xml-->
        <antcall inheritall="true" target="-merge.updatesite.xml"/>
    
    	<!--4. checkin updatesite, only site.xml will be commited, TODO features and plugin jars are not 'add' to cvs-->
        <antcall inheritall="true" target="-checkin.updatesite"/>
    	
    	<!-- TODO 5. checkout on faktorips updatesite website directory -->
    	<!--
    	<antcall inheritall="true" target="-checkout.updatesite.on.faktorips.org"/>
    	-->

    	<!--5. copy to faktorips updatesite website directory -->
    	<antcall inheritall="true" target="-copy.updatesite.to.faktorips.org"/>
    	
    </target>
	
    <!--helper targets-->
    <target name="-checkout.pluginbuilder" if="isUseCvs">
        <cvs command="co org.faktorips.pluginbuilder" dest="${projectsRootDir}" cvsroot="${cvsroot}" quiet="true"/>
    </target>
    <target name="-checkout.pluginbuilder.build.version" if="isUseCvs">
    	<loadproperties srcfile="${release.properties}">
          <filterchain>
            <linecontains>
              <contains value="fetchTag"/>
            </linecontains>
          </filterchain>
    	</loadproperties>
        <delete includeemptydirs="true" dir="${projectsRootDir}/org.faktorips.pluginbuilder"/>
    	<cvs command="co -r ${fetchTag} org.faktorips.pluginbuilder" dest="${projectsRootDir}" cvsroot="${cvsroot}" quiet="true"/>
    </target>
    <target name="-checkout.build" if="isUseCvs">
        <cvs command="co org.faktorips.build" dest="${projectsRootDir}" cvsroot="${cvsroot}" quiet="true"/>
    </target>
    <target name="-checkout.updatesite" if="isUseCvs">
        <cvs command="co org.faktorips.updatesite" dest="${projectsRootDir}" cvsroot="${cvsroot}" quiet="true"/>
    </target>
    <target name="-checkin.updatesite" if="isUseCvs">
    	<cvs command="commit -m 'release build: ${build.version}'" 
        	package="org.faktorips.updatesite" dest="${projectsRootDir}" cvsroot="${cvsroot}" quiet="true"/>
        <!-- 
        <cvs command="add -m 'release build: ${build.version}' " 
        	package="org.faktorips.updatesite" dest="${projectsRootDir}" cvsroot="${cvsroot}" quiet="true"/>
        -->
    </target>
    <target name="-checkout.updatesite.on.faktorips.org" if="isUseCvs">
    	<property name="updatesite.path" value="/var/www/localhost/htdocs/update.faktorzehn.org/faktorips/"/>
    	<echo message="update faktorips.org updatesite: ${updatesite.path}"/>
    	<property name="faktorips.org.updatesite.dir" value="${updatesite.path}" />
    	<cvs command="co org.faktorips.updatesite" dest="${faktorips.org.updatesite.dir}" cvsroot="${cvsroot}" quiet="true"/>
    </target>
    <target name="-copy.updatesite.to.download.dir">
    	<!-- unzip, add eclipse folder and zip in download dir -->
    	<property name="zip.dir" value="${buildDirectory}/zip_tmp/eclipse"/>

    	<!-- eclipse feature -->
    	<mkdir dir="${zip.dir}"/>
    	<unzip src="${buildDirectory}/results/org.faktorips.feature-${build.version}.zip" dest="${buildDirectory}/zip_tmp/eclipse"></unzip>
    	<zip destfile="${faktoripsReleaseDownloadZipPath}" basedir="${zip.dir}/.." />

    	<delete includeemptydirs="true" dir="${zip.dir}"/>
        
    	<!-- eclipse nls1 feature -->
    	<mkdir dir="${zip.dir}"/>
        <unzip src="${buildDirectory}/results/org.faktorips.feature.nls1-${build.version}.zip" dest="${buildDirectory}/zip_tmp/eclipse"></unzip>
        <zip destfile="${faktoripsNls1ReleaseDownloadZipPath}" basedir="${zip.dir}/.." />
    </target>
    <target name="-copy.updatesite.to.updatesite.project">
        <copy todir="${projectsRootDir}/org.faktorips.updatesite/plugins" overwrite="false" verbose="true">
            <fileset dir="${buildDirectory}/updateSite/plugins" includes="*.jar"/>
        </copy>
        <copy todir="${projectsRootDir}/org.faktorips.updatesite/features" overwrite="false" verbose="true">
            <fileset dir="${buildDirectory}/updateSite/features" includes="*.jar"/>
        </copy>
    </target>
    <target name="-copy.updatesite.to.faktorips.org">
    	<property name="updatesite.path" value="/var/www/localhost/htdocs/update.faktorzehn.org/faktorips/"/>
        <copy todir="${updatesite.path}/plugins" overwrite="true" verbose="true">
            <fileset dir="${buildDirectory}/updateSite/plugins" includes="*.jar"/>
        </copy>
        <copy todir="${updatesite.path}/features" overwrite="true" verbose="true">
            <fileset dir="${buildDirectory}/updateSite/features" includes="*.jar"/>
        </copy>
    </target>
    <target name="-copy.eclipse.configuration.log">
        <copy todir="${ccProjectDir}/${cctimestamp}" failonerror="false" verbose="false">
            <fileset dir="${basedir}/pluginbuilder_tmp/pluginbuilder_eclipse/eclipse/configuration" includes="*.log"/>
        </copy>
    </target>
    <target name="-delete.eclipse.configuration.log">
    	<delete failonerror="false" verbose="false" quiet="true">
    		<fileset dir="${basedir}/pluginbuilder_tmp/pluginbuilder_eclipse/eclipse/configuration" includes="*.log"/>
    	</delete>
    </target>
    
    <target name="-merge.updatesite.xml">
        <xslt in="${projectsRootDir}/org.faktorips.updatesite/site.xml" out="${projectsRootDir}/org.faktorips.updatesite/site_merge.xml" style="${projectsRootDir}/org.faktorips.build/cruisecontrol_config/xsl/mergeupdatesite.xsl" force="true">
            <outputproperty name="method" value="xml"/>
            <outputproperty name="encoding" value="UTF-8"/>
            <outputproperty name="indent" value="yes"/>
            <param name="doc2" expression="${basedir}/${projectsRootDir}/org.faktorips.updatesite/site_tmp.xml"/>
        </xslt>
        <delete file="${projectsRootDir}/org.faktorips.updatesite/site_tmp.xml" verbose="false"/>
        <copy file="${projectsRootDir}/org.faktorips.updatesite/site_merge.xml" tofile="${projectsRootDir}/org.faktorips.updatesite/site.xml" verbose="false" overwrite="true"/>
        <delete file="${projectsRootDir}/org.faktorips.updatesite/site_merge.xml" verbose="false"/>
    </target>
</project>