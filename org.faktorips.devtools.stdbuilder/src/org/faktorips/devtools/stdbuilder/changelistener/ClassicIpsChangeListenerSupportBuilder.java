/***************************************************************************************************
 * Copyright (c) 2005-2008 Faktor Zehn AG und andere.
 * 
 * Alle Rechte vorbehalten.
 * 
 * Dieses Programm und alle mitgelieferten Sachen (Dokumentationen, Beispiele, Konfigurationen,
 * etc.) duerfen nur unter den Bedingungen der Faktor-Zehn-Community Lizenzvereinbarung - Version
 * 0.1 (vor Gruendung Community) genutzt werden, die Bestandteil der Auslieferung ist und auch unter
 * http://www.faktorzehn.org/f10-org:lizenzen:community eingesehen werden kann.
 * 
 * Mitwirkende: Faktor Zehn AG - initial API and implementation - http://www.faktorzehn.de
 * 
 **************************************************************************************************/

package org.faktorips.devtools.stdbuilder.changelistener;

import java.lang.reflect.Modifier;

import org.eclipse.core.runtime.CoreException;
import org.faktorips.codegen.JavaCodeFragmentBuilder;
import org.faktorips.devtools.core.builder.JavaSourceFileBuilder;
import org.faktorips.devtools.core.model.ipsproject.IIpsArtefactBuilderSet;
import org.faktorips.devtools.core.model.ipsproject.IIpsProject;
import org.faktorips.runtime.IModelObjectChangedEvent;
import org.faktorips.runtime.internal.MethodNames;
import org.faktorips.runtime.internal.ModelObjectChangedEvent;
import org.faktorips.util.LocalizedStringsSet;

/**
 * Implementation of <code>IChangeListenerSupportBuilder</code> creating change listener support
 * alike to the code generated by Faktor IPS up to version 2.
 * 
 * @author Daniel Hohenberger
 */
public class ClassicIpsChangeListenerSupportBuilder extends JavaSourceFileBuilder implements
IChangeListenerSupportBuilder {

    public ClassicIpsChangeListenerSupportBuilder(IIpsArtefactBuilderSet builderSet, String kindId) {
        super(builderSet, kindId, new LocalizedStringsSet(ClassicIpsChangeListenerSupportBuilder.class));
    }

    /**
     * 
     * {@inheritDoc}
     */
    public void generateChangeListenerSupportBeforeChange(JavaCodeFragmentBuilder methodsBuilder,
            ChangeEventType eventType,
            String fieldType,
            String fieldName,
            String paramName,
            String fieldNameConstant) {
        // nothing to do
    }

    /**
     * {@inheritDoc}
     */
    public void generateChangeListenerSupportAfterChange(JavaCodeFragmentBuilder methodsBuilder,
            ChangeEventType eventType,
            String fieldType,
            String fieldName,
            String paramName, String fieldNameConstant) {
        methodsBuilder.appendln("if (" + MethodNames.EXISTS_CHANGE_LISTENER_TO_BE_INFORMED + "()) {");
        methodsBuilder.append(MethodNames.NOTIFIY_CHANGE_LISTENERS + "(new ");
        methodsBuilder.appendClassName(ModelObjectChangedEvent.class);
        methodsBuilder.append("(this, ");
        methodsBuilder.appendClassName(IModelObjectChangedEvent.class.getName());
        methodsBuilder.append('.');
        methodsBuilder.append(eventType.getName());
        methodsBuilder.append(", ");
        methodsBuilder.appendQuoted(fieldName);
        if (paramName != null && !eventType.equals(ChangeEventType.MUTABLE_PROPERTY_CHANGED)) {
            methodsBuilder.append(", ");
            methodsBuilder.append(paramName);
        }
        methodsBuilder.appendln("));");
        methodsBuilder.appendln("}");
    }

    /**
     * {@inheritDoc}
     */
    public void generateChangeListenerMethods(JavaCodeFragmentBuilder methodBuilder,
            String parentModelObjectName,
            boolean generateParentNotification) {
        generateMethodNotifyChangeListeners(methodBuilder, parentModelObjectName);
        generateMethodExistsChangeListenerToBeInformed(methodBuilder, parentModelObjectName);
    }

    /**
     * <pre>
     * public void notifyChangeListeners(ModelObjectChangedEvent event) {
     *     super.notifyChangeListeners(event);
     *     if (parentModelObject != null) {
     *         parentModelObject.notifyChangeListeners(event);
     *     }
     * }
     * </pre>
     */
    public void generateMethodNotifyChangeListeners(JavaCodeFragmentBuilder methodBuilder, String parentModelObjectName) {
        methodBuilder.javaDoc(getJavaDocCommentForOverriddenMethod(), ANNOTATION_GENERATED);
        methodBuilder.methodBegin(Modifier.PUBLIC, Void.TYPE, MethodNames.NOTIFIY_CHANGE_LISTENERS,
                new String[] { "event" }, new Class[] { IModelObjectChangedEvent.class });

        methodBuilder.appendln("super." + MethodNames.NOTIFIY_CHANGE_LISTENERS + "(event);");
        methodBuilder.appendln("if (" + parentModelObjectName + "!=null) {");
        methodBuilder.appendln(parentModelObjectName + "." + MethodNames.NOTIFIY_CHANGE_LISTENERS + "(event);");
        methodBuilder.appendln("}");
        methodBuilder.methodEnd();
    }

    /**
     * 
     * {@inheritDoc}
     */
    protected String generate() throws CoreException {
        return null; // nothing to do as we don't build our own classes.
    }

    /**
     * 
     * {@inheritDoc}
     */
    public void beforeBuildProcess(IIpsProject project, int buildKind) throws CoreException {
        super.beforeBuildProcess(project, buildKind);
        // TODO generate common base classes
    }


    /**
     * <pre>
     * protected boolean existsChangeListenerToBeInformed() {
     *     if (super.existsChangeListenerToBeInformed()) {
     *         return true;
     *     }
     *     if (parentModelObject == null) {
     *         return false;
     *     }
     *     return parentModelObject.existsChangeListenerToBeInformed();
     * }
     * </pre>
     */
    private void generateMethodExistsChangeListenerToBeInformed(JavaCodeFragmentBuilder methodBuilder,
            String parentModelObjectName) {
        methodBuilder.javaDoc(getJavaDocCommentForOverriddenMethod(), ANNOTATION_GENERATED);
        methodBuilder.methodBegin(Modifier.PUBLIC, Boolean.TYPE, MethodNames.EXISTS_CHANGE_LISTENER_TO_BE_INFORMED,
                new String[] {}, new Class[] {});
        methodBuilder.appendln("if (super." + MethodNames.EXISTS_CHANGE_LISTENER_TO_BE_INFORMED + "()) {");
        methodBuilder.appendln("return true;");
        methodBuilder.appendln("}");
        methodBuilder.appendln("if (" + parentModelObjectName + "==null) {");
        methodBuilder.appendln("return false;");
        methodBuilder.appendln("}");
        methodBuilder.appendln("return " + parentModelObjectName + "."
                + MethodNames.EXISTS_CHANGE_LISTENER_TO_BE_INFORMED + "();");
        methodBuilder.methodEnd();
    }

    public void generateChangeListenerConstants(JavaCodeFragmentBuilder builder) {
        // nothing to do
    }

    public String getNotificationSupportInterfaceName() {
        // TODO Auto-generated method stub
        return null;
    }

}
