«IMPORT org::faktorips::devtools::stdbuilder»
«IMPORT org::faktorips::devtools::core::builder::naming»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::policycmpt::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::policycmptbuilder::model»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::template::CommonGeneratorExtensions»
«EXTENSION org::faktorips::devtools::stdbuilder::xpand::policycmptbuilder::template::PolicyCmptCreateMethodNames»

«REM» Methods to initialize a builder. 
If a published interface is generated, this method is generated in the builder factory class. If not, this method should be in the policy class and static.«ENDREM»
«DEFINE with(boolean static) FOR XPolicyBuilder»
	
	«REM» new policy, no repository «ENDREM»
	/**
	* «localizedJDoc("METHOD_WITH_NO_ARG", implClassName)»
	*
	* @generated
	*/
	public «IF static-»static«ENDIF-» «implClassName» «builder()» {
		return «implClassName».«from("new " + typeImplClassName + "()", "null")»;
	}

	«REM» new policy, with repository «ENDREM»
	/**
	* «localizedJDoc("METHOD_WITH_NO_ARG", implClassName)»
	* «localizedJDoc("METHOD_WITH_REPO")»
	*
	* @generated
	*/
	public «IF static-»static«ENDIF-» «implClassName» «builder(IRuntimeRepository() + " runtimeRepository")» {
		return «implClassName».«from("new " + typeImplClassName + "()", "runtimeRepository")»;
	}	
	
	«IF configured-»
		/**
		* «localizedJDoc("METHOD_WITH_PROD", implClassName)»
		*
		* @generated
		*/
		public «IF static-»static«ENDIF-» «implClassName» «builder(productCmptClassName + " productCmpt")» {
			return «implClassName».«from("new " + typeImplClassName + "(productCmpt)", "productCmpt." + getRepository())»;
		}
		
		«REM» policy from repository with id «ENDREM»
		/**
		* «localizedJDoc("METHOD_WITH_PROD_ID", implClassName)»
		«IF productCmptNode.changingOverTime-»* «localizedJDoc("METHOD_WITH_PROD_ID_GEN")»«ENDIF-»
		*
		* @generated
		*/	
		public «IF static-»static«ENDIF-» «implClassName» «builder(IRuntimeRepository() + " runtimeRepository", "String productCmptId")» {
			«productCmptClassName» product = («productCmptClassName») runtimeRepository.«getProductComponent("productCmptId")»;
			if(product == null){
				throw new «RuntimeException()»("«localizedText("EXCEPTION_NO_PRODCMPT_FOUND")»");
			} else{
				«IF productCmptNode.changingOverTime-»
					«productCmptGenerationNode.implClassName» generation = («productCmptGenerationNode.implClassName») product.«getLatestProductComponentGeneration()»;
					if(generation == null) {
							throw new «RuntimeException()»("«localizedText("EXCEPTION_NO_GENERATION_FOUND")»");
					}
					«typeImplClassName» policy = «castToImplementation(typeImplClassName)» generation.create«policyName»();	
				«ELSE-»
					«typeImplClassName» policy = «castToImplementation(typeImplClassName)» product.create«policyName»();
				«ENDIF-»
				
				policy.«initialize()»;
				return «implClassName».«from("policy", "runtimeRepository")»;
			}		
		}
		
		«IF productCmptNode.changingOverTime-»
		«REM» policy from repository with id and validity date«ENDREM»
		/**
		* «localizedJDoc("METHOD_WITH_PROD_ID_DATE", implClassName)»
		*
		* @generated
		*/
		public «IF static-»static«ENDIF-» «implClassName» «builder(IRuntimeRepository() + " runtimeRepository", "String productCmptId", Calendar() + " validityDate")» {
			«productCmptClassName» product = («productCmptClassName») runtimeRepository.«getProductComponent("productCmptId")»;
			if(product == null) {
				throw new «RuntimeException()»("«localizedText("EXCEPTION_NO_PRODCMPT_FOUND")»");
			}
			«productCmptGenerationNode.implClassName» generation = («productCmptGenerationNode.implClassName») product.«getGenerationBase("validityDate")»;
			if(generation == null) {
				throw new «RuntimeException()»("«localizedText("EXCEPTION_NO_GENERATION_FOUND")»");
			}
			«typeImplClassName» policy = «castToImplementation(typeImplClassName)» generation.create«policyName»();	
			policy.«initialize()»;
			return «implClassName».«from("policy", "runtimeRepository")»;
		}
		«ENDIF-»		
	«ENDIF-»		
«ENDDEFINE»

«REM»Methods to get a builder from a policy«ENDREM»
«DEFINE builder FOR XPolicyBuilder-»
	/**
	* «localizedJDoc("METHOD_BUILDER", name)»
	*
	* @generated
	*/
	«overrideAnnotationForPublishedMethodImplementationOr(hasNonAbstractSupertype())-»
	public «implClassName» «modify()» «IF genInterface()-»;
	«ELSE-»
		{
			«IF configured-»
				return «implClassName».«from("this", getProductComponent() + "." + getRepository())»;
			«ELSE-»
				return «implClassName».«from("this", "null")»;
			«ENDIF-»
		}
	«ENDIF»

	/**
	* «localizedJDoc("METHOD_BUILDER_REPO",name)»
	*
	* @generated
	*/
	«overrideAnnotationForPublishedMethodImplementationOr(hasNonAbstractSupertype())-»
	public «implClassName» «modify(IRuntimeRepository() + " runtimeRepository")» «IF genInterface()-»;
	«ELSE-»
		{
			return «implClassName».«from("this", "runtimeRepository")»;
		}	
	«ENDIF-»
«ENDDEFINE»
