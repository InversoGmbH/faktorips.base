«IMPORT org::faktorips::devtools::stdbuilder»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::runtime»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::policycmpt::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::productcmpt::template»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::policycmpt::template::PolicyCmptAttributeExtension»

«DEFINE field FOR XPolicyAssociation-»
	«IF !derivedUnion-»
	    /**
	     * «localizedJDoc("FIELD_ASSOCIATION", name.toFirstUpper())»
	     * 
	     * @generated
	     */
		«IF oneToMany-»
			private «List_(targetInterfaceName)» «field(fieldName)»  = new «ArrayList(targetInterfaceName)»();
		«ELSE-»
			private «targetClassName» «field(fieldName)» = null;
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE methods FOR XPolicyAssociation-»
	«EXPAND ProductAssociation::getNumOf-»
	«EXPAND contains-»
	«EXPAND getters-»
	«EXPAND setterMethodsForToOne-»
	«EXPAND newMethods-»
	«EXPAND add-»
	«EXPAND remove-»
«ENDDEFINE»

«DEFINE contains FOR XPolicyAssociation-»
	«IF oneToMany-»
	    /**
	     * {@inheritDoc}
	     * 
	     * @generated
	     */
	    «overrideAnnotation(true)»
	    public boolean «method(methodNameContains, targetInterfaceName, "objectToTest")» {
	        return «fieldName».contains(objectToTest);
	    }
    «ENDIF»
«ENDDEFINE»

«DEFINE getters FOR XPolicyAssociation-»
	«IF oneToMany»
	    /**
	     * {@inheritDoc}
	     * 
	     * @generated
	     */
	    «overrideAnnotation(true)»
	    public «List_(targetInterfaceName)» «method(methodNameGetter)» {
	        return «Collections()».unmodifiableList(«fieldName»);
	    }
	
	    /**
	     * {@inheritDoc}
	     * 
	     * @generated
	     */
	    «overrideAnnotation(true)»
	    public «targetInterfaceName» «method(methodNameGetSingle, "int", "index")» {
	        return «fieldName».get(index);
	    }
    «ELSE»
	    /**
	     * {@inheritDoc}
	     * 
	     * @generated
	     */
	    «overrideAnnotation(true)»
	    public «targetInterfaceName» «method(methodNameGetSingle)» {
	        return «fieldName»;
	    }
    «ENDIF»
«ENDDEFINE»
«DEFINE setterMethodsForToOne FOR XPolicyAssociation-»
	«IF !oneToMany-»
	    /**
	     * {@inheritDoc}
	     * 
	     * @generated
	     */
	    «overrideAnnotation(true)»
	    public void «method(methodNameSetter, targetInterfaceName, "newObject")» {
			«EXPAND PropertyChangeSupport::storeOldValue-»
	        «methodNameSetInternal»(newObject);
			«EXPAND PropertyChangeSupport::notify-»
	    }

	    /**
	     * «localizedJDoc("METHOD_SET_OBJECT_INTERNAL", name.toFirstUpper())»
	     * 
	     * @generated
	     */
	    public void «method(methodNameSetInternal, targetInterfaceName, "newObject")»{
	        if («fieldName» != null) {
	            «fieldName».«methodNameInverseAssociationSetInternal»(null);
	        }
	        if (newObject != null) {
	            «EXPAND newObject».«methodNameInverseAssociationSetInternal»(this);
	        }
	        «fieldName» = «EXPAND castToImplementationIfNecessary» newObject;
	    }
    «ENDIF»
«ENDDEFINE»

«DEFINE newObject FOR XPolicyAssociation-»
	«IF generatingPublishedInterfaces-»
	(«EXPAND castToImplementationIfNecessary»newObject)«ELSE-»
	newObject«ENDIF-»
«ENDDEFINE»

«DEFINE castToImplementationIfNecessary FOR XPolicyAssociation-»
	«IF generatingPublishedInterfaces-»(«targetClassName»)«ENDIF-»
«ENDDEFINE»

«DEFINE newMethods FOR XPolicyAssociation-»
	«IF productRelevant-»
	    /**
	     * {@inheritDoc}
	     * 
	     * @generated
	     */
		«overrideAnnotation(true)»
	    public «targetInterfaceName» «method(methodNameNew)»{
	        «targetClassName» «variableNameNewInstance» = new «targetClassName»();
			«EXPAND addOrSetNewInstance-»
	        «variableNameNewInstance».«initialize()»;
	        «EXPAND PropertyChangeSupport::notifyNewAssociation(variableNameNewInstance)-»
	        return «variableNameNewInstance»;
	    }
	
	    /**
	     * {@inheritDoc}
	     * 
	     * @generated
	     */
		«overrideAnnotation(true)»
	    public «targetInterfaceName» «method(methodNameNew, targetProductCmptInterfaceName, targetProductCmptVariableName)» {
	        if («targetProductCmptVariableName» == null) {
	            return «methodNameNew»();
	        }
	        «targetInterfaceName» «variableNameNewInstance» = «targetProductCmptVariableName».«methodNameCreatePolicyCmptForTargetProductCmpt»(); 
			«EXPAND addOrSetNewInstance-»
	        «variableNameNewInstance».«initialize()»;
	        «EXPAND PropertyChangeSupport::notifyNewAssociation(variableNameNewInstance)-»
	        return «variableNameNewInstance»;
	    }
    «ENDIF-»
«ENDDEFINE»

«DEFINE addOrSetNewInstance FOR XPolicyAssociation-»
	«IF oneToMany-»
       	«methodNameAddInternal»(«variableNameNewInstance»);
    «ELSE-»
       	«methodNameSetInternal»(«variableNameNewInstance»);
    «ENDIF-»
«ENDDEFINE»

«DEFINE add FOR XPolicyAssociation-»
	«IF oneToMany-»
	    /**
	     * {@inheritDoc}
	     * 
	     * @generated
	     */
		«overrideAnnotation(true)»
	    public void «method(methodNameAdd, targetInterfaceName, "objectToAdd")»{
	        «methodNameAddInternal»(objectToAdd);
	        «EXPAND PropertyChangeSupport::notifyNewAssociation("objectToAdd")-»
	    }
	
	    /**
	     * «localizedJDoc("METHOD_ADD_OBJECT_INTERNAL", name)»
	     * 
	     * @generated
	     */
	    public void «method(methodNameAddInternal, targetInterfaceName, "objectToAdd")»{
	        if (objectToAdd == null) {
	            throw new NullPointerException("Can't add null to association «name» of " + this);
	        }
	        if («fieldName».contains(objectToAdd)) {
	            return;
	        }
	        «fieldName».add(objectToAdd);
	        «IF hasInverseAssociation()-»
		        if (!objectToAdd.«methodNameInverseAssociationContains»(this)) {
		            objectToAdd.«methodNameInverseAssociationAdd»(this);
		        }
		   	«ENDIF-»
	    }
    «ENDIF-»
«ENDDEFINE»

«DEFINE remove FOR XPolicyAssociation-»
	«IF oneToMany-»
	    /**
	     * {@inheritDoc}
	     * 
	     * @generated
	     */
		«overrideAnnotation(true)»
	    public void «method(methodNameRemove, targetInterfaceName, "objectToRemove")»{
	        if (objectToRemove == null) {
	            return;
	        }
	        if («fieldName».remove(objectToRemove)) {
	        	«EXPAND detachRemovedObject-»
	        }
	        «EXPAND PropertyChangeSupport::notifyRemovedAssociation("objectToRemove")-»
	    }
    «ENDIF-»
«ENDDEFINE»

«DEFINE detachRemovedObject FOR XPolicyAssociation-»
	«IF composition-»
		«IF hasInverseAssociation()-»
			((«targetClassName»)objectToRemove).«methodNameInverseAssociationSetInternal»(null);
		«ENDIF-»
	«ELSE-»
		«IF hasInverseAssociation() && inverseAssociation.oneToMany-»
			objectToRemove.«methodNameInverseAssociationRemove»(this);
		«ELSE-»
			((«targetClassName»)objectToRemove).«methodNameInverseAssociationSetInternal»(null);
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»