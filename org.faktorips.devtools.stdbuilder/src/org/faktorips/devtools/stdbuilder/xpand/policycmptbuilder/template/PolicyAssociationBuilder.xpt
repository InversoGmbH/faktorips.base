«IMPORT org::faktorips::devtools::core::builder::naming»
«IMPORT org::faktorips::devtools::stdbuilder»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::policycmpt::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::policycmptbuilder::model»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::template::CommonGeneratorExtensions»
«EXTENSION org::faktorips::devtools::stdbuilder::xpand::policycmptbuilder::template::PolicyBuilderMethodNames»


«DEFINE main FOR XPolicyBuilder»
	«IF builderAssociations.size > 0-»
		/**
		* «localizedJDoc("CLASS_BUILDER")»
		*
		* @generated
		*/
		public static class AssociationBuilder «EXPAND extendSuperclassAssociation» {
		
			«EXPAND policyBuilderField»
			
			«EXPAND constructorWithPolicyBuilder(false)»
			
			«EXPAND associationEvaluation(this) FOREACH builderAssociations»

			«EXPAND get»
			
			«EXPAND getRepository»
		}
	«ENDIF-»

	«IF builderAssociations.size > 0 || superBuilderAssociations.size > 0 -»
		/**
		* «localizedJDoc("CLASS_BUILDER_MULTI")»
		*
		* @generated
		*/
		public static class AssociationsBuilder «EXPAND extendSuperclassAssociations»{
			
			«EXPAND policyBuilderField»
				
			«EXPAND constructorWithPolicyBuilder(true)»
	
			«EXPAND associationsEvaluation(this, false) FOREACH builderAssociations»
			«REM»for inherited associations«ENDREM»
			«EXPAND associationsEvaluation(this, true) FOREACH superBuilderAssociations»
	
			/**
			* @generated
			*/
			«overrideAnnotationIf(hasSuperAssociationBuilder())-»
			public «implClassName» done() {
				«IF hasSuperAssociationBuilder()-»
					return («implClassName») super.done();
				«ELSE-»
					return policyBuilder;
				«ENDIF-»
			}
	
			«EXPAND get»
				
			«EXPAND getRepository»
		}
	«ENDIF»
«ENDDEFINE»

«REM» Adds the extension of the super class of the policy «ENDREM»
«DEFINE extendSuperclassAssociation FOR XPolicyBuilder-»
	«IF hasSuperAssociationBuilder()-»
		extends «superBuilderForAssociationBuilder.implClassName».AssociationBuilder
	«ENDIF-»
«ENDDEFINE»

«REM» Adds the extension of the super class of the policy «ENDREM»
«DEFINE extendSuperclassAssociations FOR XPolicyBuilder-»
	«IF hasSuperAssociationBuilder()-»
		extends «supertype.implClassName».AssociationsBuilder
	«ENDIF-»
«ENDDEFINE»

«REM»
	An association setter is only generated for associations that are not derived or inverse composition.
	If this is the case, an association setter with a generic subtype of the target class is always generated.
	This makes it possible to set a target that is known to the workspace.
	If the target is in addition not abstract, a setter is generated to directly instanciate the target class.
«ENDREM»

«DEFINE associationEvaluation(XPolicyBuilder sourceBuilder) FOR XPolicyBuilderAssociation»
	«REM» for generic subtype «ENDREM»
	«EXPAND associationSetterWithType(sourceBuilder, this, false, false) FOR targetBuilderClass-»

	«IF !targetBuilderClass.abstract-»
		«EXPAND associationSetter(sourceBuilder, this, false, false) FOR targetBuilderClass-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE associationsEvaluation(XPolicyBuilder builder, boolean super) FOR XPolicyBuilderAssociation»

	«EXPAND standardAssociationSetter(builder, this, super) FOR targetBuilderClass-»

	«EXPAND associationSetterWithType(builder, this, true, super) FOR targetBuilderClass-»

	«IF !targetBuilderClass.abstract-»
		«EXPAND associationSetter(builder, this, true, super) FOR targetBuilderClass-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE standardAssociationSetter(XPolicyBuilder builder, XPolicyBuilderAssociation association, boolean super) FOR XPolicyBuilder»
	/**
	* «localizedJDoc("METHOD_ASS_STD", policyName, association.name)»
	*
	* @generated
	*/
	«IF super-»@Override«ENDIF-»
	public AssociationsBuilder «association.method(association.methodName, policyPublishedInterfaceName, "targetPolicy")»{
		«IF super-»
			super.«association.methodName»(targetPolicy);
		«ELSE-»
			get().«association.methodNameSetOrAdd»(targetPolicy);
		«ENDIF-»
		return this;
	}
«ENDDEFINE»

«REM» Association target setter for generic subtype of the target. see associationEvaluation. super:wether this is for inherited associations«ENDREM»
«DEFINE associationSetterWithType(XPolicyBuilder sourceBuilder, XPolicyBuilderAssociation association, boolean multi, boolean super) FOR XPolicyBuilder»
	/**
	* «localizedJDoc("METHOD_ASS_TYPE", policyName,  association.name)»
	*
	* @generated
	*/
	«IF super-»@Override«ENDIF-»
	public «EXPAND returnType(multi, true)» «association.methodName»(«EXPAND targetBuilderType(multi)» targetBuilder){
		«IF super-»
			super.«association.methodName»(targetBuilder);
		«ELSE-»
			get().«association.methodNameSetOrAdd»(targetBuilder.get());
		«ENDIF-»
		return «EXPAND returnValue(multi)»;
	}
«ENDDEFINE»

«REM» Create and set association target for non abstract targets «ENDREM»
«DEFINE associationSetter(XPolicyBuilder sourceBuilder, XPolicyBuilderAssociation association, boolean multi, boolean super) FOR XPolicyBuilder»
	/**
	* «localizedJDoc("METHOD_ASS", policyName, association.name)»
	*
	* @generated
	*/
	«IF super || (association.needOverrideForConstrainNewChildMethod && association.overwrittenTargetNotAbstract)-» @Override «ENDIF-»
	public «EXPAND returnType(multi, false)» «association.method(association.methodName)»{
		«IF super-»
			super.«association.methodName»();
			return this;
		«ELSE-»
			«IF generatePublishedInterfaces-»
				«implClassName» targetBuilder = new «factoryImplClassName»().with();
			«ELSE-»
				«implClassName» targetBuilder = «policyImplClassName».with();
			«ENDIF-»
			get().«association.methodNameSetOrAdd»(targetBuilder.get());
			return «EXPAND returnValue(multi)»;
		«ENDIF-»
	}

	«IF configured-»
		/**
		* «localizedJDoc("METHOD_ASS_PROD", policyName, association.name)»
		*
		* @generated
		*/
		«IF super || (association.needOverrideForConstrainNewChildMethod && association.overwrittenNotAbstractConfigured)-» @Override «ENDIF-»
		public «EXPAND returnType(multi, false)» «association.method(association.methodName, "String", "productCmptId")»{
			«IF super-»
				super.«association.methodName»(productCmptId);
				return this;
			«ELSE-»
				if(«getRepository()» == null) {
					throw new «RuntimeException()»("«localizedText("EXCEPTION_NO_REPOSITORY")»");
				}
				«implClassName» targetBuilder = null;
				«IF sourceBuilder.configured && productCmptNode.changingOverTime-»
					if(get().getEffectiveFromAsCalendar() != null){
						«IF generatePublishedInterfaces-»
							targetBuilder = new «factoryImplClassName»().with(«getRepository()», productCmptId, get().getEffectiveFromAsCalendar());
						«ELSE-»
							targetBuilder = «policyImplClassName».with(«getRepository()», productCmptId, get().getEffectiveFromAsCalendar());
						«ENDIF-»
					} else{
				«ENDIF-»
					«IF generatePublishedInterfaces-»
						targetBuilder = new «factoryImplClassName»().with(«getRepository()», productCmptId);
					«ELSE-»
						targetBuilder = «policyImplClassName».with(«getRepository()», productCmptId);
					«ENDIF-»
				«IF sourceBuilder.configured && productCmptNode.changingOverTime-»
					}
				«ENDIF-»
				get().«association.methodNameSetOrAdd»(targetBuilder.get());
				return «EXPAND returnValue(multi)»;
			«ENDIF-»
		}
	«ENDIF-»
«ENDDEFINE»

«REM»Associtionbuilder returns the target policy builder while associatonSbuilder returns the same associationsbuilder again.«ENDREM»
«DEFINE returnType(boolean multi, boolean generic) FOR XPolicyBuilder-»
	«IF multi» AssociationsBuilder
	«ELSEIF generic-»<T extends «implClassName»> T
	«ELSE»«implClassName»
	«ENDIF-»
«ENDDEFINE»

«DEFINE targetBuilderType(boolean multi) FOR XPolicyBuilder-»
	«IF multi-»«implClassName»
	«ELSE»T
	«ENDIF-»
«ENDDEFINE»

«DEFINE returnValue(boolean multi) FOR XPolicyBuilder-»
	«IF multi-» this
	«ELSE-»	targetBuilder
	«ENDIF-»
«ENDDEFINE»

«DEFINE policyBuilderField FOR XPolicyBuilder-»
	«IF !hasSuperAssociationBuilder()-»
		/**
		* @generated
		*/
		private «implClassName» policyBuilder;
	«ENDIF-»
«ENDDEFINE»

«DEFINE constructorWithPolicyBuilder(boolean multi) FOR XPolicyBuilder-»
	/**
	* @generated
	*/
	protected Association«IF multi-»s«ENDIF-»Builder(«implClassName» policyBuilder){
		«IF hasSuperAssociationBuilder()-»
			super(policyBuilder);
		«ELSE-»
			this.policyBuilder = policyBuilder;
		«ENDIF-»
	}
«ENDDEFINE»

«DEFINE get FOR XPolicyBuilder-»
	/**
	* @generated
	*/
	«IF hasSuperAssociationBuilder()»@Override«ENDIF-»
	public «policyPublishedInterfaceName» get() {
		«IF hasSuperAssociationBuilder()-»
			return («policyPublishedInterfaceName») super.get();
		«ELSE-»
			return policyBuilder.get();
		«ENDIF-»
	}
«ENDDEFINE»

«DEFINE getRepository FOR XPolicyBuilder-»
	/**
	* @generated
	*/
	«IF !hasSuperAssociationBuilder()-»
	protected «IRuntimeRepository()» «getRepository()» {
		return policyBuilder.«getRepository()»;
	}
	«ENDIF-»
«ENDDEFINE»
