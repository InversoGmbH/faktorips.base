<!-- Delegating build script, used by cruisecontrol to build MY_PROJECT_1.
     Note that the basedir is set to the checked out project -->
<project name="build-faktorips" basedir="checkout/../" >
	
        <property name="cvsroot" value=":local:/usr/local/cvsroot" />
        
	<!-- needs to be updated on every buildcall IMPORTANT - DONT TOUCH THIS!!!! -->
        <target name="updateBuildTemplate">
                <property name="cvsBuildmodule" value="org.faktorips.build" />
                <property name="projectBuildDir" value="checkout/" />
                
                <!-- checkout/update project -->
                <cvs command="co ${cvsBuildmodule}" dest="${projectBuildDir}" cvsroot="${cvsroot}" quiet="true"/>
        </target>
        

        <!-- project targets. please note: each new target has to be a dependant of 
             "updateBuildTemplate" -->
        
        <target name="util" depends="updateBuildTemplate">
		
                <property name="cvsUtilmodule" value="org.faktorips.util" />
                <property name="projectUtilDir" value="checkout/" />
		
		<!-- checkout/update project -->
                
                
                <!-- checkout/update project -->
                <cvs command="co ${cvsUtilmodule}" dest="${projectUtilDir}" cvsroot="${cvsroot}" quiet="true" />
                
		<!-- Call the target that does everything -->
                <ant dir="${projectUtilDir}/${cvsUtilmodule}/build/" antfile="build.xml" target="clean"  />
                <ant dir="${projectUtilDir}/${cvsUtilmodule}/build/" antfile="build.xml" target="buildjar"  />
	    </target>
	
        
        
        
        
		<target name="valuetypes" depends="updateBuildTemplate">
			
			<property name="cvsValuetypesmodule" value="org.faktorips.valuetypes" />
	                <property name="projectValuetypesDir" value="checkout/" />
			
	                
	                <!-- checkout/update project -->
	                <cvs command="co ${cvsValuetypesmodule}" dest="${projectValuetypesDir}" cvsroot="${cvsroot}" quiet="true"/>
	                
			<!-- Call the target that does everything -->
	                <ant dir="${projectValuetypesDir}/${cvsValuetypesmodule}/build/" antfile="build.xml" target="clean"  />
	                <ant dir="${projectValuetypesDir}/${cvsValuetypesmodule}/build/" antfile="build.xml" target="buildjar"  />
		</target>
        
        
        
        
        
        
        <target name="dtflcommon" depends="updateBuildTemplate">
          
          <property name="cvsDtflcommonmodule" value="org.faktorips.dtflcommon" />
          <property name="projectDtflcommonDir" value="checkout/" />
          
          <!-- checkout/update project -->
          <cvs command="co ${cvsDtflcommonmodule}" dest="${projectDtflcommonDir}" cvsroot="${cvsroot}" quiet="true"/>
                
          <!-- Call the target that does everything -->
          <ant dir="${projectDtflcommonDir}/${cvsDtflcommonmodule}/build/" antfile="build.xml" target="clean"  />
          <ant dir="${projectDtflcommonDir}/${cvsDtflcommonmodule}/build/" antfile="build.xml" target="buildjar"  />
        </target>
        
        
        
        
        
        <target name="runtime" depends="updateBuildTemplate">
          
          <property name="cvsRuntimemodule" value="org.faktorips.runtime" />
          <property name="projectRuntimeDir" value="checkout/" />
          
          <!-- checkout/update project -->
          <cvs command="co ${cvsRuntimemodule}" dest="${projectRuntimeDir}" cvsroot="${cvsroot}" quiet="true"/>

          <!-- Call the clean-target -->
          <ant dir="${projectRuntimeDir}/${cvsRuntimemodule}/build/" antfile="build.xml" target="clean"  />

          <!-- Call the target that does everything -->
          <ant dir="${projectRuntimeDir}/${cvsRuntimemodule}/build/" antfile="build.xml" target="buildjar"  />
        </target>
        
        
        
        
        
        <target name="fl" depends="updateBuildTemplate">
          
          <property name="cvsFlmodule" value="org.faktorips.fl" />
          <property name="projectFlDir" value="checkout/" />
          
          <!-- checkout/update project -->
          <cvs command="co ${cvsFlmodule}" dest="${projectFlDir}" cvsroot="${cvsroot}" quiet="true"/>
                
          <!-- Call the target that does everything -->
          <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="cleanParserSource" />
          <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="clean"  />
          <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="buildjar"  />
        </target>
        
	
	
		<target name="devtools.ant" depends="updateBuildTemplate">
			
			<property name="cvsAntModule" value="org.faktorips.devtools.ant" />
			<property name="projectAntDir" value="checkout/" />
			
			<!-- checkout/update project -->
	        <cvs command="co ${cvsAntModule}" dest="${projectAntDir}" cvsroot="${cvsroot}" quiet="true"/>
	          
	        <!-- Call the target that does everything -->
	        <ant dir="${projectAntDir}/${cvsAntModule}/" antfile="scripts/buildExtraJAR.xml"  target="clean"  />
	        <ant dir="${projectAntDir}/${cvsAntModule}/" antfile="scripts/buildExtraJAR.xml" target="main"  />
			
		</target>
	
        
        <target name="devtools.core" depends="updateBuildTemplate">
          
          <property name="cvsFlmodule" value="org.faktorips.devtools.core" />
          <property name="projectFlDir" value="checkout/" />
          
          <!-- checkout/update project -->
          <cvs command="co ${cvsFlmodule}" dest="${projectFlDir}" cvsroot="${cvsroot}" quiet="true"/>
          
          <!-- Call the target that does everything -->
          <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="clean"  />
          <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="buildjar"  />
        </target>

        
        <target name="devtools.stdbuilder" depends="updateBuildTemplate">
          
          <property name="cvsFlmodule" value="org.faktorips.devtools.stdbuilder" />
          <property name="projectFlDir" value="checkout/" />
          
          <!-- checkout/update project -->
          <cvs command="co ${cvsFlmodule}" dest="${projectFlDir}" cvsroot="${cvsroot}" quiet="true"/>
          
          <!-- Call the target that does everything -->
          <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="clean"  />          
          <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="buildjar"  />
        </target>
        
        
        <target name="de.bbv.faktorips.runtime" depends="updateBuildTemplate">
          
          <property name="cvsFlmodule" value="de.bbv.faktorips.runtime" />
          <property name="projectFlDir" value="checkout/" />
          
          <!-- checkout/update project -->
          <cvs command="co de.bbv.cm.CMPlugin" dest="${projectFlDir}" cvsroot="${cvsroot}" quiet="true"/>
          <cvs command="co ${cvsFlmodule}" dest="${projectFlDir}" cvsroot="${cvsroot}" quiet="true"/>
          
          <!-- Call the target that does everything -->
          <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="clean"  />          
          <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="buildjar"  />
        </target>    
        
        <target name="de.bbv.faktorips.devtools" depends="updateBuildTemplate">
          
          <property name="cvsFlmodule" value="de.bbv.faktorips.devtools" />
          <property name="projectFlDir" value="checkout/" />
          
          <!-- checkout/update project -->
          <cvs command="co de.bbv.cm.CMPlugin" dest="${projectFlDir}" cvsroot="${cvsroot}" quiet="true"/>
          <cvs command="co ${cvsFlmodule}" dest="${projectFlDir}" cvsroot="${cvsroot}" quiet="true"/>
          
          <!-- Call the target that does everything -->
          
          <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="clean"  />
          <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="buildjar"  />
        </target>  

	
	<target name="de.qv.faktorips" depends="updateBuildTemplate">
		
		<property name="cvsFlmodule" value="de.qv.faktorips" />
		<property name="projectFlDir" value="checkout/" />
		
		<!-- checkout/update project -->
		<cvs command="co ${cvsFlmodule}" dest="${projectFlDir}" cvsroot="${cvsroot}" quiet="true"/>
		
		<!-- Call the target that does everything -->
		
		<ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="clean"  />
		<ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="buildjar"  />
        </target>  

        <target name="devtools.msgpm" depends="updateBuildTemplate">
          
          <property name="cvsFlmodule" value="org.faktorips.devtools.msgpm" />
          <property name="projectFlDir" value="checkout/" />
          
          <!-- checkout/update project -->
 	<delete includeemptydirs="true" dir="${cvsFlmodule}" />
        <cvs command="co ${cvsFlmodule}" dest="${projectFlDir}" cvsroot="${cvsroot}" quiet="true"/>
          
          <!-- Call the target that does everything -->
          
          <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="clean"  />
          <ant dir="${projectFlDir}/${cvsFlmodule}/build/" antfile="build.xml" target="buildjar"  />
        </target>





        <!-- this target builds faktorips and faktorips-test features and executes testcases 
             results in environment/results/xml will be merged by cruisecontrol                  -->
        <target name="eclipsetest">
                <property name="dir" value="eclipsetest/" />
                
                <!-- delete all files, excluding the environment-folder -->
                <delete includeemptydirs="true" >
                        <fileset dir="${dir}">
                                <exclude name="environment/**" />
                        </fileset>
                </delete>

                <!-- get an up-to-date version of the buildscript -->
                <cvs command="co org.faktorips.build" dest="${dir}" cvsroot="${cvsroot}" quiet="true" />
		
                <!-- execute buildscript which is managed in cvs-module org.faktorips.build/bootstrap/run.sh -->
                <exec executable="/bin/bash" failonerror="true" output="/dev/null" logError="true">
                        <arg line="${dir}/org.faktorips.build/bootstrap/run.sh" />
                </exec>

                <!-- copy faktorips-feature and faktorips-test feature into testenvironment -->
				<copy todir="${dir}/environment/">
					<fileset dir="${dir}/I.TestBuild/" >
	                                <include name="*.zip" />
	                </fileset>
	            </copy>

                <!-- execute eclipse-plugintests (see ../eclipsetest_skel/test.xml which will be called by the runtests script) -->
                <exec executable="/bin/bash" dir="${dir}/environment/" failonerror="true" logError="true">
                        <arg line="runtests all" />
                </exec>
	               
	        	<!-- check if there are errors in testcase-logs -->
				<exec executable="/usr/bin/perl" dir="/opt/cc/work/" failonerror="true" outputproperty="failprop">
					<arg line="lookForFailure.pl"/>
				</exec>
        	
				<!-- checkout org.faktorips.integrationtest project -->
        		<cvs command="co org.faktorips.integrationtest" dest="${dir}" cvsroot="${cvsroot}" quiet="true"/>
        		<property name="importbuildfile" value="${dir}/org.faktorips.build/eclipsetest_skel/importProjects.xml" />
        	
        		<!-- empty workspace which will contain the integrationtest-project -->
        		<delete includeemptydirs="true">
        			<fileset dir="${dir}/environment/workspace/" includes="**/*"/>
        		</delete>

        		<!-- import and build integrationtest sources via eclipse antRunner (see ../eclipsetest_skel/importProjects.xml) -->
        		<exec executable="/usr/bin/java" failonerror="false" logError="true">
        			<arg line="-jar  ${dir}/environment/eclipse/startup.jar -data ${dir}/environment/workspace/ -application org.eclipse.ant.core.antRunner -buildfile ${dir}/org.faktorips.build/eclipsetest_skel/importProjects.xml -Dsourcedir=${dir}/org.faktorips.integrationtest/" />
        		</exec>
        	
        		<!-- run org.faktorips.integrationtest tests -->
        		<property name="classes" value="${dir}/environment/workspace/org.faktorips.integrationtest/bin/" />
        	    <property name="libdir" value="${dir}/environment/workspace/org.faktorips.integrationtest/lib/" />
	        	<junit fork="yes" haltonerror="yes" haltonfailure="yes" printsummary="withOutAndErr" timeout="10000"  showoutput="yes">

		    		<formatter type="xml" usefile="true"/>
		    		<classpath>
	        		    <pathelement location="${libdir}/../bin"/>
	        		    <pathelement location="${libdir}/commons-lang-1.0.1.jar"/>
	        		    <pathelement location="${libdir}/enums.jar"/>
	        		    <pathelement location="${libdir}/faktorips-runtime.jar"/>
	        		    <pathelement location="${libdir}/faktorips-valuetypes.jar"/>
	        			<pathelement location="${libdir}/junit.jar"/>

		    		    <pathelement location="${classes}"/>
		    		    <pathelement path="${java.class.path}"/> 
		    			<fileset dir="${dir}/environment/workspace/org.faktorips.integrationtest/lib/" >
		    				<patternset> 
		    					<include name="*.jar" />
		    				</patternset>
		    			</fileset>
		    		</classpath>
		    		
	        		<!-- put result logfiles into given logdir (passed by cruisecontrol-config.xml in project org.faktorips.eclipsetest -->
					<batchtest filtertrace="off"  todir="{${dir}/environment/results/xml"> 
						<fileset dir="${classes}">
							<patternset id="test.sources">
								<exclude name="**/*Abstract*" />
							    <include name="**/*Test.class"/>
							</patternset>
						</fileset>
					</batchtest>
	        		
				</junit>

        	
        	<!-- check if there are errors in testcase-logs -->
			<exec executable="/usr/bin/perl" dir="/opt/cc/work/" failonerror="true" outputproperty="failprop">
				<arg line="lookForFailure.pl"/>
			</exec>
        	
        </target>
	
	

        <!-- this target builds bbv and bbv-test features and executes testcases 
             results in environment/results/xml will be merged by cruisecontrol                  -->
        <target name="eclipsetest-bbv">
                <property name="dir" value="eclipsetest_bbv/" />
                 
                <!-- delete all files, excluding the environment-folder -->
                <delete includeemptydirs="true">
                        <fileset dir="${dir}">
                                <exclude name="environment/**" />
                        </fileset>
                </delete>

                <!-- get an up-to-date version of the buildscript -->
                <cvs command="co de.bbv.faktorips.build" dest="${dir}" cvsroot="${cvsroot}" quiet="true" />
		
                <!-- execute buildscript which is managed in cvs-module de.bbv.faktorips.build/bootstrap/run.sh -->
                <exec executable="/bin/bash" failonerror="true" output="/dev/null" logError="true">
                        <arg line="${dir}/de.bbv.faktorips.build/bootstrap/run.sh" />
                </exec>

                <!-- copy faktorips-feature and faktorips-test feature into testenvironment -->
		<copy todir="${dir}/environment/">
			<fileset dir="${dir}/I.TestBuild/" >
                                <include name="*.zip" />
                        </fileset>
                </copy>

                <!-- execute test-script -->
                <exec executable="/bin/bash" dir="${dir}/environment/" failonerror="true" logError="true">
                        <arg line="runtests all" />
                </exec>
               
			    <!-- check if there are errors in testcase-logs -->
				<exec executable="/usr/bin/perl" dir="/opt/cc/work/" failonerror="true" outputproperty="failprop">
					<arg line="lookForFailure_bbv.pl"/>
				</exec>
		


        </target>

       
</project>

