/*******************************************************************************
 * Copyright (c) 2005,2006 Faktor Zehn GmbH und andere.
 *
 * Alle Rechte vorbehalten.
 *
 * Dieses Programm und alle mitgelieferten Sachen (Dokumentationen, Beispiele,
 * Konfigurationen, etc.) dürfen nur unter den Bedingungen der 
 * Faktor-Zehn-Community Lizenzvereinbarung – Version 0.1 (vor Gründung Community) 
 * genutzt werden, die Bestandteil der Auslieferung ist und auch unter
 *   http://www.faktorips.org/legal/cl-v01.html
 * eingesehen werden kann.
 *
 * Mitwirkende:
 *   Faktor Zehn GmbH - initial API and implementation 
 *
 *******************************************************************************/

package org.faktorips.devtools.core.ui.views.testrunner;

import java.util.Iterator;
import java.util.List;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.dialogs.ErrorDialog;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IEditorDescriptor;
import org.eclipse.ui.IFileEditorInput;
import org.eclipse.ui.part.FileEditorInput;
import org.faktorips.devtools.core.IpsPlugin;
import org.faktorips.devtools.core.IpsStatus;
import org.faktorips.devtools.core.model.IIpsObject;
import org.faktorips.devtools.core.model.IIpsPackageFragmentRoot;
import org.faktorips.devtools.core.model.IIpsProject;
import org.faktorips.devtools.core.model.IpsObjectType;
import org.faktorips.devtools.core.model.testcase.IIpsTestRunListener;

/**
 * Action for opening a test case in the default editor.
 * 
 * @author Joerg Ortmann
 */
public class OpenTestInEditorAction extends Action {
	private String fFileName;
	private String fQualifiedName;
	private IpsTestRunnerViewPart fTestRunnerViewPart;
	private String failureTraceLine;
    
    public OpenTestInEditorAction(IpsTestRunnerViewPart fTestRunnerViewPart, String fileName, String qualifiedTestName, String failureTraceLine) {
        super(Messages.OpenTestInEditorAction_Title);
        this.failureTraceLine = failureTraceLine;
        this.fFileName = fileName;
        this.fQualifiedName = qualifiedTestName;
        this.fTestRunnerViewPart = fTestRunnerViewPart;
    }
    
	/**
	 * {@inheritDoc}
	 */
	public void run() {
		try {
			Object element = findElement(getLaunchedProject(), fFileName);
			if (element == null) {
				MessageDialog.openError(getShell(), Messages.OpenTestInEditorAction_ErrorDialogTestCaseNotFound_Title, Messages.OpenTestInEditorAction_ErrorDialogTestCaseNotFound_Description); 
				return;
			} 
            if (element instanceof IFile){
                IFileEditorInput editorInput = new FileEditorInput((IFile) element);
                IEditorDescriptor  editor = IpsPlugin.getDefault().getWorkbench().getEditorRegistry().getDefaultEditor(((IFile) element).getName());
                IpsPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(editorInput, editor.getId());
            } else if (element instanceof IIpsObject){
                IpsPlugin.getDefault().openEditor((IIpsObject)element);
            } else {
                MessageDialog.openError(getShell(), Messages.OpenTestInEditorAction_ErrorDialogTestCaseNotFound_Title, Messages.OpenTestInEditorAction_ErrorDialogTestCaseNotFound_Description); 
                return;
            }
		} catch (CoreException e) {
            fTestRunnerViewPart.setInfoMessage(Messages.OpenTestInEditorAction_ErrorCannotOpenEditor_Message);
            ErrorDialog.openError(getShell(), Messages.OpenTestInEditorAction_ErrorDialogCannotOpenEditor_Title,
                    Messages.OpenTestInEditorAction_ErrorDialogCannotOpenEditor_Description, e.getStatus());
            return;
        } catch (Exception e){
            IpsPlugin.logAndShowErrorDialog(new IpsStatus(e));
        }
        selectFailureInTestCaseEditor();
	}

    private void selectFailureInTestCaseEditor() {
        if (failureTraceLine != null){
        // post the failure to the editors (the listeners)
        List listeners = IpsPlugin.getDefault().getIpsTestRunner().getIpsTestRunListener();
            for (Iterator iter = listeners.iterator(); iter.hasNext();) {
                IIpsTestRunListener listener = (IIpsTestRunListener)iter.next();
                // if the listener supports the navigation to the failure then inform the listener,
                // otherwise do nothing
                if (listener.canNavigateToFailure()){
                    String[] failureDetails = fTestRunnerViewPart.getFailureDetailsOfSelectedTestCase();
                    listener.testFailureOccured(failureDetails[0], failureDetails);
                }
            }
        }
    }
	
	private Object findElement(IJavaProject javaProject, String fileName) throws JavaModelException {
		if (javaProject == null)
			return null;
		Object element = null;
        try {
            element = javaProject.getProject().getFile(fileName);
        }
        catch (RuntimeException e) {
            // ignore exception while searching the element
        }
		if (element == null){
			return null;
        }
        
        if (element instanceof IFile && !((IFile)element).exists()){
            // file not found
            // try to search by using the qualified name of the test case
            // e.g. if the ips object is inside an ips archive
            IIpsProject ipsProject = IpsPlugin.getDefault().getIpsTestRunner().getIpsProject();
            try {
                IIpsPackageFragmentRoot[] ipsPackageFragmentRoots = ipsProject.getIpsPackageFragmentRoots();
                for (int i = 0; i < ipsPackageFragmentRoots.length; i++) {
                    // currently two types of ips objects supports test:
                    //  1. product cmpts
                    //  2. isp test cases
                    element = ipsPackageFragmentRoots[i].findIpsObject(IpsObjectType.TEST_CASE, fQualifiedName);
                    if (element != null){
                        break;
                    }
                    element = ipsPackageFragmentRoots[i].findIpsObject(IpsObjectType.PRODUCT_CMPT, fQualifiedName);
                    if (element != null){
                        break;
                    }                    
                }
            } catch (CoreException e) {
                IpsPlugin.logAndShowErrorDialog(e);
            }
        }
        
		return element;
	}

	private IJavaProject getLaunchedProject() {
		return fTestRunnerViewPart.getLaunchedProject();
	}
	
	private Shell getShell() {
		return fTestRunnerViewPart.getSite().getShell();
    }
}
