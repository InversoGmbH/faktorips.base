<?xml version="1.0" encoding="UTF-8"?>
<merge:options
  xmlns:merge="http://www.eclipse.org/org/eclipse/emf/codegen/jmerge/options">

<!--
Currently not activated merge options. The redirect and block options seem only to work when the merge:pull tags use the
targetMarkup attribute instead of the sourceMarkup attribute. However since these attributes are not documented
and can only be found in the emf-merge.xml I copy them into this file.
  indent="  "  
  braceStyle="matching"  
  redirect="Gen"
  block="\s*@\s*generated\s*NOT\s*\n"
  noImport="\s*//\s*import\s+([\w.*]*)\s*;\s*\n"
-->
		
	<!--
	    This dictionary pattern defines a regular expression in the "match" attribute and a location where
	    to look for a string that matches in the "select" attribute. If a pull rule wants to use this dictionary 
	    pattern it declars in the sourceMarkup or targetMarkup attribute the string that is in parentheses 
	    surrounded by the characters ^$. 
	 -->
    <merge:dictionaryPattern name="generatedMember" select="Member/getComment" match="\s*@\s*(gen)erated\s*\n"/>
    <merge:dictionaryPattern name="generatedMember" select="Member/getComment" match="\s*@\s*(restrained)modifiable\s*\n"/>
    
		
    <!--
    	This rule doesn't work. The interfaces are not added but overriden. A look in the source code
    	suggests a false implementation.
    -->
    <merge:pull sourceMarkup="^gen$" sourceGet="Type/getSuperInterfaces" targetPut="Type/addSuperInterface"/>

    <!-- 
        Pull rules for JMerge. The following configuration forces JMerge to look for the "generated" meta-attribute
        in the generated content. If available JMerge looks for a Member with the same name in the target content.
        If also available the target content gets overridden by the generated content. 
     -->
		<merge:pull sourceMarkup="^restrained$" sourceTransfer="(\s*//\s*begin-user-code.*?//\s*end-user-code\s*)\n" sourceGet="Method/getBody" targetPut="Method/setBody"/>
		<merge:pull sourceMarkup="^gen$" sourceGet="Method/getBody" targetPut="Method/setBody"/>
    <merge:pull sourceMarkup="^gen$" sourceGet="Member/getFlags" targetPut="Member/setFlags"/>
    <merge:pull sourceMarkup="^gen$" sourceGet="Type/getSuperclass" targetPut="Type/setSuperclass"/>
    <merge:pull sourceMarkup="^gen$" sourceGet="Field/getType" targetPut="Field/setType"/>
    <merge:pull sourceMarkup="^gen$" sourceGet="Method/getReturnType" targetPut="Method/setReturnType"/>
    <merge:pull sourceMarkup="^gen$" sourceGet="Method/getExceptions" targetPut="Method/addException"/>
    <merge:pull sourceMarkup="^gen$" sourceGet="Field/getInitializer" targetPut="Field/setInitializer"/>
    <merge:pull sourceMarkup="^gen$" sourceGet="Member/getComment" targetPut="Member/setComment"/>
        
    <!--
        The sweep rule looks in the target content if there exist Members that are indicated with the "generated"
        meta-attribute that are not available in the source content. If so it deletes the member in the target
        content.  
     -->
    <merge:sweep markup="^gen$" select="Member"/>
    
    <!--
    	Currently disabled because of problems with methods that have been generated in the first place and get 
    	swept away because	of a model validation error. 
    -->
    <!-- merge:sweep markup="^restrained$" select="Member"/-->
    
</merge:options>