«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::runtime»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::policycmpt::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::productcmpt::template»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::policycmpt::template::PolicyCmptAttributeExtension»

«DEFINE fieldProperties FOR XPolicyAttribute»
	/**
	 * «localizedJDoc("FIELD_PROPERTY_NAME", name)»
	 * @generated
	 */
	public static final String «fieldPropertyName» = "«name»";
«ENDDEFINE»

«DEFINE memberField FOR XPolicyAttribute»
	«IF generateField-»
		/**
		 * «inheritDocOrJavaDoc("FIELD_ATTRIBUTE_VALUE", name)»
		 * @generated
		 */
		«IF constant-»
			public final static «javaClassName» «constantFieldName»= «defaultValueCode»;
		«ELSE-»
			private «javaClassName» «memberVarName»= «defaultValueCode»;
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE getter FOR XPolicyAttribute» 
	«IF generateGetter-»
		/**
		 * «localizedJDoc("METHOD_GETVALUE", name, description)»
		 * @generated
		 */
		«IF  overwrite»«overrideAnnotation(false)»«ENDIF-»
		public «javaClassName» «getterMethodName»() {
			«IF generateField-»
				return «IF constant»«constantFieldName»«ELSE»«getReferenceOrSafeCopyIfNecessary(memberVarName)»«ENDIF»;
			«ELSE-»
				«IF generateDefaultForDerivedAttribute-»
					return «defaultValueCode»;
				«ELSE-»
			        // TODO Belegung der Berechnungsparameter implementieren
			        «EXPAND FormulaSignature::formulaParameterDeclaration FOR formulaSignature-»
			        return «EXPAND getProductGeneration».«EXPAND FormulaSignature::formulaCall FOR formulaSignature-»;			
				«ENDIF-»
			«ENDIF-»
		}
	«ENDIF-»
«ENDDEFINE»

«DEFINE getProductGeneration FOR XPolicyAttribute»
	«IF generatingPublishedInterfaces»
		((«productGenerationClassName»)«productGenerationGetterName»())
	«ELSE»
		«productGenerationGetterName»()
	«ENDIF»
«ENDDEFINE»

«DEFINE setter FOR XPolicyAttribute»
	«IF generateSetter-»
		/**
		 * «localizedJDoc("METHOD_SETVALUE", name, description)»
		 * @generated
		 */
		«IF  overwrite»«overrideAnnotation(false)-»«ENDIF-»
		public void «setterMethodName»(«javaClassName» newValue) {
			«EXPAND PropertyChangeSupport::storeOldValue-»
			this.«memberVarName» = newValue;
			«EXPAND PropertyChangeSupport::notify-»
		}
	«ENDIF-»
«ENDDEFINE»

«DEFINE allowedValuesMethod FOR XPolicyAttribute»
	«IF productRelevant-»
	/**
	 * «localizedJDoc("METHOD_GET_ALLOWED_VALUES_FOR", name, description)»
	 * @generated
	 */
	public «valueSetClass»<«datatypeClass»> «allowedValuesGetterName()»(«IValidationContext()» context) {
		return «productGenerationGetterName»().«allowedValuesGetterName()»(context);
	}
	«ENDIF-»
«ENDDEFINE»

«DEFINE initConfigurableAttribute FOR XPolicyAttribute»
	«IF requiringInitWithProductData-»
        «memberVarName» = «productGenerationGetterName»().«getterMethodName»();
    «ENDIF-»
«ENDDEFINE»
«DEFINE initAttributeFromXML FOR XPolicyAttribute»
	«IF requiringInitFromXML-»
        if (propMap.containsKey("«attributeName»")) {
            this.«memberVarName» = «newInstanceExpression»;
        }
    «ENDIF-»
«ENDDEFINE»
