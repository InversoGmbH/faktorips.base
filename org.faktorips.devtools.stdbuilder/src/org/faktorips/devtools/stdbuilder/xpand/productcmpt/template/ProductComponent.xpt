«IMPORT org::faktorips::devtools::stdbuilder»
«IMPORT org::faktorips::devtools::core::builder::naming»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::template»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::productcmpt::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::policycmpt::model»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::template::CommonGeneratorExtensions»

«DEFINE main FOR XProductCmptClass-»
	«FILE getFileName(BuilderAspect::IMPLEMENTATION) -»
	package «getPackageName(BuilderAspect::IMPLEMENTATION)»;

		«EXPAND CommonDefinitions::ImportBlock FOREACH context.imports ONFILECLOSE»
	
		/**
		«IF generatePublishedInterfaces-»
		 * «localizedJDoc("CLASS", interfaceName)»
		«ELSE-»
		 * «localizedJDocOrDescription("CLASS_NO_INTERFACE", name, description)»
		«ENDIF-»
		 * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)»
		 * @generated
		 */
		public «abstract()» class «implClassName» extends «superclassName-» «EXPAND CommonDefinitions::implementedInterfaces-»
		 {
		 
			«EXPAND ProductAssociation::privateConstants FOREACH associations-»
		 
		 	«FOREACH attributes AS this-»
		 		«IF !generatePublishedInterfaces || !published -»
			 		«EXPAND ProductAttribute::constantForPropertyName-»
			 	«ENDIF-»
		 	«ENDFOREACH-»
		 
			«EXPAND ProductAttribute::memberField FOREACH attributes-»
			
			«EXPAND ProductAssociation::field FOREACH associations-»

		    /**
		     * «localizedJDoc("CONSTRUCTOR", implClassName)»
		     * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)»
		     * @generated
		     */
			public «method(implClassName, IRuntimeRepository(), "repository", "String", "id", "String", "kindId", "String", "versionId")» {
		        super(repository, id, kindId, versionId);
		        «EXPAND ProductAttribute::setDefaultValue FOREACH attributes-»
			}

			«EXPAND getProductComponentGeneration FOR productCmptGenerationNode-»

			«EXPAND ProductAttribute::getterSetter FOREACH attributes»
			
			«EXPAND ProductAssociation::getterSetterAdder FOREACH associations»
			
			«EXPAND DerivedUnionAssociation::methodsForDerivedUnion(this) FOREACH subsettedDerivedUnions»

	    	/**
	     	* «inheritDoc()»
	     	* 
	     	* @generated
	     	*/
	    	@Override
	    	protected void «doInitPropertiesFromXml(Map("String", Element()) + " configMap")» {
	        	super.«doInitPropertiesFromXml("configMap")»;
	        	«EXPAND ProductAttribute::initFromXmlMethodCall FOREACH attributes-»
	    	}

        	«EXPAND ProductAttribute::initFromXmlMethod FOREACH attributes-»
		    
			«IF containsNotDerivedOrConstrainingAssociations-»
			    /**
			     * @generated
			     */
	    		@Override
			    protected void «doInitReferencesFromXml(Map("String", List_(Element())) + " elementsMap")» {
			        super.«doInitReferencesFromXml("elementsMap")»;
			        «EXPAND ProductAssociation::doInitFromXmlMethodCall FOREACH associations-»
			    }
			«ENDIF»

			«EXPAND ProductAssociation::doInitFromXmlMethod FOREACH associations-»
			
			«EXPAND ProductCommons::writeToXmlMethods-»

			«EXPAND createPolicyCmpt(this) FOREACH policyTypeClassHierarchy»

			«IF generateMethodGenericCreatePolicyComponent»
			    /**
			     * «inheritDoc()»
			     * 
			     * @generated
			     */
	    		@Override
			    public «policyInterfaceName» «createPolicyComponent()» {
			    	«IF !configurationForPolicyCmptType-»
			    		return null;
			    	«ELSE-»
			        	return «policyCmptClass.methodNameCreatePolicyCmpt»();
			        «ENDIF-»
			    }
		    «ENDIF»
		    
		    «IF associations.size > 0-»
				«EXPAND ProductAssociation::getLinkMethods»
			«ENDIF-»
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE getProductComponentGeneration FOR XProductCmptGenerationClass-»
		    /**
		     * «inheritDocOrJavaDocIf(genInterface(), "METHOD_GET_GENERATION", generationConceptNameSingular)»
		     *
		     * @generated
		     */
		    «overrideAnnotationForPublishedMethodAndIf(!genInterface())-»
		    public «interfaceName» «method(methodNameGetProductComponentGeneration, Calendar(), varNameEffectiveDate)»
		    «IF genInterface()»;«ELSE-»
		    {
		        return («interfaceName»)«getRepository()».«getProductComponentGeneration("getId()", varNameEffectiveDate)»;
		    }
		    «ENDIF»
«ENDDEFINE»

«REM» The content of the method is always the same (use currentType). The methodName is derived from different types «ENDREM»
«REM» TODO may use covariant return type«ENDREM»
«DEFINE createPolicyCmpt(XProductCmptClass currentType) FOR XPolicyCmptClass»
	«IF currentType.isGenerateMethodCreatePolicyCmpt(this)-»
	    /**
	     * «inheritDocOrJavaDocIf(genInterface(), "METHOD_CREATE_POLICY_CMPT", name)»
		 *
	     * @generated
	     */
	     «overrideAnnotationForPublishedMethodOrIf(!genInterface(), this.productCmptNode != currentType)-»
	    public «publishedInterfaceName» «method(methodNameCreatePolicyCmpt)»
	    «IF genInterface()»;«ELSE-»
	    {
	        return new «currentType.policyImplClassName»(this);
	    }
		«ENDIF»
    «ENDIF»
«ENDDEFINE»
